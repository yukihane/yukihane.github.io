<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>発火後忘失</title>
    <link>https://yukihane.github.io/</link>
    <description>Recent content on 発火後忘失</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Sun, 26 Jan 2020 04:15:05 +0900</lastBuildDate>
    
        <atom:link href="https://yukihane.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>Rust に reduce は、あります</title>
        <link>https://yukihane.github.io/blog/202110/09/rust-reduce/</link>
        <pubDate>Sat, 09 Oct 2021 02:14:55 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202110/09/rust-reduce/</guid>
        <description>ググっていると、ちょくちょく 「Rust に reduce は無い、代わりに fold を使え」という話が出てくるのが疑問だったのですが、 reduce が導入されたのって 1.51.</description>
      </item>
      
      <item>
        <title>Rust の Result を良い感じにまとめるには</title>
        <link>https://yukihane.github.io/blog/202110/09/rust-result/</link>
        <pubDate>Fri, 08 Oct 2021 18:50:43 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202110/09/rust-result/</guid>
        <description>…というのを検索する用語が &amp;#34;エラーハンドリング(error handling)&amp;#34; だということに気付くまでにも時間がかかるくらいの初級者です。 Rust でのエラー</description>
      </item>
      
      <item>
        <title>Hello Project Panama, on Java17</title>
        <link>https://yukihane.github.io/blog/202110/08/hello-project-panama-on-java17/</link>
        <pubDate>Fri, 08 Oct 2021 04:49:30 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202110/08/hello-project-panama-on-java17/</guid>
        <description>はじめに Hello Project Panama – 発火後忘失 で、 Project Panama (リンク1, リンク2) の機能を利用して、 Java から Rust を呼び出してみました。 当時(Java14)は Project Panama 用にビルド</description>
      </item>
      
      <item>
        <title>Tauri を GUI にして Rust と React に入門する</title>
        <link>https://yukihane.github.io/blog/202110/03/hello-tauri/</link>
        <pubDate>Sun, 03 Oct 2021 08:20:21 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202110/03/hello-tauri/</guid>
        <description>はじめに Tauri という、 WebView を利用して GUI を実現する Rust 製フレームワークを試してみました。 Rust も React も入門書から陸続きで書き始められるので、余計なことに気を</description>
      </item>
      
      <item>
        <title>JPA Entity には Lombok の @Data(@EqualsAndHashCode) を使用すべきでない</title>
        <link>https://yukihane.github.io/blog/202107/31/dont-use-lombok-with-jpa/</link>
        <pubDate>Fri, 30 Jul 2021 17:57:08 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202107/31/dont-use-lombok-with-jpa/</guid>
        <description>問題になりそうなキーワード: lazy loading collection 循環参照 mutability @Data(@EqualsAndHashCode) を付与すると hashCode() は自動で算出されるようになりますが、JPA @Entity では上記のような理由で、ハッシュ値が</description>
      </item>
      
      <item>
        <title>RestTemplateが採用するHTTPクライアント実装の順序</title>
        <link>https://yukihane.github.io/blog/202107/25/resttemplate-impl-order/</link>
        <pubDate>Sat, 24 Jul 2021 19:53:33 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202107/25/resttemplate-impl-order/</guid>
        <description>By default the built RestTemplate will attempt to use the most suitable ClientHttpRequestFactory — RestTemplateBuilder JavaDoc とありますが、具体的にどうやって決めているの？という話です。 ClientHttpRequestFactory</description>
      </item>
      
      <item>
        <title>Spring BootとTypeScriptで開発するためのプロジェクト設定(Gradle) - Polyfillも必要とする場合</title>
        <link>https://yukihane.github.io/blog/202107/11/spring-boot-with-babel/</link>
        <pubDate>Sat, 10 Jul 2021 23:53:20 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202107/11/spring-boot-with-babel/</guid>
        <description>はじめに 前回 は ts-loader を用いて TypeScript をビルドしました。 簡潔にセットアップできたのは良いのですが、実際にはPolyfillを行いたいので babel-loader をベースに再構</description>
      </item>
      
      <item>
        <title>Spring BootとTypeScriptで開発するためのプロジェクト設定(Gradle)</title>
        <link>https://yukihane.github.io/blog/202107/10/spring-boot-with-typescript/</link>
        <pubDate>Fri, 09 Jul 2021 22:54:04 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202107/10/spring-boot-with-typescript/</guid>
        <description>はじめに Spring Boot で JavaScript を扱うときは素のJSをhtml(Thymeleafテンプレート)に &amp;lt;script&amp;gt; タグで埋め込む、というのが多分一般的で手っ取り早い方法か</description>
      </item>
      
      <item>
        <title>Spring Boot 2.5.0(Spring Security 5.5.0-M2)でremoteUserの値が変わった</title>
        <link>https://yukihane.github.io/blog/202106/30/spring-boot-remoteuser-is-changed/</link>
        <pubDate>Tue, 29 Jun 2021 20:00:43 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202106/30/spring-boot-remoteuser-is-changed/</guid>
        <description>HttpServletRequest#getRemoteUser() をログ出力(Tomcatの %u)しているのですが、Spring Boot 2.5.0 から返ってくる値が変わったようです。 どの変更が影響しているのか調べたとこ</description>
      </item>
      
      <item>
        <title>AWS EC2 で squid プロキシサーバを立てる</title>
        <link>https://yukihane.github.io/blog/202106/21/aws-squid-proxy/</link>
        <pubDate>Sun, 20 Jun 2021 23:39:04 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202106/21/aws-squid-proxy/</guid>
        <description>はじめに SteamのDLC等をダウンロードしようとしたとき、IPアドレスによるアクセス制限が課されている場合があり、それを回避する必要が出る</description>
      </item>
      
      <item>
        <title>Spring Boot で Tomcat のメトリクスを出力する</title>
        <link>https://yukihane.github.io/blog/202106/12/spring-boot-tomcat-metrics/</link>
        <pubDate>Sat, 12 Jun 2021 10:07:19 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202106/12/spring-boot-tomcat-metrics/</guid>
        <description>Spring Boot アプリケーションの性能評価を行っているのですが、実装したアプリケーション部分ではなく、webサーバかどこかがパフォーマンスボトルネックに</description>
      </item>
      
      <item>
        <title>GitHub Actions を使って GitHub Pages を定期更新する</title>
        <link>https://yukihane.github.io/blog/202106/06/hello-github-actions/</link>
        <pubDate>Sun, 06 Jun 2021 12:50:13 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202106/06/hello-github-actions/</guid>
        <description>これまで GitHub Actions を使ったことがなかったのですが、 GitHub Pagesの更新を自動化したい - スタック・オーバーフロー という質問を見かけ、丁度よいお題だと思</description>
      </item>
      
      <item>
        <title>Spring BootでTomcatのデフォルトエラーページが出るのを抑止する</title>
        <link>https://yukihane.github.io/blog/202105/21/spring-boot-avoid-tomcat-error-page/</link>
        <pubDate>Thu, 20 May 2021 20:58:00 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202105/21/spring-boot-avoid-tomcat-error-page/</guid>
        <description>Spring Boot を実行していると、Tomcatのデフォルトエラーページが表示されるような事象に遭遇することがあります。 Tomcat invokes ErrorReportValve directly for malformed URLs · Issue #21257 · spring-projects/spring-boot このページ</description>
      </item>
      
      <item>
        <title>Git の merge も思いの外危険</title>
        <link>https://yukihane.github.io/blog/202105/19/git-merge-risk/</link>
        <pubDate>Tue, 18 May 2021 23:01:49 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202105/19/git-merge-risk/</guid>
        <description>次のblogエントリがバズっていました: Gitのワークフローについての私のスタンス | おそらくはそれさえも平凡な日々 大局としては同意なのですが</description>
      </item>
      
      <item>
        <title>script src に設定する URL の &amp; はどう書けば良い？</title>
        <link>https://yukihane.github.io/blog/202105/19/url-amp/</link>
        <pubDate>Tue, 18 May 2021 22:38:11 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202105/19/url-amp/</guid>
        <description>&amp;lt;script&amp;gt; タグの src に URL 書く場合、クエリパラメータ連結の &amp;amp; ってどう書くべきなんだろう、という話です。 結論としては、以下のように、 &amp;amp;amp; とするのが無難、とい</description>
      </item>
      
      <item>
        <title>AWS EC2 の Mac インスタンスを試してみた</title>
        <link>https://yukihane.github.io/blog/202105/16/aws-mac/</link>
        <pubDate>Sun, 16 May 2021 11:40:48 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202105/16/aws-mac/</guid>
        <description>最初に注意点: 初めての場合、使えるようになるまで17時間強かかる。 最低割り当て時間は24時間。つまり1回利用すると最低 3,000円弱はかかる</description>
      </item>
      
      <item>
        <title>Authorization(認可)リクエストヘッダに設定するのは認証(authentication)情報</title>
        <link>https://yukihane.github.io/blog/202105/15/authorization-authentication/</link>
        <pubDate>Sat, 15 May 2021 09:40:22 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202105/15/authorization-authentication/</guid>
        <description>今日もOAuthは認証じゃなくて認可の仕組みだ云々という話題でソーシャルネットがもちきりですが、そんなことより表題の方がよっぽど気になりませ</description>
      </item>
      
      <item>
        <title>LINEログインを試してみる(Spring Boot 2.4.5/Spring Security 5.4.6)</title>
        <link>https://yukihane.github.io/blog/202105/06/ling-login-202105/</link>
        <pubDate>Thu, 06 May 2021 10:43:04 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202105/06/ling-login-202105/</guid>
        <description>はじめに LINEログイン機能を試してみる – 発火後忘失 で、 Spring Boot 2.1.7 (Spring Security 5.1.6) を利用してLINEログインを行ってみました。 本ドキュメントは、このコード</description>
      </item>
      
      <item>
        <title>MySQL Connector/J 8.0.23 でタイムゾーン変換メカニズムが変更になった</title>
        <link>https://yukihane.github.io/blog/202104/29/mysql-connector-j-8.0.23/</link>
        <pubDate>Wed, 28 Apr 2021 15:55:52 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202104/29/mysql-connector-j-8.0.23/</guid>
        <description>MySQL Connector/J 8.0.23 でタイムゾーン変換のメカニズムが変わりました(Spring Boot では 2.3.9以降, 2.4.3以降でこれを採用しています)。 Important Change: A new mechanism has been</description>
      </item>
      
      <item>
        <title>formで(送信ボタンを押さずに)エンターキーで送信する</title>
        <link>https://yukihane.github.io/blog/202103/21/implicit-submission/</link>
        <pubDate>Sun, 21 Mar 2021 09:54:35 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202103/21/implicit-submission/</guid>
        <description>入力フォームに値を入力して、(送信ボタンを押すのではなく)入力フィールド内でエンターキーを押すと送信される機能、&amp;#34;Implicit S</description>
      </item>
      
      <item>
        <title>メモ: テスト観点</title>
        <link>https://yukihane.github.io/blog/202103/07/testing-perspective/</link>
        <pubDate>Sun, 07 Mar 2021 20:21:25 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202103/07/testing-perspective/</guid>
        <description>書籍「ソフトウェアテストの教科書 - 品質を決定づけるテスト構成の基本と実践」第4章 ブラックボックステスト 表4-4 分類の基準として利用できる指標</description>
      </item>
      
      <item>
        <title>Ubuntu20.04 で Kindle for PC</title>
        <link>https://yukihane.github.io/blog/202103/07/kindle-for-pc-on-ubuntu20.04/</link>
        <pubDate>Sun, 07 Mar 2021 05:21:25 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202103/07/kindle-for-pc-on-ubuntu20.04/</guid>
        <description>以前記載していたUbuntu16.04(及び18.04)用の Kindle for PC セットアップ手順だと起動時にネットワーク接続できず利用できなくなってしまっ</description>
      </item>
      
      <item>
        <title>Ubuntu20.04 で Kindle for PCを使う</title>
        <link>https://yukihane.github.io/docs/ubuntu/kindle-for-pc-ubuntu20.04/</link>
        <pubDate>Sun, 07 Mar 2021 01:57:49 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/ubuntu/kindle-for-pc-ubuntu20.04/</guid>
        <description>はじめに 2021-03-07時点では、 UbuntuでKindle for PCを使う の方法で Ubuntu20.04 に Kindle for PC をインストールして起動すると、次のようなエラー</description>
      </item>
      
      <item>
        <title>Ubuntuで使うKindle for PCのメニュー文字化け解消</title>
        <link>https://yukihane.github.io/blog/202103/06/kindle-menu-tofu/</link>
        <pubDate>Sat, 06 Mar 2021 05:21:25 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202103/06/kindle-menu-tofu/</guid>
        <description>Ubuntuに初回セットアップしてから放置していたのですが、ずっとメニューが文字化け(豆腐表示)になっていたのが気になっていました。 この度、</description>
      </item>
      
      <item>
        <title>SLF4Jでplaceholderも使いつつstacktraceも出力したい</title>
        <link>https://yukihane.github.io/blog/202102/02/slf4j-placeholder-throwable/</link>
        <pubDate>Mon, 01 Feb 2021 16:38:42 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202102/02/slf4j-placeholder-throwable/</guid>
        <description>SLF4J の Logger のメソッドを眺めていると、 Throwable を引数にとれるのは 他に Marker と String メッセージだけを持つものばかりで、プレースホルダを利用したい場合にはどうしたら</description>
      </item>
      
      <item>
        <title>ガバガバOIDCモックサーバを作る</title>
        <link>https://yukihane.github.io/blog/202101/30/gava-oidc-idp/</link>
        <pubDate>Sat, 30 Jan 2021 06:29:06 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202101/30/gava-oidc-idp/</guid>
        <description>OIDCフローの調査などで本物でないOIDC IdP Mock Serverが欲しくなったので検索してみました。 世に数多あるように見えたのですが、結構真面目</description>
      </item>
      
      <item>
        <title>Spring Boot の CORS 設定を全許可する</title>
        <link>https://yukihane.github.io/blog/202101/24/spring-boot-cors-permit-all/</link>
        <pubDate>Sun, 24 Jan 2021 13:59:39 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202101/24/spring-boot-cors-permit-all/</guid>
        <description>How to configure CORS in a Spring Boot + Spring Security application? - Stack Overflow Spring Boot のリファレンス 4.7.1. The “Spring Web MVC Framework” &amp;gt; CORS Support を見ると、次のように設定すれば良いように見え</description>
      </item>
      
      <item>
        <title>Spring Sessionをインメモリで利用する</title>
        <link>https://yukihane.github.io/blog/202101/24/spring-session-in-memory/</link>
        <pubDate>Sun, 24 Jan 2021 13:31:55 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202101/24/spring-session-in-memory/</guid>
        <description>What should be a replacement for StoreType.HASH_MAP in spring-boot 2 昔は spring.session.store-type の選択肢に hash_map というものがあったようですが、現在は存在しません。(ちなみに none は Spring Session を利用しない、という意味になるよう</description>
      </item>
      
      <item>
        <title>ControllerでUnauthorizedExceptionを投げると401でなく403になる</title>
        <link>https://yukihane.github.io/blog/202101/23/throw-unauthorizedexception-in-controller/</link>
        <pubDate>Sat, 23 Jan 2021 14:14:04 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202101/23/throw-unauthorizedexception-in-controller/</guid>
        <description>Authentication handling in Spring boot 2.x with WebSecurityConfigurerAdapter - Stack Overflow Http403ForbiddenEntryPoint がデフォルトで設定されているため、 ExceptionTranslationFilter において AuthenticationException のサブクラスは全て 403 になっている模様。 認証通った上でunauthori</description>
      </item>
      
      <item>
        <title>Spring Boot 2.4.1-&gt;2.4.2アップグレードで発生した問題メモ</title>
        <link>https://yukihane.github.io/blog/202101/21/ploblem-in-springboot2.4.2/</link>
        <pubDate>Thu, 21 Jan 2021 15:51:37 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202101/21/ploblem-in-springboot2.4.2/</guid>
        <description>Spring Framework 5.3.3 で対応された Update OncePerRequestFilter.isAsyncDispatch to use HttpServletRequest.getDispatcherType() #26282 コード差分 の影響で、 HttpServletRequest#getDispatcherType() メソッドが呼ばれるようになっています。 これにより、 HttpServletRequest をモック化して実行していたテストケー</description>
      </item>
      
      <item>
        <title>Ubuntu 20.04 LTS にアップグレードして問題が発生した</title>
        <link>https://yukihane.github.io/blog/202101/21/upgrade-to-ubuntu20.04/</link>
        <pubDate>Thu, 21 Jan 2021 14:55:11 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202101/21/upgrade-to-ubuntu20.04/</guid>
        <description>さて2021年にもなったし、そろそろUbuntuアップグレードしても解消できない地雷は無くなっているだろう、と思い18.04からアップグレー</description>
      </item>
      
      <item>
        <title>Spring Boot 2.3.5 で MapStruct を利用しているプロジェクトのビルドが失敗した</title>
        <link>https://yukihane.github.io/blog/202011/14/mapstruct-with-spring-boot-2.3.5/</link>
        <pubDate>Sat, 14 Nov 2020 07:41:01 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202011/14/mapstruct-with-spring-boot-2.3.5/</guid>
        <description>調査したところSpring Bootの問題と言うよりは、Lombokのバージョンが 1.18.12 から 1.18.16 に上がったことによる非互換性の問題でした。 Lombo</description>
      </item>
      
      <item>
        <title>Spring SecurityのOAuth 2.0 Login でログインしても UserInfo Endpoint にアクセスしてくれない</title>
        <link>https://yukihane.github.io/blog/202009/12/oidc-userinfo-not-fetched-for-custom-claims/</link>
        <pubDate>Sat, 12 Sep 2020 12:56:30 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202009/12/oidc-userinfo-not-fetched-for-custom-claims/</guid>
        <description>Spring Security OAuth 2.0 Login を利用してログインしたのですが、通常ログイン後 UserInfo Endpoint へアクセスしてくれるはずなのにこの処理がスキップされてしまうような事象に出会いま</description>
      </item>
      
      <item>
        <title>WindowsでGradleが扱うリソースのファイルエンコーディング設定</title>
        <link>https://yukihane.github.io/blog/202009/12/gradle-resource-encoding/</link>
        <pubDate>Sat, 12 Sep 2020 12:26:22 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202009/12/gradle-resource-encoding/</guid>
        <description>問題 Spring Bootの自動テストで data.sql を作成しているのですが、 gradle check でテストを実行すると、失敗してしまう。 原因を調べたのですが、どうも日本語のカラムを</description>
      </item>
      
      <item>
        <title>claimとscopeを追加して取得してみる</title>
        <link>https://yukihane.github.io/blog/202009/04/oidc-add-claim-and-scope/</link>
        <pubDate>Thu, 03 Sep 2020 23:24:39 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202009/04/oidc-add-claim-and-scope/</guid>
        <description>はじめに Keycloak上で新しいclaimと、それを取得できる新しいscopeを定義し、Spring Securityを使って参照してみます</description>
      </item>
      
      <item>
        <title>Spring Security: OIDC の redirect_uri を変更する</title>
        <link>https://yukihane.github.io/blog/202009/04/oidc-change-redirect-uri/</link>
        <pubDate>Thu, 03 Sep 2020 22:50:21 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202009/04/oidc-change-redirect-uri/</guid>
        <description>はじめに KeycloakをIdPにしてSpring Security OAuth 2.0 Login/Client を試してみる で作成したコードに対して、 カスタム redirect_uri の設定を行ってみます。 今回のコード</description>
      </item>
      
      <item>
        <title>DevToolsを組み込んでいると再起動してもsessionが引き継がれる</title>
        <link>https://yukihane.github.io/blog/202009/02/spring-boot-session-take-over-on-restart-with-devtools/</link>
        <pubDate>Tue, 01 Sep 2020 18:46:13 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202009/02/spring-boot-session-take-over-on-restart-with-devtools/</guid>
        <description>Spring Boot開発中、再起動するとsessionは消失すると思いこんでいたのですが、どうも引き継がれているように見えて混乱しました。 その後、調査</description>
      </item>
      
      <item>
        <title>Ruby on Rails 6 を Centos6 や Centos7 で動かす</title>
        <link>https://yukihane.github.io/blog/202009/02/ruby-on-rails-on-centos6-centos7/</link>
        <pubDate>Tue, 01 Sep 2020 15:12:18 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202009/02/ruby-on-rails-on-centos6-centos7/</guid>
        <description>CentOS6 上で rails new できません - スタック・オーバーフロー VagrantとCentOS7環境下でRuby及びRailsをインストールしたい。 - スタック・</description>
      </item>
      
      <item>
        <title>CentOS6にGCC10.2.0をインストールしたときのメモ</title>
        <link>https://yukihane.github.io/blog/202008/31/gcc-installation/</link>
        <pubDate>Sun, 30 Aug 2020 21:32:44 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202008/31/gcc-installation/</guid>
        <description>ビルド作業は次のページを参考にしました: gcc-10.1.0をCentOS7にソースインストール | 株式会社オルタ 環境は こちら に記載したもので</description>
      </item>
      
      <item>
        <title>gccをビルドするのにどれくらい時間がかかるの？(10分かからなかった) </title>
        <link>https://yukihane.github.io/blog/202008/30/gcc-compilation-time/</link>
        <pubDate>Sun, 30 Aug 2020 06:57:01 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202008/30/gcc-compilation-time/</guid>
        <description>gccをビルドしようと思ったのですが、結構時間がかかるイメージがあって、先にどれくらいかかるのか調べたかったのだけれど検索しても見つかりませ</description>
      </item>
      
      <item>
        <title>gradle bootRun でプロファイルを指定するには？</title>
        <link>https://yukihane.github.io/blog/202008/30/gradle-bootrun-parameter/</link>
        <pubDate>Sat, 29 Aug 2020 23:16:09 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202008/30/gradle-bootrun-parameter/</guid>
        <description>gradle bootRun を実行する際にアクティブ化するプロファイルの指定を行いたかったのですが、ぱっと思いつかなかったのでメモ。 まず、 gradle bootRun -Dprofiles.active=myproile はうまくいきません。</description>
      </item>
      
      <item>
        <title>openapi-generaterで生成したcontrollerにカスタム引数を追加する</title>
        <link>https://yukihane.github.io/blog/202008/30/openapi-spring-mvc-handler-args/</link>
        <pubDate>Sat, 29 Aug 2020 19:23:06 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202008/30/openapi-spring-mvc-handler-args/</guid>
        <description>はじめに openapi generator を Spring Boot で利用してみる で openapi-generator を用いて Spring MVC のコントローラ(のインタフェース)を自動生成してみました。 その後、これを実際に利用してみて気</description>
      </item>
      
      <item>
        <title>Restful API, path を使うか query を使うか</title>
        <link>https://yukihane.github.io/blog/202008/24/rest-path-or-query/</link>
        <pubDate>Sun, 23 Aug 2020 17:24:37 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202008/24/rest-path-or-query/</guid>
        <description>特に結論はなく、情報収集です。 Google の検索 URI「http://www.google.com/search?q=jellyfish」について考え</description>
      </item>
      
      <item>
        <title>openapi generator を Spring Boot で利用してみる</title>
        <link>https://yukihane.github.io/blog/202008/23/openapi-generator/</link>
        <pubDate>Sun, 23 Aug 2020 05:09:07 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202008/23/openapi-generator/</guid>
        <description>今回の成果物 https://github.com/yukihane/hello-java/tree/master/spring/openapi-sample 設定 build.gradle openapi-generator-gradle-plugin spring generator 辺りを参考にしています。 build.gradle plugins { id &amp;#39;eclipse&amp;#39; id &amp;#39;org.openapi.generator&amp;#39; version &amp;#39;4.3.1&amp;#39; } ext { openApiOutputDir = &amp;#34;$rootDir/build/generated/openapi&amp;#34; } sourceSets.main.java.srcDirs += [&amp;#34;$openApiOutputDir/src/main/java&amp;#34;] dependencies { // これらは自動生成クラスが import しているので必要 implementation &amp;#39;org.springframework.boot:spring-boot-starter-validation&amp;#39;</description>
      </item>
      
      <item>
        <title>Spring BootプロジェクトにLombokとMapStructを追加する(Eclipse &amp; Maven/Gradle)</title>
        <link>https://yukihane.github.io/blog/202008/23/spring-lombok-mapstruct/</link>
        <pubDate>Sun, 23 Aug 2020 03:23:31 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202008/23/spring-lombok-mapstruct/</guid>
        <description>Spring Boot プロジェクトにLombokとMapStructを追加し、かつ Eclipse で開発を行う場合の設定です。 同じようなことを何回か書いてきた気がするのです</description>
      </item>
      
      <item>
        <title>Gradleでintegration testを作成するも実行できない(JUnit5)</title>
        <link>https://yukihane.github.io/blog/202008/16/gradle-test-not-working/</link>
        <pubDate>Sun, 16 Aug 2020 14:20:16 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202008/16/gradle-test-not-working/</guid>
        <description>Gradle で integration-test 用にテストディレクトリを分けようとして リファレンス を参考に build.gradle を編集しました。 しかし、コンパイル対象には入っているようですがこのテストが</description>
      </item>
      
      <item>
        <title>ランダム文字列URL生成に関するメモ</title>
        <link>https://yukihane.github.io/blog/202008/15/capability-url/</link>
        <pubDate>Sat, 15 Aug 2020 10:26:40 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202008/15/capability-url/</guid>
        <description>推測されないような文字列を動的に生成しURLに利用できるような仕組みを調べていますが、その調査メモです。 ちょうど私が調べている時期と重なって</description>
      </item>
      
      <item>
        <title>Spring Security OAuth 2.0 Login を自動テストする</title>
        <link>https://yukihane.github.io/blog/202008/05/spring-boot-oidc-testing/</link>
        <pubDate>Tue, 04 Aug 2020 21:39:37 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202008/05/spring-boot-oidc-testing/</guid>
        <description>KeycloakをIdPにしてSpring Security OAuth 2.0 Login/Client を試してみる で作成したプログラムの自動テスト方法です。 今回のコードも前回と同じく次のディレ</description>
      </item>
      
      <item>
        <title>LombokとMapStructをEclipseで併用しようとした際の不具合がMapStruct1.4.0で解消されていた</title>
        <link>https://yukihane.github.io/blog/202007/28/lombok-and-mapstruct-problem-is-fixed/</link>
        <pubDate>Tue, 28 Jul 2020 12:06:03 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202007/28/lombok-and-mapstruct-problem-is-fixed/</guid>
        <description>これまで、LombokとMapStructを併用しようとした場合、そのままだと不具合(MapStructのアノテーションプロセッシングが動作</description>
      </item>
      
      <item>
        <title>Git</title>
        <link>https://yukihane.github.io/docs/git/</link>
        <pubDate>Sun, 26 Jul 2020 03:10:06 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/git/</guid>
        <description>オンラインマニュアル https://git-scm.com/docs password記憶 git config --global credential.helper &amp;#39;cache --timeout=21600&amp;#39; 21600秒(6時間)デーモンがパスワードを保持する。 単語単位diff git config --global alias.diffw &amp;#34;diff --word-diff-regex=.&amp;#34; 上記</description>
      </item>
      
      <item>
        <title>Ansible</title>
        <link>https://yukihane.github.io/docs/ansible/</link>
        <pubDate>Sun, 26 Jul 2020 03:08:10 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/ansible/</guid>
        <description>チュートリアル http://docs.ansible.com/ansible/intro_getting_started.html の通り実行しようとすると以下のエラーとなった。 ubuntu:~$ ansible all -m ping mama | UNREACHABLE! =&amp;gt; { &amp;#34;changed&amp;#34;: false, &amp;#34;msg&amp;#34;: &amp;#34;Failed to connect to the host via ssh: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).\r\n&amp;#34;, &amp;#34;unreachable&amp;#34;: true } ubuntu:~$ ansible all -m ping --ask-pass SSH password: mama | FAILED! =&amp;gt;</description>
      </item>
      
      <item>
        <title>VirtualBox</title>
        <link>https://yukihane.github.io/docs/virtualbox/</link>
        <pubDate>Sun, 26 Jul 2020 03:07:00 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/virtualbox/</guid>
        <description>tips 仮想ハードディスクのUUID変更 仮想ハードディスクはVirtualBox上ではUUIDによって識別されています。 このため、仮想ハードディス</description>
      </item>
      
      <item>
        <title>Windows Python</title>
        <link>https://yukihane.github.io/docs/python/windows-python/</link>
        <pubDate>Sun, 26 Jul 2020 03:02:03 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/python/windows-python/</guid>
        <description>ChocolateyでインストールしたPython3の運用について。 proxy pip コマンドは環境変数 http_proxy , https_proxy を見ているので、プロキシ環境下ではこれらの設</description>
      </item>
      
      <item>
        <title>Python</title>
        <link>https://yukihane.github.io/docs/python/python/</link>
        <pubDate>Sun, 26 Jul 2020 02:59:15 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/python/python/</guid>
        <description>セットアップ pip pip を使い、非rootでインストールするには --user オプションを付ける。 このオプションをつけると ~/.local 以下にインストールされる。 ただ、 pip の</description>
      </item>
      
      <item>
        <title>バッチファイル</title>
        <link>https://yukihane.github.io/docs/windows/batch/</link>
        <pubDate>Sun, 26 Jul 2020 02:56:23 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/windows/batch/</guid>
        <description>エスケープ ^ でエスケープ。改行をエスケープする場合は文末に置けばよい。</description>
      </item>
      
      <item>
        <title>Chocolatey</title>
        <link>https://yukihane.github.io/docs/windows/chocolatey/</link>
        <pubDate>Sun, 26 Jul 2020 02:52:35 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/windows/chocolatey/</guid>
        <description>https://chocolatey.org/ インストール PowerShell プロファイル作成 プロファイルが存在しない状態でChocolateyインストールを行うと警告が出て気持ち悪いので、プロファイル</description>
      </item>
      
      <item>
        <title>Windows</title>
        <link>https://yukihane.github.io/docs/windows/windows/</link>
        <pubDate>Sun, 26 Jul 2020 02:50:26 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/windows/windows/</guid>
        <description>システムイメージ作成(Windows7) https://121ware.com/qasearch/1007/app/servlet/relatedqa?QID=012941 https://121ware.com/qasearch/1007/app/servlet/qadoc?QID=013667 コントロールパネル &amp;gt; バックアップの作成 &amp;gt; システムイメージの作成 ハードディスクに作成する場合は起動</description>
      </item>
      
      <item>
        <title>ドキュメンテーションツールメモ</title>
        <link>https://yukihane.github.io/docs/documentation-tool/</link>
        <pubDate>Sun, 26 Jul 2020 02:48:10 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/documentation-tool/</guid>
        <description>Sphinx Swagger Pandoc AsciiDoc入門 - Qiita https://azu.github.io/slide/individual/ 文書作成環境の比較 - TeX Wiki ドキュメントシステムはこれを使え2015年版 asciidoctor asciidocをPDFに変換してみた</description>
      </item>
      
      <item>
        <title>Eclipse Plugin</title>
        <link>https://yukihane.github.io/docs/java/eclipse-plugin/</link>
        <pubDate>Sun, 26 Jul 2020 02:46:12 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/java/eclipse-plugin/</guid>
        <description>Eclipse4 e4 RCP2.0 Eclipse 4 (e4) Tutorial Part 1 – The e4 Application Model - Qiita Eclipse4/RCP - Eclipsepedia Tycho Eclipse Plugin TychoとTycho用archetypeを用いた開発手順。 参考 Eclipse Pluginを簡単に作成する方</description>
      </item>
      
      <item>
        <title>Eclipse</title>
        <link>https://yukihane.github.io/docs/java/eclipse/</link>
        <pubDate>Sun, 26 Jul 2020 02:45:24 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/java/eclipse/</guid>
        <description>dropins ディレクトリ構成パターン 参考: The dropins folder and supported file layouts eclipse/ dropins/ org.eclipse.core.tools_1.4.0.200710121455.jar org.eclipse.releng.tools_3.3.0.v20070412/ plugin.xml tools.jar ... etc ... ... eclipse/ dropins/ eclipse/ features/ plugins/ eclipse/ dropins/ emf/ eclipse/ features/ plugins/ gef/ eclipse/ features/ plugins/ ... etc ... テンプレート変数 オフィシャルマニュアル</description>
      </item>
      
      <item>
        <title>QuickJUnit</title>
        <link>https://yukihane.github.io/docs/java/quick-junit/</link>
        <pubDate>Sun, 26 Jul 2020 02:43:41 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/java/quick-junit/</guid>
        <description>マニュアルなど https://github.com/yukihane/quick-junit/blob/develop/ja/README.textile (英版にのみ書かれている情報も) http://web.archive.org/web/20080422234145/www.morijp.com/masarl/homepage3.nifty.com/masarl/article/eclipse/quick-junit.html モジュール 以下の種類のfeatureが`repository/target/reposit</description>
      </item>
      
      <item>
        <title>GWT用語集</title>
        <link>https://yukihane.github.io/docs/gwt/gwt-term/</link>
        <pubDate>Sun, 26 Jul 2020 02:36:40 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/gwt/gwt-term/</guid>
        <description>JsInterop こちらより: a spec &amp;amp; collection of Java annotations for interoperability with JavaScript. A way to “consume” existing JavaScript libraries as well as to export Java code for consumption from JS https://docs.google.com/document/d/10fmlEYIHcyead_4R1S5wKGs1t2I7Fnp_PaNaa7XTEk0/edit?usp=sharing ERRAI 4 AND JSINTEROP BEST PRACTICES - Erraiに特化した話でなく基礎の説</description>
      </item>
      
      <item>
        <title>GwtCon2017</title>
        <link>https://yukihane.github.io/docs/gwt/gwtcon2017/</link>
        <pubDate>Sun, 26 Jul 2020 02:34:19 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/gwt/gwtcon2017/</guid>
        <description>スライド要旨 GwtCon2017のスライドを簡単にまとめます。 Present and Future of GWT from a developer perspective 既に陳腐化した(使うべきでない)GWT要素技術の紹介。代替方</description>
      </item>
      
      <item>
        <title>GWTコンパイル時間増大問題</title>
        <link>https://yukihane.github.io/docs/gwt/gwt-compilation-time/</link>
        <pubDate>Sun, 26 Jul 2020 02:22:47 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/gwt/gwt-compilation-time/</guid>
        <description>問題解説 GWTアプリケーションの規模が大きくなると、コンパイル時間が非常に長くかかってしまうようになる問題。 非常に長くかかる、というのは、自</description>
      </item>
      
      <item>
        <title>GXT</title>
        <link>https://yukihane.github.io/docs/gwt/gxt/</link>
        <pubDate>Sun, 26 Jul 2020 02:19:25 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/gwt/gxt/</guid>
        <description>オフィシャルサイト GXT3 GXT4 GXTのマニュアルのURLはこれまで頻繁に変わってきたので、上記のリンクもいつの間にか切れている可能性もある。 またSe</description>
      </item>
      
      <item>
        <title>GWT</title>
        <link>https://yukihane.github.io/docs/gwt/gwt/</link>
        <pubDate>Sun, 26 Jul 2020 02:07:09 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/gwt/gwt/</guid>
        <description>プロジェクトのセットアップ 手順 Mavenを用い、次のコマンドで pom.xml を生成する。 mvn archetype:generate \ -DarchetypeGroupId=net.ltgt.gwt.archetypes \ -DarchetypeVersion=2017.10.20 \ -DarchetypeArtifactId=modular-webapp 備考 オフィシャルサイトにはAntでのセットアップ</description>
      </item>
      
      <item>
        <title>シェルプログラミング</title>
        <link>https://yukihane.github.io/docs/shell-programming/</link>
        <pubDate>Sun, 26 Jul 2020 02:05:07 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/shell-programming/</guid>
        <description>安全な一時ファイルの作成と削除の方法 - 拡張 POSIX シェルスクリプト Advent Calendar 2013 - ダメ出し Blog</description>
      </item>
      
      <item>
        <title>Ubuntuその他設定</title>
        <link>https://yukihane.github.io/docs/ubuntu/ubuntu-misc/</link>
        <pubDate>Sun, 26 Jul 2020 02:03:01 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/ubuntu/ubuntu-misc/</guid>
        <description>Ubuntu18.04で入力ソース切り替え(日本語/英語切り替え)を Shift+Spaceに変更する 設定画面からShift+Spaceに変更</description>
      </item>
      
      <item>
        <title>gromit-mpx</title>
        <link>https://yukihane.github.io/docs/ubuntu/gromit-mpx/</link>
        <pubDate>Sun, 26 Jul 2020 02:01:32 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/ubuntu/gromit-mpx/</guid>
        <description>プレゼンテーションツール。 https://github.com/bk138/gromit-mpx sudo apt install cmake libgtk-3-dev libappindicator3-dev cmake -DCMAKE_INSTALL_PREFIX=$HOME/local make make install</description>
      </item>
      
      <item>
        <title>UbuntuでKindle for PCを使う</title>
        <link>https://yukihane.github.io/docs/ubuntu/kindle-for-pc/</link>
        <pubDate>Sun, 26 Jul 2020 01:57:49 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/ubuntu/kindle-for-pc/</guid>
        <description>書きかけのページです。次のリンク先が参考になります。 https://qiita.com/giwagiwa/items/d2e447af5225c1ce9800 Ubuntu16.04上で、PlayOnLinxで管理されたWine環境でKindle</description>
      </item>
      
      <item>
        <title>Ubuntu18.04 ハイバネート(休止)</title>
        <link>https://yukihane.github.io/docs/ubuntu/hibernate/</link>
        <pubDate>Sun, 26 Jul 2020 01:39:30 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/ubuntu/hibernate/</guid>
        <description>Ubuntu16.04 の頃には特に問題なくハイバネートできていたがそれ以降のバージョンでうまくいかない/設定方法がわからない、という記事をよく見かけます。 自分も</description>
      </item>
      
      <item>
        <title>SWTのFindWindowはもはや存在しない</title>
        <link>https://yukihane.github.io/blog/202007/26/swt-findwindowi-is-deprecated/</link>
        <pubDate>Sat, 25 Jul 2020 23:42:57 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202007/26/swt-findwindowi-is-deprecated/</guid>
        <description>元ネタ: 古い Eclipse の起動時に UnsatisfiedLinkError が発生する - スタック・オーバーフロー いにしえのJava世界では、Win32APIにアクセスするためにSWTを利用し</description>
      </item>
      
      <item>
        <title>GradleでSpring Bootプロジェクトを作成してSTS(Eclipse)でインポートする手順</title>
        <link>https://yukihane.github.io/blog/202007/26/spring-boot-gradle-eclipse/</link>
        <pubDate>Sat, 25 Jul 2020 18:11:15 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202007/26/spring-boot-gradle-eclipse/</guid>
        <description>はじめに Spring Initializrを使ってGradle形式でプロジェクトを作成した場合、どうやってSTS(Eclipse)へインポートするのか逡</description>
      </item>
      
      <item>
        <title>UbuntuでdGPU/iGPUのデュアルモニタ設定</title>
        <link>https://yukihane.github.io/docs/ubuntu/dual-monitor/</link>
        <pubDate>Fri, 24 Jul 2020 02:17:53 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/ubuntu/dual-monitor/</guid>
        <description>1枚のNVIDIA GPUと、CPUの統合グラフィクス(iGPU)の2つのGPUにそれぞれモニタを接続してデュアルディスプレイ環境をセットアッ</description>
      </item>
      
      <item>
        <title>NASを自動マウント</title>
        <link>https://yukihane.github.io/docs/ubuntu/nas/</link>
        <pubDate>Fri, 24 Jul 2020 02:15:31 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/ubuntu/nas/</guid>
        <description>参考リンク Ubuntu 18.04: SMBクライアントのcifs-utilsをインストールする - Narrow Escape Ubuntu18.04でcifs mountが失敗する場合 - Qiita 設</description>
      </item>
      
      <item>
        <title>CentOS 7</title>
        <link>https://yukihane.github.io/docs/linux/centos7/</link>
        <pubDate>Fri, 24 Jul 2020 02:13:19 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/linux/centos7/</guid>
        <description>CentOS7について。 firewall 許可するポートを追加: sudo firewall-cmd --list-all sudo firewall-cmd --permanent --add-port=8080/tcp sudo firewall-cmd --reload firewallを停止し無効化する: sudo systemctl stop firewalld.service sudo systemctl disable firewalld.service</description>
      </item>
      
      <item>
        <title>Unix</title>
        <link>https://yukihane.github.io/docs/linux/unix/</link>
        <pubDate>Fri, 24 Jul 2020 01:51:44 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/linux/unix/</guid>
        <description>ログインシェル変更 さくらレンタルサーバのデフォルトログインシェルは`/bin/csh`なのでLinuxユーザにはちょっと馴染みがない… /etc/shells に利</description>
      </item>
      
      <item>
        <title>Angular</title>
        <link>https://yukihane.github.io/docs/frontend/angular/</link>
        <pubDate>Fri, 24 Jul 2020 01:49:16 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/frontend/angular/</guid>
        <description>参考 Angular2によるモダンWeb開発 TypeScriptを使った基本プログラミング データダウンロードページ 用語 コンポーネント(comp</description>
      </item>
      
      <item>
        <title>CORS</title>
        <link>https://yukihane.github.io/docs/wildfly/cors/</link>
        <pubDate>Fri, 24 Jul 2020 01:45:25 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/wildfly/cors/</guid>
        <description>RestyGwtを使用してWildFlyへクロスドメインのリクエストを投げたい場合の設定。 下記のURLあたりを参考に。 jboss - CORS: AngularJS Resteasy 3 + Wildfly - Stack Overflow</description>
      </item>
      
      <item>
        <title>Swagger</title>
        <link>https://yukihane.github.io/docs/wildfly/swagger/</link>
        <pubDate>Fri, 24 Jul 2020 01:42:56 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/wildfly/swagger/</guid>
        <description>WildFlyにはRestEasyが組み込まれているのでそれを前提に。 公式Wiki Swagger セットアップ pom.xml `swagger-jaxrs`を依存関係に</description>
      </item>
      
      <item>
        <title>JAAS</title>
        <link>https://yukihane.github.io/docs/wildfly/jaas/</link>
        <pubDate>Fri, 24 Jul 2020 01:16:09 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/wildfly/jaas/</guid>
        <description>https://github.com/yukihane/hello-rest-environment の hello-wildfly-rest にサンプルコードを置いている。 WildFly設定 standalone/configuration/standalone.xml Security subsystem configuration - WildFly 10 - Project Documentation Editor Authentication Modules - WildFly 10 - Project Documentation Editor Wildfly 8でJAAS - hatenob standalone/configuration/standalone.xml の security サブシステム設定部分に</description>
      </item>
      
      <item>
        <title>Wildfly Security</title>
        <link>https://yukihane.github.io/docs/wildfly/wildfly-security/</link>
        <pubDate>Fri, 24 Jul 2020 01:14:53 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/wildfly/wildfly-security/</guid>
        <description>Security-Realm と Security-Domain EAP6：http://www.natswell.com/techcolumn/2013/08/22/eap6%EF%BC%9A%E3</description>
      </item>
      
      <item>
        <title>Rust 勝手に FAQ</title>
        <link>https://yukihane.github.io/docs/rust/rust-faq/</link>
        <pubDate>Fri, 24 Jul 2020 01:08:11 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/rust/rust-faq/</guid>
        <description>自身の勉強中にまとめているページなので誤っている可能性も大きいです。 簡単に実行できる環境が欲しい Webブラウザ上で実行結果が確認できます: https://play.rust-lang.org/</description>
      </item>
      
      <item>
        <title>Rust学習メモ</title>
        <link>https://yukihane.github.io/docs/rust/rust-memo/</link>
        <pubDate>Fri, 24 Jul 2020 01:06:39 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/rust/rust-memo/</guid>
        <description>リンク Rust Playground https://imoz.jp/note/rust-functions.html[Rustは何が新しいのか（基本的な言語機能の紹介</description>
      </item>
      
      <item>
        <title>QML-rust</title>
        <link>https://yukihane.github.io/docs/rust/qml-rust/</link>
        <pubDate>Fri, 24 Jul 2020 00:48:19 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/rust/qml-rust/</guid>
        <description>https://github.com/White-Oak/qml-rust インストール リポジトリをcloneし、そのディレクトリに移動します。 git clone `https://github.com/White-Oak/qml-rust.git[`https://github.com/White-Oak/qml-rust.git] cd qml-rust サブモジュールを取得します。 git submodule init git submodule update build.rs をMinGW向けに</description>
      </item>
      
      <item>
        <title>MSYS2インストール</title>
        <link>https://yukihane.github.io/docs/rust/msys2/</link>
        <pubDate>Fri, 24 Jul 2020 00:46:39 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/rust/msys2/</guid>
        <description>RustでデバッグするためのGDBと、Qtコンパイル用環境をMSYS2上でセットアップします。 インストール オフィシャルページ http://www.msys2.org/ から64bit</description>
      </item>
      
      <item>
        <title>Rust環境セットアップ</title>
        <link>https://yukihane.github.io/docs/rust/rust-setup/</link>
        <pubDate>Fri, 24 Jul 2020 00:41:54 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/rust/rust-setup/</guid>
        <description>Windows インストール WinodowsにRustとEclipseベースIDEをインストールする手順。 資料 Rustのインストール およびここからたどれる</description>
      </item>
      
      <item>
        <title>Mistel Barocco</title>
        <link>https://yukihane.github.io/docs/mistel-barocco/</link>
        <pubDate>Fri, 24 Jul 2020 00:37:41 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/mistel-barocco/</guid>
        <description>Windows(Windows10) Windows10でUSキーボード設定を行う Windowsメニュー &amp;gt; 設定(ギアのアイコン) &amp;gt; 時刻と言語 &amp;gt; 地域と言語 &amp;gt; 日本語 &amp;gt; オプション &amp;gt; レ</description>
      </item>
      
      <item>
        <title>Minor Framework</title>
        <link>https://yukihane.github.io/docs/java/minor-framework/</link>
        <pubDate>Fri, 24 Jul 2020 00:36:09 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/java/minor-framework/</guid>
        <description>いわゆるオレオレフレームワークについて。 パターンについて (Java Servletコンテナを利用した)オレオレフレームワークパターン オレオレフレームワ</description>
      </item>
      
      <item>
        <title>Object to Object Mapper</title>
        <link>https://yukihane.github.io/docs/java/object-to-object-mapper/</link>
        <pubDate>Fri, 24 Jul 2020 00:34:25 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/java/object-to-object-mapper/</guid>
        <description>一覧 GitHubのstarが多い順に並べている。 Dozer MapStruct Orika Selma 上記以外: https://www.javacodegeeks.com/2013/10/java-object-to-object-mapper.html Dozerが最もメジャーであると思われるものの、開発が停滞している(※ 2017/04</description>
      </item>
      
      <item>
        <title>Commons Daemon</title>
        <link>https://yukihane.github.io/docs/java/commons-daemon/</link>
        <pubDate>Fri, 24 Jul 2020 00:33:01 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/java/commons-daemon/</guid>
        <description>http://commons.apache.org/proper/commons-daemon/procrun.html prunsrv, procrun とか、呼び方は色々？(厳密には指しているものが違うと思うが…)</description>
      </item>
      
      <item>
        <title>JPA Criteria Query</title>
        <link>https://yukihane.github.io/docs/java/jpa-criteria-query/</link>
        <pubDate>Thu, 23 Jul 2020 18:37:41 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/java/jpa-criteria-query/</guid>
        <description>https://docs.oracle.com/javaee/6/tutorial/doc/gjivm.html // CriteriaBuilder を使用したクエリ構築 // ここでは メールアドレス hello@example.co.jp を持つ Member の検索を行います // CriteriaBuilder インスタンスを生成します. final CriteriaBuilder cb = em.getCriteriaBuilder(); // CriteriaQuery インスタンスを生成し</description>
      </item>
      
      <item>
        <title>Maven Repository</title>
        <link>https://yukihane.github.io/docs/java/maven-repository/</link>
        <pubDate>Thu, 23 Jul 2020 18:36:13 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/java/maven-repository/</guid>
        <description>通常は リポジトリマネージャ(Sonatypeの Nexusなど)を使うのが便利で良いが、レンタルサーバではJavaを動作させられなかったりする</description>
      </item>
      
      <item>
        <title>Jigsaw</title>
        <link>https://yukihane.github.io/docs/java/jigsaw/</link>
        <pubDate>Thu, 23 Jul 2020 18:32:39 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/java/jigsaw/</guid>
        <description>参考リンク Webサイト Project Jigsaw: Quick Start Guide - OpenJDKのページ Java 9のモジュール機能「Project Jigsaw」の基本を紹介 (1/2)：CodeZ</description>
      </item>
      
      <item>
        <title>Bazel</title>
        <link>https://yukihane.github.io/docs/java/bazel/</link>
        <pubDate>Thu, 23 Jul 2020 18:30:32 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/java/bazel/</guid>
        <description>Bazelとは ビルドシステム。Ant, Mavenなどと同系統。 ビルド対象はJavaに限らない。 Google社内のJava/JavaScrip</description>
      </item>
      
      <item>
        <title>Java</title>
        <link>https://yukihane.github.io/docs/java/java/</link>
        <pubDate>Thu, 23 Jul 2020 17:19:26 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/java/java/</guid>
        <description>Mavenで差分コンパイルできない 常に [INFO] Changes detected - recompiling the module! というメッセージが出て全コンパイルが行われる事象。 http://stackoverflow.com/a/19653164/4506703 http://stackoverflow.com/a/17948010/4506703 false を設定することで、本来この機能に</description>
      </item>
      
      <item>
        <title>用語集</title>
        <link>https://yukihane.github.io/docs/biz/term/</link>
        <pubDate>Thu, 23 Jul 2020 17:16:55 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/biz/term/</guid>
        <description>CTIソリューション CTIとは Computer Telephony Integration の略。 コールセンターで利用するシステムのこと？</description>
      </item>
      
      <item>
        <title>フリーランス契約</title>
        <link>https://yukihane.github.io/docs/biz/contract/</link>
        <pubDate>Thu, 23 Jul 2020 17:13:25 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/biz/contract/</guid>
        <description>フリーランスで働く上での契約についての知識。 契約形態 請負契約と準委任契約、どっちで契約すればいいの？〜請負契約・準委任契約・労働者派遣契約の</description>
      </item>
      
      <item>
        <title>確定申告</title>
        <link>https://yukihane.github.io/docs/biz/report/</link>
        <pubDate>Thu, 23 Jul 2020 17:09:11 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/biz/report/</guid>
        <description>初めて青色申告、はやめにやっておくこと 確定申告に使うサービスの初期セットアップ 自分は当初http://www.yayoi-kk.co.jp/</description>
      </item>
      
      <item>
        <title>freee</title>
        <link>https://yukihane.github.io/docs/biz/freee/</link>
        <pubDate>Thu, 23 Jul 2020 17:07:53 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/biz/freee/</guid>
        <description>売掛金 未決済の取引を登録する・消し込む(売掛金・買掛金など) – freee ヘルプセンター</description>
      </item>
      
      <item>
        <title>Kubernetes</title>
        <link>https://yukihane.github.io/docs/devops/kubernetes/</link>
        <pubDate>Thu, 23 Jul 2020 17:03:23 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/devops/kubernetes/</guid>
        <description>Kubernetesとは？ Kubernetes とは(Red Hat社サイト) Linux コンテナを実行しているホストをまとめてクラスタ化できるということです。Kubern</description>
      </item>
      
      <item>
        <title>Docker</title>
        <link>https://yukihane.github.io/docs/devops/docker/</link>
        <pubDate>Thu, 23 Jul 2020 17:03:16 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/devops/docker/</guid>
        <description>取り敢えず実行したい docker run -it --rm centos:7 /bin/bash</description>
      </item>
      
      <item>
        <title>hugo</title>
        <link>https://yukihane.github.io/docs/apps/hugo/</link>
        <pubDate>Thu, 23 Jul 2020 17:01:48 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/apps/hugo/</guid>
        <description>AsciiDoc形式でblogを書くためにHugoをセットアップする。 Hugo自体はGo言語製、またAsciiDocの処理にはAsciido</description>
      </item>
      
      <item>
        <title>VS Code</title>
        <link>https://yukihane.github.io/docs/apps/vscode/</link>
        <pubDate>Thu, 23 Jul 2020 16:31:20 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/apps/vscode/</guid>
        <description>設定 開いたタブをそのままにする { &amp;#34;workbench.editor.enablePreview&amp;#34;: false }</description>
      </item>
      
      <item>
        <title>ラノゲメーカーMV</title>
        <link>https://yukihane.github.io/docs/apps/visual-novel-maker/</link>
        <pubDate>Thu, 23 Jul 2020 16:28:57 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/apps/visual-novel-maker/</guid>
        <description>リンク 基本情報 オフィシャルサイト オフィシャルのDL版 Steam メモ: ストア版(非Steam版)ではインストールできるのは1台(RPGツクールMVのみ</description>
      </item>
      
      <item>
        <title>Davinci Resolve</title>
        <link>https://yukihane.github.io/docs/apps/davinci-resolve/</link>
        <pubDate>Thu, 23 Jul 2020 16:26:52 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/apps/davinci-resolve/</guid>
        <description>録画フォーマット OBS Studioでオーディオをマルチトラックで録画する場合にはmkvを使うのがよさそう。 ただしそのままではDavinci Res</description>
      </item>
      
      <item>
        <title>Google Chrome</title>
        <link>https://yukihane.github.io/docs/apps/google-chrome/</link>
        <pubDate>Thu, 23 Jul 2020 16:22:28 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/apps/google-chrome/</guid>
        <description>インストールする機能拡張 octotree Quick Javascript Switcher uBlock Origin 検索エンジン設定 検索エンジン キーワード URL alc alc https://eow.alc.co.jp/search?q=%s Maven Central mvn https://search.maven.org/search?q=%s</description>
      </item>
      
      <item>
        <title>Firefox Webextension</title>
        <link>https://yukihane.github.io/docs/frontend/firefox-webextension/</link>
        <pubDate>Thu, 23 Jul 2020 15:59:39 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/frontend/firefox-webextension/</guid>
        <description>リンク パッケージ化とインストール - Mozilla | MDN アドオンを投稿する - Mozilla | MDN Developer Hub :: Add-ons for Firefox</description>
      </item>
      
      <item>
        <title>vue.js</title>
        <link>https://yukihane.github.io/docs/frontend/vue/</link>
        <pubDate>Thu, 23 Jul 2020 15:53:22 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/frontend/vue/</guid>
        <description>初歩的な疑問/TIPSなど htmlの書き下しを簡単に行う Emmetというプラグイン？がある。 VSCodeには標準で入っていた。 使い方はググろ</description>
      </item>
      
      <item>
        <title>フロントエンド基礎知識</title>
        <link>https://yukihane.github.io/docs/frontend/js-fundamentals/</link>
        <pubDate>Thu, 23 Jul 2020 15:38:25 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/frontend/js-fundamentals/</guid>
        <description>言語仕様 JavaScriptの「オブジェクト」 JavaScriptのオブジェクトは、カッコ {…​} で表される。 JavaScriptのオブジェ</description>
      </item>
      
      <item>
        <title>curl</title>
        <link>https://yukihane.github.io/docs/apps/curl/</link>
        <pubDate>Thu, 23 Jul 2020 15:32:22 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/apps/curl/</guid>
        <description>〜がしたい Basic認証 -u オプション。 curl -u user:password http://example.com HTTPステータスコード表示 -i オプションで出力にHTTPヘッダ情報を含められる。 curl -i http://example.com</description>
      </item>
      
      <item>
        <title>JavaプログラマのためのC#</title>
        <link>https://yukihane.github.io/docs/csharp/</link>
        <pubDate>Thu, 23 Jul 2020 15:27:19 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/csharp/</guid>
        <description>1文字目にJavaとは異なり大文字を使う場所 実は書く際にはIDEが補完してくれるのでさほど違和感は無く始められました。 問題はコード・リーディ</description>
      </item>
      
      <item>
        <title>JS覚え書き</title>
        <link>https://yukihane.github.io/docs/frontend/js-memo/</link>
        <pubDate>Thu, 23 Jul 2020 14:50:04 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/frontend/js-memo/</guid>
        <description>TypeScript ReturnType Redux reducer の 戻り値型として初出。 関数型を簡単に？定義するための構文だろうか。 公式サイトリンク JavaScript 角カッコ [] の戻り値 分割代入 関数の戻り値が配列で、</description>
      </item>
      
      <item>
        <title>IntellJ IDEA</title>
        <link>https://yukihane.github.io/docs/intellij-idea/</link>
        <pubDate>Thu, 23 Jul 2020 06:40:03 +0000</pubDate>
        
        <guid>https://yukihane.github.io/docs/intellij-idea/</guid>
        <description>プラグインインストール Lombok MapStruct annotation processor 有効化 https://www.jetbrains.com/help/idea/annotation-processors-support.html</description>
      </item>
      
      <item>
        <title>KeycloakをIdPにしてSpring Security OAuth 2.0 Login/Client を試してみる</title>
        <link>https://yukihane.github.io/blog/202007/21/hello-oidc-with-keycloak/</link>
        <pubDate>Mon, 20 Jul 2020 18:54:23 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202007/21/hello-oidc-with-keycloak/</guid>
        <description>はじめに Spring Boot で Spring Security OAuth 2.0 Login / Client を利用する手順をまとめます。 また、認可サーバ(IdP)にはローカルで立てたKeycloakを用いますのでそちらの</description>
      </item>
      
      <item>
        <title>いつもGitブランチ運用でこまること、考慮すべきポイントのまとめ</title>
        <link>https://yukihane.github.io/blog/202007/21/why-git-branching-is-difficult/</link>
        <pubDate>Mon, 20 Jul 2020 17:59:29 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202007/21/why-git-branching-is-difficult/</guid>
        <description>現在、新しいプロジェクトに参画してGitのブランチ戦略を考えています。 何回かブランチ戦略を考え、そして運用してきたのですが、思うところを書い</description>
      </item>
      
      <item>
        <title>Spring Security OAuth 2.0 Client の auto-configuration</title>
        <link>https://yukihane.github.io/blog/202007/20/spring-security-oauth-2.0-client/</link>
        <pubDate>Mon, 20 Jul 2020 06:36:51 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202007/20/spring-security-oauth-2.0-client/</guid>
        <description>OAuth2ClientAutoConfiguration 上記のクラスが Import しているもの(など): OAuth2ClientRegistrationRepositoryConfiguration ClientRegistrationRepository bean 定義。 OAuth2ClientProperties(spring.security.oauth</description>
      </item>
      
      <item>
        <title>`WebClient` の 覚書</title>
        <link>https://yukihane.github.io/blog/202007/20/webclientbuilder/</link>
        <pubDate>Sun, 19 Jul 2020 23:26:51 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202007/20/webclientbuilder/</guid>
        <description>RestTemplateBuilder の Bean がsingleton-socpeかつちょっと変態的なインスタンス生成を行っていたので驚いた、というエントリを昔書きました: RestTe</description>
      </item>
      
      <item>
        <title>クッキーの挙動は Same Origin Policy に従う…わけではない</title>
        <link>https://yukihane.github.io/blog/202007/19/cookies-and-same-origin-policy/</link>
        <pubDate>Sun, 19 Jul 2020 11:59:29 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202007/19/cookies-and-same-origin-policy/</guid>
        <description>次のQiitaのコメントを見て、そうなんだ、となりました: Auth TokenをlocalStorageに入れようが、cookieに入れようがどっち</description>
      </item>
      
      <item>
        <title>`git config pull.ff only` を設定しておこう</title>
        <link>https://yukihane.github.io/blog/202007/19/use-git-pull-ff-only/</link>
        <pubDate>Sun, 19 Jul 2020 06:47:48 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202007/19/use-git-pull-ff-only/</guid>
        <description>私は普段全く git pull は使わず、 git fetch で賄ってきたのですが、今日たまたま git pull を行ったところ、いつの頃からか次のようなメッセージが出るようになっている</description>
      </item>
      
      <item>
        <title>Spring Security から認可サーバサポートが無くなる、というのは取り敢えず見直されています</title>
        <link>https://yukihane.github.io/blog/202007/19/spring-security-authentication-server/</link>
        <pubDate>Sun, 19 Jul 2020 06:10:14 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202007/19/spring-security-authentication-server/</guid>
        <description>世の中に認可サーバー製品がたくさんあるので、Spring Securityではサポートしないことを決定しました — Spring Security OAuth2はあと数年でサ</description>
      </item>
      
      <item>
        <title>Spring Bootブックレビュー Spring Boot 2 入門: 基礎から実演まで</title>
        <link>https://yukihane.github.io/blog/202007/15/spring-boot-books-review/</link>
        <pubDate>Wed, 15 Jul 2020 14:28:39 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202007/15/spring-boot-books-review/</guid>
        <description>Kindle Unlimited でいくつかのSpring Framework/Spring Boot 本が読めることに気づきました。 もし入門本として有用なものがあれば初心者の方に薦めていきたいなと考え、今回それ</description>
      </item>
      
      <item>
        <title>Spring SecurityのOAuth2.0関連の歴史を調査し実装してみた</title>
        <link>https://yukihane.github.io/blog/202007/15/history-of-spring-oauth2-libraries/</link>
        <pubDate>Tue, 14 Jul 2020 23:47:11 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202007/15/history-of-spring-oauth2-libraries/</guid>
        <description>Qiita に昔(2019年中頃)書いていた資料を転記し忘れていたので構成を見直してアップロードし直します。 2020年現在の状況はまた更新されています</description>
      </item>
      
      <item>
        <title>Gradleプラグイン/アノテーションプロセッシング調査</title>
        <link>https://yukihane.github.io/blog/202007/15/research-gradle-plugins/</link>
        <pubDate>Tue, 14 Jul 2020 15:58:57 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202007/15/research-gradle-plugins/</guid>
        <description>元々JBoss/WildFlyの流れで開発してきたのでずっとMavenを利用してきたのですが、今度のプロジェクトではGradleを使うことに</description>
      </item>
      
      <item>
        <title>ISO 8601では 24:00 は妥当だったが改訂によりNGになった</title>
        <link>https://yukihane.github.io/blog/202007/14/iso-8601-2400-is-invalid/</link>
        <pubDate>Mon, 13 Jul 2020 18:45:43 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202007/14/iso-8601-2400-is-invalid/</guid>
        <description>moment().isValid()での24時00分00秒の挙動について - スタック・オーバーフロー より。 ISO 8601 の以前のspecでは、 0:00 も 24:00 も両</description>
      </item>
      
      <item>
        <title>Spring Boot で Controller と Repositoryを同じクラスで併用する</title>
        <link>https://yukihane.github.io/blog/202007/11/same-class-controller-and-repository/</link>
        <pubDate>Sat, 11 Jul 2020 00:41:41 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202007/11/same-class-controller-and-repository/</guid>
        <description>…なんてことができたんですね。こんなコード: @RestController @Repository public interface VehicleInterface extends JpaRepository&amp;lt;vehicle, Long&amp;gt; { @Query(&amp;#34;select u from vehicle u where u.year = :year&amp;#34;) @RequestMapping(value = &amp;#34;/vehicles&amp;#34;, method = RequestMethod.GET) List&amp;lt;vehicle&amp;gt; findByYearEquals(@Param(&amp;#34;year&amp;#34;) Integer year); } http://localhost:8080/vehicles?year=2010 的なURLでアクセスします。 サンプル</description>
      </item>
      
      <item>
        <title>Spring-BootでJSPを使う</title>
        <link>https://yukihane.github.io/blog/202007/11/jsp-on-springboot/</link>
        <pubDate>Fri, 10 Jul 2020 21:54:33 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202007/11/jsp-on-springboot/</guid>
        <description>https://start.spring.io/ で depencencies に Spring Web を追加して生成します。 生成された pom.xml に次の依存関係を追加します: pom.xml &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.tomcat.embed&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tomcat-embed-jasper&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;!-- 必要に応じて --&amp;gt; &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jstl&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; appliction.properties にﾂｲ着を追加します: application.properties spring.mvc.view.prefix=/WEB-INF/view/ spring.mvc.view.suffix=.jsp src/main/webapp/WEB-INF/view/</description>
      </item>
      
      <item>
        <title>Spring Boot でなるべく依存関係を小さくしてWebMVCを使ってみる</title>
        <link>https://yukihane.github.io/blog/202007/02/minimal-webmvc-with-springboot/</link>
        <pubDate>Thu, 02 Jul 2020 21:11:04 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202007/02/minimal-webmvc-with-springboot/</guid>
        <description>特に実用性とかは考えていない。何となくやってみたというだけ。 動かしたいやつ 1 2 3 4 5 6 7 8 9 @RestController @RequestMapping(&amp;#34;/&amp;#34;) public class MyController { @GetMapping(&amp;#34;/&amp;#34;) public String index() { return &amp;#34;hello&amp;#34;; } } 設定 1 2 3 4 5 6 7</description>
      </item>
      
      <item>
        <title>${...}と#{...}の違い</title>
        <link>https://yukihane.github.io/blog/202007/02/difference-between-doller-and-hash/</link>
        <pubDate>Thu, 02 Jul 2020 00:31:47 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202007/02/difference-between-doller-and-hash/</guid>
        <description>Spring Expression Language (SpEL) with @Value: dollar vs. hash ($ vs. #) より。 ${…​} は単なるプロパティのプレースホルダ。 #{…​} は Spring Expression Language(SpEL) の構文。 プレースホルダは置き換えるだけだけれど</description>
      </item>
      
      <item>
        <title>Spring 2.3.0 で時刻オフセットの書式コロン付き&#43;09:00みたいに変わっとるやん</title>
        <link>https://yukihane.github.io/blog/202006/30/json-datetime-format-changed-on-springboot-2.3/</link>
        <pubDate>Tue, 30 Jun 2020 21:09:44 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202006/30/json-datetime-format-changed-on-springboot-2.3/</guid>
        <description>正確には jackson-databind 2.11.0 で。 jackson 2.11 リリースノート Change default textual serialization of java.util.Date/Calendar to include colon in timezone offset #2643 このへん見ると分かるけど、Spring Boot 2.2 系列は jackson-databind 2.10.x が採用されていて、 2.3.0 で 2.11.0 が採</description>
      </item>
      
      <item>
        <title>Spring Boot 2.3.0 から H2Database の名前 jdbc:h2:mem:testdb じゃなくなっとるやん(デフォルトでは)</title>
        <link>https://yukihane.github.io/blog/202006/28/h2database-name-random-on-springboot-2.3/</link>
        <pubDate>Sun, 28 Jun 2020 21:05:14 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202006/28/h2database-name-random-on-springboot-2.3/</guid>
        <description>前はここに書いた通り固定で jdbc:h2:mem:testdb という名前だったのにこれでアクセスできんようになってしもた。 起動ログに o.s.b.a.h2.H2ConsoleAutoConfiguration : H2 console available at &#39;/h2-console&#39;. Database available at &#39;jdbc:h2:mem:30591993-9fe2-4068-a5e2-05b263e3495b&#39; みたいに出るのでここ</description>
      </item>
      
      <item>
        <title>Spring MVCにはJPA EntityのIDからエンティティオブジェクトに変換する機能がある(が、2.3.1では機能しない)</title>
        <link>https://yukihane.github.io/blog/202006/20/spring-boot-thymeleaf-converts-id-to-entity/</link>
        <pubDate>Sat, 20 Jun 2020 08:16:28 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202006/20/spring-boot-thymeleaf-converts-id-to-entity/</guid>
        <description>追記: 2020-07-24にリリースされた2.3.2, 2.2.9 でこの問題は修正されました。ただし、2.1.16では未修正のままのようでした。 Spring Bo</description>
      </item>
      
      <item>
        <title>Spring Security OAuth 2.0 Client(OAuth 2.0 Login)でトークンの管理をしているのはOAuth2AuthorizedClientService</title>
        <link>https://yukihane.github.io/blog/202006/17/oauth2authorizedclientservice/</link>
        <pubDate>Wed, 17 Jun 2020 09:24:57 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202006/17/oauth2authorizedclientservice/</guid>
        <description>私も今回の質問(本文末参照)を見たとき少しの間勘違いしてしまったのですが、OAuth2.0のクライアントがどこで各リソースオーナーのトークン</description>
      </item>
      
      <item>
        <title>Spring BootのGradleでのデバッグ実行方法</title>
        <link>https://yukihane.github.io/blog/202006/15/spring-boot-debugging/</link>
        <pubDate>Mon, 15 Jun 2020 07:42:25 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202006/15/spring-boot-debugging/</guid>
        <description>gradle bootRun --debug-jvm というように、--debug-jvm オプションを付与すれば良いようです。 これで、デバッガ接続の待受状態で起動します。 BootRun は JavaExec を継承してい</description>
      </item>
      
      <item>
        <title>So many UserDetailsService samples considered harmful for beginners</title>
        <link>https://yukihane.github.io/blog/202006/13/userdetailsservice-samples-considered-harmful-for-biginners/</link>
        <pubDate>Sat, 13 Jun 2020 21:07:40 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202006/13/userdetailsservice-samples-considered-harmful-for-biginners/</guid>
        <description>やっぱり一発目の Spring Security やってみたで UserDetailsService 使うのは止めようず。So many UserDetailsService samples considered harmful for beginners. はじめに ちょっと待って！その UserDetails、本当に必要ですか</description>
      </item>
      
      <item>
        <title>List#contains(null)は使わないほうが良い</title>
        <link>https://yukihane.github.io/blog/202006/13/list-contains-null/</link>
        <pubDate>Sat, 13 Jun 2020 10:34:19 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202006/13/list-contains-null/</guid>
        <description>List(などのコレクション)が要素に null を含むかどうかの判定に、 contains(null) を利用すると NullPointerException が発生することがあります。 リファレンスには次のようにあります</description>
      </item>
      
      <item>
        <title>UserDetailsServiceは誤解されている</title>
        <link>https://yukihane.github.io/blog/202006/12/userdetailsservice-conidered-harmful/</link>
        <pubDate>Fri, 12 Jun 2020 09:37:26 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202006/12/userdetailsservice-conidered-harmful/</guid>
        <description>サンプルコード等だけを見ていると UserDetailsService を利用することがSpring Securityの唯一の認証処理実現方法だと誤解しがちですが、 UserDetailsService はむしろユーテ</description>
      </item>
      
      <item>
        <title>Alpine Linuxでglibcじゃないことに起因する問題ってちょくちょくあるよね</title>
        <link>https://yukihane.github.io/blog/202006/10/alpine-and-glibc-problems/</link>
        <pubDate>Wed, 10 Jun 2020 10:17:55 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202006/10/alpine-and-glibc-problems/</guid>
        <description>…と少し思い返していました。といっても思い出せたのは次の2つなのですが。 alpine Linuxへのawscliインストール alpineでgitがcol</description>
      </item>
      
      <item>
        <title>CompletableFuture覚え書き</title>
        <link>https://yukihane.github.io/blog/202006/02/note-of-completablefuture/</link>
        <pubDate>Tue, 02 Jun 2020 07:54:25 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202006/02/note-of-completablefuture/</guid>
        <description>CompletableFuture の一連の非同期処理 ほげAsync は、デフォルトでは ForkJoinPool.commonPool() という ExecutorService で実行されます。 そしてこの ExecutorService のワーカスレッドはデーモンスレッドであるため、非デ</description>
      </item>
      
      <item>
        <title>Javaのソースファイルはpackageに対応したディレクトリ階層に置かなくても良い？</title>
        <link>https://yukihane.github.io/blog/202005/29/java-source-location/</link>
        <pubDate>Fri, 29 May 2020 08:28:07 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202005/29/java-source-location/</guid>
        <description>https://twitter.com/hishidama/status/1266176675768745984 packageの宣言と実際のディレクトリが一致していなくてもmvn compile（やjavac）が成功するんですが、そういうもんでしたっけ</description>
      </item>
      
      <item>
        <title>ミニマル `.vimrc`</title>
        <link>https://yukihane.github.io/blog/202005/27/minimal-vimrc/</link>
        <pubDate>Tue, 26 May 2020 21:58:21 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202005/27/minimal-vimrc/</guid>
        <description>kubernetesの試験を受けるに当たって、最小限の .vimrc を覚えておくためのメモ: set autoindent set expandtab set tabstop=2 set shiftwidth=2</description>
      </item>
      
      <item>
        <title>DockerfileのENTRYPOINTに対応するのはcommand, CMDに対応するのがargs</title>
        <link>https://yukihane.github.io/blog/202005/06/k8s-command-args/</link>
        <pubDate>Wed, 06 May 2020 21:03:24 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202005/06/k8s-command-args/</guid>
        <description>CMD と command が対応しているわけではないのでまぎらわしい… Kubernetes リファレンス: Container v1 core 参考として Dockerfile リファレンス: ENTRYPOINT CMD</description>
      </item>
      
      <item>
        <title>GKE(Goole Kubernetes Engine)の始め方</title>
        <link>https://yukihane.github.io/blog/202004/26/gke-getting-started/</link>
        <pubDate>Sun, 26 Apr 2020 14:05:12 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202004/26/gke-getting-started/</guid>
        <description>Kubernetes入門の書籍やドキュメントの中には、Kubernetes環境が既に手元にある前提で書かれているものも多いです。 そういう場合</description>
      </item>
      
      <item>
        <title>Kubernetes the hard way を最新版の1.18.2でやってみた</title>
        <link>https://yukihane.github.io/blog/202004/26/kubernetes-the-hard-way-v1.18.2/</link>
        <pubDate>Sun, 26 Apr 2020 13:00:50 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202004/26/kubernetes-the-hard-way-v1.18.2/</guid>
        <description>要約 kube-apiserver の起動引数を --runtime-config=api/all=true に修正すれば v1.18.2 でも記述どおりで動作する。 本文 現時点で本家 Kubernetes The Hard Way は1.15.3をターゲットにして構築を行っていますが、せ</description>
      </item>
      
      <item>
        <title>Kubernetes the hard wayを試すためのtmux基礎知識</title>
        <link>https://yukihane.github.io/blog/202004/25/tmux/</link>
        <pubDate>Sat, 25 Apr 2020 02:43:13 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202004/25/tmux/</guid>
        <description>Kubernetes the hard wayをやるのに`tmux`の操作を覚えておくのが良さそうだったので使いそうなものを記載しておくことにしました。 Ctrl キーと b キーの同時押</description>
      </item>
      
      <item>
        <title>redux-devtools-extension をTypeScriptで使う</title>
        <link>https://yukihane.github.io/blog/202004/24/redux-devtools-extension-with-typescript/</link>
        <pubDate>Fri, 24 Apr 2020 21:00:56 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202004/24/redux-devtools-extension-with-typescript/</guid>
        <description>https://github.com/zalmoxisus/redux-devtools-extension/blob/master/README.md#13-use-redux-devtools-extension-package-from-npm というわけで型付けされているので const store = createStore(rootReducer, undefined, devToolsEnhancer({})); で良い。 何か Qiia の記事とかを見てるとこっちの方法でばっかり書いてあるが。 Electron から使う場合はElec</description>
      </item>
      
      <item>
        <title>Electronでfs(File IO)</title>
        <link>https://yukihane.github.io/blog/202004/22/electron-fileio/</link>
        <pubDate>Wed, 22 Apr 2020 20:59:12 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202004/22/electron-fileio/</guid>
        <description>Electron で File の Open と Save - Qiita を写経させてもらっていますが、、、動かない。 リンク先では Electron v4.x を利用していますが現在の最新版は v8.2.3。このバージョン差</description>
      </item>
      
      <item>
        <title>ReduxのBasic TutorialにTypeScriptで型を付けただけ</title>
        <link>https://yukihane.github.io/blog/202004/15/redux-basic-tutorial/</link>
        <pubDate>Wed, 15 Apr 2020 20:56:22 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202004/15/redux-basic-tutorial/</guid>
        <description>Redux 多分使わないけど理解のため写経。 答え合わせに他の方が似たようなことやってないかググったけれども プラスアルファ要素(Redux Toolkit を使う、fe</description>
      </item>
      
      <item>
        <title>React Router &lt;Route&gt; で描画したいコンポーネントの指定方法が人によってまちまちなんだけどどれが正解なの？</title>
        <link>https://yukihane.github.io/blog/202004/13/react-router/</link>
        <pubDate>Mon, 13 Apr 2020 20:54:12 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202004/13/react-router/</guid>
        <description>https://reacttraining.com/react-router/web/api/Route/route-render-methods The recommended method of rendering something with a is to use children elements, as shown above. There are, however, a few other methods you can use to render something with a . These are provided mostly for supporting apps that were built with earlier versions of the router before hooks were introduced. &amp;lt;Route component&amp;gt; &amp;lt;Route render&amp;gt; &amp;lt;Route children&amp;gt; function つまり、引用部の直前</description>
      </item>
      
      <item>
        <title>rustでwasmでhello, world(2020-04-08版) の次</title>
        <link>https://yukihane.github.io/blog/202004/09/hello-wasm-next/</link>
        <pubDate>Thu, 09 Apr 2020 20:52:10 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202004/09/hello-wasm-next/</guid>
        <description>目標 rust で wasm で hello, worldの次として、JavaScript で実装されたプロジェクトを Rust に書き直してみます。 最近N 予備校のプログラミング入門 Web ア</description>
      </item>
      
      <item>
        <title>Hello, Wasm with Rust</title>
        <link>https://yukihane.github.io/blog/202004/08/hello-wasm-with-rust/</link>
        <pubDate>Tue, 07 Apr 2020 22:39:49 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202004/08/hello-wasm-with-rust/</guid>
        <description>はじめに wasmに挑戦してみようとHello, worldをやってみようとしました。 公式っぽいドキュメントとしてはググると次のものが見つかりま</description>
      </item>
      
      <item>
        <title>TwitterをFirefoxで利用した際のセキュリティ問題</title>
        <link>https://yukihane.github.io/blog/202004/08/twitter-on-firefox-security-issue/</link>
        <pubDate>Tue, 07 Apr 2020 20:15:38 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202004/08/twitter-on-firefox-security-issue/</guid>
        <description>&amp;gt;Mozilla Firefoxに保存されているTwitterデータのキャッシュについて というリリースが先日出されましたが、具体的にどういう問題なのかが書か</description>
      </item>
      
      <item>
        <title>Hello, JSF</title>
        <link>https://yukihane.github.io/blog/202004/06/hello-jsf/</link>
        <pubDate>Mon, 06 Apr 2020 01:52:30 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202004/06/hello-jsf/</guid>
        <description>はじめに JSFを少し触ってみようと思ったのですが、もはやロストテクノロジーでどう始めるのかすらドキュメントを探すのが大変… 今回はかろうじてこ</description>
      </item>
      
      <item>
        <title>いきなりJavaアプリケーションサーバの保守を任されることになった人のためのチートシート(2)</title>
        <link>https://yukihane.github.io/blog/202004/03/java-application-frameworks-cheat-sheet2/</link>
        <pubDate>Fri, 03 Apr 2020 02:44:22 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202004/03/java-application-frameworks-cheat-sheet2/</guid>
        <description>はじめに 前回はアプリケーションサーバにデバッガをアタッチする方法までを説明しました。 今回は、ソースコードを眺めているだけでは通ることを見つけ</description>
      </item>
      
      <item>
        <title>いきなりJavaアプリケーションサーバの保守を任されることになった人のためのチートシート(1)</title>
        <link>https://yukihane.github.io/blog/202004/02/java-application-frameworks-cheat-sheet/</link>
        <pubDate>Thu, 02 Apr 2020 06:15:28 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202004/02/java-application-frameworks-cheat-sheet/</guid>
        <description>目的 Javaを用いた開発にある程度慣れている場合でも、初めてアプリケーションフレームワーク上で開発するとなると戸惑うことがあります。 ここでは</description>
      </item>
      
      <item>
        <title>Maven Enforcer Pluginの実行をスキップする</title>
        <link>https://yukihane.github.io/blog/202003/30/skip-maven-enforcer-plugin/</link>
        <pubDate>Mon, 30 Mar 2020 05:37:45 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202003/30/skip-maven-enforcer-plugin/</guid>
        <description>とあるMavenプロジェクトを mvn clean install しようとしたところ、次のエラーになり正常終了しませんでした。 [WARNING] Rule 0: org.apache.maven.plugins.enforcer.BannedRepositories failed with message: Current maven session contains banned repository urls, please double check your pom or settings.xml: central</description>
      </item>
      
      <item>
        <title>MyBatisでストアドプロシージャを実行する</title>
        <link>https://yukihane.github.io/blog/202003/10/stored-procesure-with-mybatis/</link>
        <pubDate>Tue, 10 Mar 2020 05:44:01 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202003/10/stored-procesure-with-mybatis/</guid>
        <description>(もしかしたら以前どこかで書いたかも…) MyBatisでストアドプロシージャを実行する必要に迫られたことがありましたが、オフィシャルリファレ</description>
      </item>
      
      <item>
        <title>td-agentにプロキシを設定する</title>
        <link>https://yukihane.github.io/blog/202003/09/td-agent-with-proxy/</link>
        <pubDate>Mon, 09 Mar 2020 07:54:53 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202003/09/td-agent-with-proxy/</guid>
        <description>sudo systemctl edit td-agent で編集画面を開き、次を記述: [Service] Environment=&amp;#34;HTTP_PROXY=http://myproxy.example.com:8080&amp;#34;</description>
      </item>
      
      <item>
        <title>finalと実質finalの違い</title>
        <link>https://yukihane.github.io/blog/202002/21/effectively-final-difference/</link>
        <pubDate>Fri, 21 Feb 2020 06:53:19 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202002/21/effectively-final-difference/</guid>
        <description>https://ja.stackoverflow.com/a/63099/2808 を見ていて気づいたのですが、 実質final というのは脳内(コンパイラ)で final を補完してくれる、というような処理が行われるわけではないのですね</description>
      </item>
      
      <item>
        <title>Spring Bootでは `-parameters` オプションは有効化されている</title>
        <link>https://yukihane.github.io/blog/202002/20/spring-boot-compiler-parameters/</link>
        <pubDate>Thu, 20 Feb 2020 06:25:59 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202002/20/spring-boot-compiler-parameters/</guid>
        <description>MyBatisの設定項目として useActualParamName というものがあります。マニュアルの説明によると、 ステートメントの引数を参照する際、メソッドシグネチャで宣言さ</description>
      </item>
      
      <item>
        <title>Hello Project Panama</title>
        <link>https://yukihane.github.io/blog/202002/11/hello-project-panama/</link>
        <pubDate>Tue, 11 Feb 2020 20:43:43 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202002/11/hello-project-panama/</guid>
        <description>追記: Hello Project Panama, on Java17 に Java17 版を記載しました。 はじめに 今個人的にすごく知りたいのはこちらです。ご回答よろしくお願いします！！！！ 動的確保したメモリー</description>
      </item>
      
      <item>
        <title>Nodeのnative moduleをRustで書いてみる(Neon)</title>
        <link>https://yukihane.github.io/blog/202002/01/hello-rust-neon/</link>
        <pubDate>Sat, 01 Feb 2020 05:09:38 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202002/01/hello-rust-neon/</guid>
        <description>RustプログラムのGUIにElectronを使うことを考えています。 その前調査としてNodeのネイティブモジュールとしてRustプログラム</description>
      </item>
      
      <item>
        <title>`fluent-plugin-bigquery` のパラメータ `request_timeout_sec` 、未設定の場合はどうなるの？</title>
        <link>https://yukihane.github.io/blog/202001/30/fluentd-request_timeout_sec-default/</link>
        <pubDate>Thu, 30 Jan 2020 02:17:02 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202001/30/fluentd-request_timeout_sec-default/</guid>
        <description>要旨 fluent-plugin-bigquery の README を読んでいると、 request_timeout_sec のデフォルト値が nil になっている(その下の request_open_timeout_sec には 60 が設定されているのに)のが気になりました。 結論としては、 request_timeout_sec は最終</description>
      </item>
      
      <item>
        <title>Spring BootのRestTemplateで text/plain;Windows-31J なRESTレスポンスを処理する</title>
        <link>https://yukihane.github.io/blog/202001/26/resttemplate-with-illformed-json/</link>
        <pubDate>Sun, 26 Jan 2020 14:48:47 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202001/26/resttemplate-with-illformed-json/</guid>
        <description>要旨 JSONを返してくるのだけれどMIME typeが text/plain;charset=Windows-31J なレスポンスを、RestTemplateで扱いたい。 @GetMapping(produces = &amp;#34;text/plain;charset=Windows-31J&amp;#34;) public String response() { return &amp;#34;{\&amp;#34;text\&amp;#34;: \&amp;#34;こん</description>
      </item>
      
      <item>
        <title>reqwest使おうとしたけどよくわからん</title>
        <link>https://yukihane.github.io/blog/202001/01/rust-reqwest/</link>
        <pubDate>Wed, 01 Jan 2020 20:42:42 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202001/01/rust-reqwest/</guid>
        <description>はじめに 年の瀬にスクレイピングしたくなって Rust 勉強し始めたけれど、直前に reqwest ライブラリに更新が入ったみたいでコピペコーディングが阻まれた。 知っと</description>
      </item>
      
      <item>
        <title>Rustでライブラリを作成する</title>
        <link>https://yukihane.github.io/blog/202001/rust-create-library/</link>
        <pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/202001/rust-create-library/</guid>
        <description>はじめに 他の言語で言うところの&amp;#34;ライブラリ&amp;#34;は、Rustでは &amp;#34;ライブラリクレート&amp;#34;(library crate) と呼ぶよ</description>
      </item>
      
      <item>
        <title>RestTemplateBuilderに関する覚書</title>
        <link>https://yukihane.github.io/blog/201912/10/resttemplatebuilder/</link>
        <pubDate>Tue, 10 Dec 2019 20:41:15 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201912/10/resttemplatebuilder/</guid>
        <description>RestTemplateBuilder RestTemplate は Spring Framework(spring-web)だけれども RestTemplateBuilder は Spring Boot。 Java の世界の なんちゃらBuilder (StringBuilderと</description>
      </item>
      
      <item>
        <title>https://hatena.ne.jp/ にアクセスできてるとお思いで？</title>
        <link>https://yukihane.github.io/blog/201912/03/auto-redirecting-chrome/</link>
        <pubDate>Tue, 03 Dec 2019 20:39:39 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201912/03/auto-redirecting-chrome/</guid>
        <description>はじめに: 試した環境 Windows10 の現時点での最新安定版 Google Chrome および Firefox を用いました。 Google Chrome 78.0.3904.108 Firefox 70.0.1 また実行に際しては、キャッシュ等の影響を避けるため、Chro</description>
      </item>
      
      <item>
        <title>Spring Boot のプロパティではkebab-formatが推奨されている</title>
        <link>https://yukihane.github.io/blog/201911/28/kebab-format-recommended-on-spring-boot-properties/</link>
        <pubDate>Thu, 28 Nov 2019 20:38:12 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201911/28/kebab-format-recommended-on-spring-boot-properties/</guid>
        <description>Relaxed Binding 2.0 という仕組みにより spring.jpa.database-platform=mysql spring.jpa.databasePlatform=mysql spring.JPA.database_platform=mysql いずれの形式でも正しくバインドできる。 が、公式ドキュメントからは一番上の database-platform が推奨されているように読み取れる。 Relaxed</description>
      </item>
      
      <item>
        <title>native-imageコマンドを実行するために行ったWindows10 への GraalVM インストールがエキサイティングな件</title>
        <link>https://yukihane.github.io/blog/201911/09/graalvm-install-to-windows10/</link>
        <pubDate>Sat, 09 Nov 2019 21:57:08 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201911/09/graalvm-install-to-windows10/</guid>
        <description>悪い意味で。 なお試した時点での GraalVM 最新リリースバージョンは 19.2.1でした。 GraalVM インストール &amp;amp; 実行 GraalVM のインストール方法はいくつかあるのでお好み</description>
      </item>
      
      <item>
        <title>MockMvc でURLエンコード済みのpathを渡したいときは new URI(...) を引数にする</title>
        <link>https://yukihane.github.io/blog/201910/29/encoded-url-passing-to-mockmvc/</link>
        <pubDate>Tue, 29 Oct 2019 20:36:42 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201910/29/encoded-url-passing-to-mockmvc/</guid>
        <description>OAuth2.0 の redirect_uri をゴニョった実装をテストしたいときにハマった。 mockMvc.perform(get(new URI(&amp;quot;/line/oauth/authorize?redirece_uri=https%3A%2F%2Fexample.com&amp;quot;) ってやらないと二重にエンコードされてしまう。 参考 MockMvc needs to accept prepared URI with encoded URI path variables [SPR-11441] #16067 EncodedUriTests.java</description>
      </item>
      
      <item>
        <title>Intel iGPU環境でのAmethyst 開発環境セットアップ</title>
        <link>https://yukihane.github.io/blog/201910/setup-amethyst/</link>
        <pubDate>Tue, 08 Oct 2019 00:00:00 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201910/setup-amethyst/</guid>
        <description>TL;DR Ubuntu18.04, Coffee Lake iGPU で vulkan での実行を可能にするには mesa-vulkan-drivers パッケージインストール /etc/X11/xorg.conf.d/20-intel.conf で DRI3 有効化 の2点が必要。 (おそらく実際には、実行に libvulkan1 、及び開発には加えて libvulkan-dev も</description>
      </item>
      
      <item>
        <title>Cargo.lock をバージョン管理するや否や</title>
        <link>https://yukihane.github.io/blog/201909/rust-cago.lock/</link>
        <pubDate>Sun, 01 Sep 2019 00:00:00 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201909/rust-cago.lock/</guid>
        <description>cargo new --bin したパッケージに対して、たまたまデフォルで生成される .gitignore を用いずに https://gitignore.io/ で生成してものを用いていたのですが、 Cargo.lock ファイルの扱いが異なるように思</description>
      </item>
      
      <item>
        <title>電子キーボードを買いました</title>
        <link>https://yukihane.github.io/blog/201908/begin-piano/</link>
        <pubDate>Sat, 31 Aug 2019 00:00:00 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201908/begin-piano/</guid>
        <description>経緯 プログラミングとかビデオゲームとか、かなり目を酷使することばかりやっているので、そうではない趣味を持とうと考えた末、何か楽器を入門するこ</description>
      </item>
      
      <item>
        <title>LINE Messaging API を試してみる</title>
        <link>https://yukihane.github.io/blog/201908/line-bot-sample/</link>
        <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201908/line-bot-sample/</guid>
        <description>準備 Spring Boot セットアップ https://start.spring.io/ でテンプレートを作成して次の依存関係を追加します。 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.linecorp.bot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;line-bot-spring-boot&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.7.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; リポジトリ: https://github.com/line/line-bot-sdk-java/tree/master/line-bot-spring-boot Heroku セットアップ 今回は linebotbeta というアプリケーション</description>
      </item>
      
      <item>
        <title>LINE リッチメニューを試してみる</title>
        <link>https://yukihane.github.io/blog/201908/line-richmenu-sample/</link>
        <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201908/line-richmenu-sample/</guid>
        <description>https://github.com/yukihane/hello-java/tree/master/line/richmenu-sample 公式リファレンス に書いてある通りですが、リッチメニューを試してみました。 メニューをタップするとPostBackEventを送信します。 bo</description>
      </item>
      
      <item>
        <title>LINEログイン機能を試してみる(Spring Boot 2.1.7/Spring Security 5.1.6)</title>
        <link>https://yukihane.github.io/blog/201908/line-login-sample/</link>
        <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201908/line-login-sample/</guid>
        <description>Important 本ページは Spring Boot 2.1.7 の頃のものですが、後続として 2.4.5 対応版があります: LINEログインを試してみる(Spring Boot 2.4.5/Spring Security 5.4.6) – 発火後忘失 Spring Secur</description>
      </item>
      
      <item>
        <title>Gradleプロジェクトで生成した実行スクリプトがGitBash(MSYS環境)でうまく動かない</title>
        <link>https://yukihane.github.io/blog/201908/gradle-msys/</link>
        <pubDate>Fri, 23 Aug 2019 00:00:00 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201908/gradle-msys/</guid>
        <description>GitBash環境でSDKMAN!を使ってJBakeをインストールしたのですが、 jbake コマンドを実行すると次のようなエラーが出てうまく動きません</description>
      </item>
      
      <item>
        <title>Windows10上に開発環境を整える</title>
        <link>https://yukihane.github.io/blog/201908/setup-windows-devenv/</link>
        <pubDate>Fri, 23 Aug 2019 00:00:00 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201908/setup-windows-devenv/</guid>
        <description>前提 主にJava開発を行う人(要は私自身)向け記述多し パッケージ管理はscoopを使いますが、Java関係はなるべくSDKMAN!を使います</description>
      </item>
      
      <item>
        <title>HerokuでSpringBootアプリを動かしてみる</title>
        <link>https://yukihane.github.io/blog/201908/hello-heroku-with-springboot/</link>
        <pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201908/hello-heroku-with-springboot/</guid>
        <description>背景 最終的にはLINE platformのAPIを理解したいのですが、 リファレンスを読んでいるとサンプルプログラム(サンプルbot)をHero</description>
      </item>
      
      <item>
        <title>JBakeのタグページが想定通り動いていない</title>
        <link>https://yukihane.github.io/blog/201908/jbake-tags/</link>
        <pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201908/jbake-tags/</guid>
        <description>タグのindexページは正しくタグを収集しているようですが、それぞれのタグ個別ページがちゃんと生成されていないですね… テンプレートは 標準のも</description>
      </item>
      
      <item>
        <title>bashで標準出力をファイルに、標準エラー出力を画面とファイルに出力したい</title>
        <link>https://yukihane.github.io/blog/201908/bash-redirect-earch-other/</link>
        <pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201908/bash-redirect-earch-other/</guid>
        <description>Git の pre-push でテスト実行を行おうとした際、通常テスト実行ではデバッグログを出しているところを、エラーを表すものだけに絞って出すようにしようと考えま</description>
      </item>
      
      <item>
        <title>Lombokプラグインを入れているEclipseでMapStruct自動生成が機能しない</title>
        <link>https://yukihane.github.io/blog/201908/eclipse-lombok-mapstruct/</link>
        <pubDate>Sun, 18 Aug 2019 00:00:00 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201908/eclipse-lombok-mapstruct/</guid>
        <description>サンプルコード: https://github.com/yukihane/hello-java/tree/master/mapstruct/hello-mapstruct 上記のコードのようにLombokとMapStructを併用しているプロジェクトを、 Lombokプラグインを適用したEcli</description>
      </item>
      
      <item>
        <title>VSCodeでRustの整形ができない？</title>
        <link>https://yukihane.github.io/blog/201908/rust-format-on-vscode/</link>
        <pubDate>Sun, 18 Aug 2019 00:00:00 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201908/rust-format-on-vscode/</guid>
        <description>Format not work #534 - rust-lang/rls-vscode VSCodeでRustの勉強をしているのですが、現在、どうもコード整形機能が上手く働いていない…？ 代替策としては、 rustfmt を使って、 cargo</description>
      </item>
      
      <item>
        <title>cargo build で特定のバージョンの rustc を利用する</title>
        <link>https://yukihane.github.io/blog/201908/use-specific-rustc-version/</link>
        <pubDate>Sat, 03 Aug 2019 00:00:00 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201908/use-specific-rustc-version/</guid>
        <description>rustup run 1.15.1 cargo build もちろん事前に使用するバージョンをインストールしておく必要がある: rustup install 1.15.1 参考: Rustup for managing Rust versions</description>
      </item>
      
      <item>
        <title>JBakeはじめました</title>
        <link>https://yukihane.github.io/blog/201908/hello/</link>
        <pubDate>Sat, 03 Aug 2019 00:00:00 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201908/hello/</guid>
        <description>個人的にMarkDownはあまり好きではなく(標準だと表現力が弱いし方言が多い！)、ずっとblogをAsciiDocで書く方法を模索していま</description>
      </item>
      
      <item>
        <title>Spring Bootは、セキュリティフィルタBeanを作っている分だけ、無料で認証できちまうんだ</title>
        <link>https://yukihane.github.io/blog/201907/18/spring-boot-filter-bean/</link>
        <pubDate>Thu, 18 Jul 2019 20:34:56 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201907/18/spring-boot-filter-bean/</guid>
        <description>要約 78.10 Add a Servlet, Filter, or Listener to an Application曰く。 any Servlet or Filter beans are registered with the servlet container automatically. Spring Security 使った自前の認証フィルタを @Component 付けて作ったりなんかした際に意図し</description>
      </item>
      
      <item>
        <title>h2-consoleとspring-boot-starter-securityと私</title>
        <link>https://yukihane.github.io/blog/201907/12/h2-console-on-spring-boot/</link>
        <pubDate>Fri, 12 Jul 2019 20:33:40 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201907/12/h2-console-on-spring-boot/</guid>
        <description>概要 spring-boot-starter-security を導入しても http://localhost:8080/h2-console にアクセスしたかった。 作業結果: https://github.com/yukihane/hello-java/tree/master/spring/h2-console-spring-security-example 手順 h2-console が使える依存関係を追加してプロジェクトセットアップ 8113d7 1 2 3 4 5 6 7 8 9 10 11 12 13 14</description>
      </item>
      
      <item>
        <title>spring-boot-starter-security を入れたら認証画面が！</title>
        <link>https://yukihane.github.io/blog/201907/04/spring-boot-and-spring-security/</link>
        <pubDate>Thu, 04 Jul 2019 20:32:21 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201907/04/spring-boot-and-spring-security/</guid>
        <description>WebSecurityConfigurerAdapter#configure(HttpSecurity) で form 認証を有効化しているのでこれをディスる。 WebSecurityConfigurerAdapterを継承した Spring コンポーネントをスキャン対</description>
      </item>
      
      <item>
        <title>ちょっと待って！そのUserDetails、本当に必要ですか？</title>
        <link>https://yukihane.github.io/blog/201907/03/you-dont-need-userdetails/</link>
        <pubDate>Wed, 03 Jul 2019 21:55:20 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201907/03/you-dont-need-userdetails/</guid>
        <description>概要 Spring Boot の認証を実装してみた系のサンプルでよく UserDetails や UserDetailsService が用いられているが、必然性が不明なものがほとんどである。 (おそらく当の実装者も理解してい</description>
      </item>
      
      <item>
        <title>ファイル出力先にServletContext#getRealPathを使うな</title>
        <link>https://yukihane.github.io/blog/201906/20/dont-use-getrealpath/</link>
        <pubDate>Thu, 20 Jun 2019 20:26:49 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201906/20/dont-use-getrealpath/</guid>
        <description>タイトルに書いたような、ファイル出力先として ServletContext#getRealPath を利用しているサンプルコードが見つかる、と聞いて検索してみたところ、日本語、非日本語にかかわら</description>
      </item>
      
      <item>
        <title>元号が令和に変わったことを知らない人のための日付処理方法</title>
        <link>https://yukihane.github.io/blog/201906/12/java-datetime/</link>
        <pubDate>Wed, 12 Jun 2019 20:24:45 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201906/12/java-datetime/</guid>
        <description>問題 JapaneseDate.of(や LocalDate.of)を使うと厳密(strict)に検証されてしまう。 結果、例外が出る。 // 平成31</description>
      </item>
      
      <item>
        <title>SimpleDateFormat もこれもうわかんねぇな</title>
        <link>https://yukihane.github.io/blog/201906/11/simpledateformat/</link>
        <pubDate>Tue, 11 Jun 2019 20:23:06 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201906/11/simpledateformat/</guid>
        <description>結果 1.8 H 11 平成 環境 1.8 java version &amp;quot;1.8.0_201&amp;quot; Java(TM) SE Runtime Environment (build 1.8.0_201-b09) Java HotSpot(TM) 64-Bit Server VM (build 25.201-b09, mixed mode) 11 openjdk version &amp;quot;11.0.2&amp;quot; 2019-01-15 OpenJDK Runtime Environment 18.9 (build 11.0.2+9) OpenJDK 64-Bit Server VM 18.9 (build 11.0.2+9, mixed mode) コード import java.text.SimpleDateFormat; import java.time.LocalDate; import java.util.Date; import java.util.Locale; public class Main { public static void main(final String[] args) {</description>
      </item>
      
      <item>
        <title>%s に null を渡したらどうなるんだっけ</title>
        <link>https://yukihane.github.io/blog/201906/11/format-pass-to-null/</link>
        <pubDate>Tue, 11 Jun 2019 20:19:09 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201906/11/format-pass-to-null/</guid>
        <description>こたえ 文字列 null が出力される。 コード final String text = null; System.out.printf(&amp;quot;%s&amp;quot;, text); 参考 java.util.Formatter For category General, Character, Numberic, Integral and Date/Time conversion, unless otherwise specified, if the argument arg is null, then the result is &amp;ldquo;null&amp;rdquo;. リンク先の表にある通り、 s はカテゴリ&amp;q</description>
      </item>
      
      <item>
        <title>DateTimeFormatter とかこれもうわかんねぇな</title>
        <link>https://yukihane.github.io/blog/201906/04/datetimeformatter/</link>
        <pubDate>Tue, 04 Jun 2019 20:16:49 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201906/04/datetimeformatter/</guid>
        <description>コード import java.time.LocalDate; import java.time.format.DateTimeFormatter; import java.util.Locale; public class App { private static String format(final LocalDate date, final String pattern) { return date.format(DateTimeFormatter.ofPattern(pattern, Locale.JAPAN)); } public static void main(final String[] args) { final LocalDate today = LocalDate.of(2019, 6, 4); System.out.println(format(today, &amp;quot;M&amp;quot;)); System.out.println(format(today, &amp;quot;MM&amp;quot;)); System.out.println(format(today, &amp;quot;MMM&amp;quot;)); System.out.println(format(today, &amp;quot;MMMM&amp;quot;)); System.out.println(format(today, &amp;quot;MMMMM&amp;quot;)); System.out.println(format(today, &amp;quot;MMMMMM&amp;quot;)); } } 結果 パターン 結果 M 6 MM 06 MMM 6 月</description>
      </item>
      
      <item>
        <title>Spring Bootで コンポーネント外からコンポーネントを取得したかった</title>
        <link>https://yukihane.github.io/blog/201906/01/spring-boot-component-out-of-container/</link>
        <pubDate>Sat, 01 Jun 2019 20:15:54 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201906/01/spring-boot-component-out-of-container/</guid>
        <description>動機 CDI で言うところの CDI.current().getBeans(...) とか CDI.current().select(...)とかそんな感じのことをやりたかった。 参考リファレンス ドキュメント</description>
      </item>
      
      <item>
        <title>Spring Boot 2.1 でテスト時 @Bean を挿げ替えたかった</title>
        <link>https://yukihane.github.io/blog/201905/31/spring-boot-bean-on-testing/</link>
        <pubDate>Fri, 31 May 2019 20:14:41 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201905/31/spring-boot-bean-on-testing/</guid>
        <description>動機 ユニットテスト実行時に java.time.Clock を挿げ替えてストップ・ザ・ワールド(GC的な意味でなくジョジョ的な意味で)したかった。 考え方/方針 @Configuration で @Bean を定義し</description>
      </item>
      
      <item>
        <title>text/plain で JSON を投げつけてくるヤツに対処する</title>
        <link>https://yukihane.github.io/blog/201905/21/spring-boog-json-convert/</link>
        <pubDate>Tue, 21 May 2019 20:12:30 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201905/21/spring-boog-json-convert/</guid>
        <description>RestTemplate でレスポンスの Content-Type を変更する。 の別解。 @Autowired private RestTemplateBuilder builder; ... final MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter(); converter.setSupportedMediaTypes(Arrays.asList(MediaType.TEXT_PLAIN)); final RestTemplate restTemplate = builder.additionalMessageConverters(converter).build(); ちなみに上記のようにコンバータを明示的に設定しない場合だと次のような</description>
      </item>
      
      <item>
        <title>Java9以降.propertiesファイルをUTF-8で書けるようになった、は正しい？</title>
        <link>https://yukihane.github.io/blog/201904/27/java-properties-is-not-utf8/</link>
        <pubDate>Sat, 27 Apr 2019 20:08:10 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201904/27/java-properties-is-not-utf8/</guid>
        <description>解答 正しくない。 Java9(JEP226)で変わったのはリソースバンドルの取り扱い(PropertyResourceBundle) であって プ</description>
      </item>
      
      <item>
        <title>Testing the Web Layer のコードを JUnit Jupiter にマイグレーションしてみる</title>
        <link>https://yukihane.github.io/blog/201904/16/migration-to-junit5/</link>
        <pubDate>Tue, 16 Apr 2019 20:06:33 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201904/16/migration-to-junit5/</guid>
        <description>概要 (追記: ここで試したのは2.1.4.RELEASE時点のもの。2.2.0.M3以降では #14736の通り JUnit5 がデフォルトになっている模様。</description>
      </item>
      
      <item>
        <title>Spring Validator(でラップされたBean Validation)のメッセージをi18nしたときの覚え書き</title>
        <link>https://yukihane.github.io/blog/201903/26/change-spring-validator-message/</link>
        <pubDate>Tue, 26 Mar 2019 20:04:13 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201903/26/change-spring-validator-message/</guid>
        <description>やりたかったこと BeanValidation のプロパティファイル ValidationMessages.properties でなく、 Spring のメッセージプロパティに統合したい。 Spring のメッセージプロパティとは？ Accept-Langu</description>
      </item>
      
      <item>
        <title>RPGツクールMVをバージョン管理するための初期設定</title>
        <link>https://yukihane.github.io/blog/201903/24/versioning-rpg-maker/</link>
        <pubDate>Sun, 24 Mar 2019 20:02:46 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201903/24/versioning-rpg-maker/</guid>
        <description>他の方が同じ話題で次のエントリを書かれていましたが、gulp 何それ状態なので理解できませんでした。理解できる方はそちらの方が良いのかもしれま</description>
      </item>
      
      <item>
        <title>Hibernate で CHAR を String にマップする</title>
        <link>https://yukihane.github.io/blog/201902/04/hibernate-map-char-to-string/</link>
        <pubDate>Mon, 04 Feb 2019 20:01:19 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201902/04/hibernate-map-char-to-string/</guid>
        <description>例えば、生 JDBC でchar型カラムのクエリを書くとString型にマップされます final Connection connection = DriverManager.getConnection(...); final Statement statement = connection.createStatement(); final ResultSet resultSet = statement.executeQuery(&amp;quot;select char_column from foo_table&amp;quot;); // java.lang.String resultSet.getMetaData().getColumnClassName(1); が、Hibernate</description>
      </item>
      
      <item>
        <title>Eclipseの起動に使用するJDKを指定する（Mac）</title>
        <link>https://yukihane.github.io/blog/201901/16/set-jvm-to-eclipse-on-mac/</link>
        <pubDate>Wed, 16 Jan 2019 19:58:26 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201901/16/set-jvm-to-eclipse-on-mac/</guid>
        <description>最新の JDK をインストールしたが、古いバージョンの Eclipse も利用したい(が最新のバージョンでは起動できない)ような場合に必要となる設定です。 設定するフ</description>
      </item>
      
      <item>
        <title>Ubuntu18.04 端末の不快なエラー音 消す方法</title>
        <link>https://yukihane.github.io/blog/201811/10/ubuntu-mute-tab-sound/</link>
        <pubDate>Sat, 10 Nov 2018 19:56:46 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201811/10/ubuntu-mute-tab-sound/</guid>
        <description>Ubuntu を 18.04 にアップグレードしたら端末の補完処理で tab キーを押す度にヴヴッという不快なビープ音が鳴るようになってしまった。 端末のメニューから 設定 を選</description>
      </item>
      
      <item>
        <title>OpenJDK11をWindowsで自前ビルドする</title>
        <link>https://yukihane.github.io/blog/201809/30/selfbuild-openjdk/</link>
        <pubDate>Sun, 30 Sep 2018 19:53:56 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201809/30/selfbuild-openjdk/</guid>
        <description>Java の有償化ってより身近なところでは GPL 化と言った方が現状に即してるな、と思っています。 それはともかく、何となく OpenJDK をデバッグ情報付きでビルドした</description>
      </item>
      
      <item>
        <title>Azure FunctionsでPowerShell使えなくなっとる</title>
        <link>https://yukihane.github.io/blog/201809/29/pwsh-on-azure-function/</link>
        <pubDate>Sat, 29 Sep 2018 19:51:56 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201809/29/pwsh-on-azure-function/</guid>
        <description>v1 で実験的サポートだった PowerShell が、実行環境のバージョンが上がったとかで v2 になり、選べなくなっているみたい？一時的な話？ 実行環境を作る https://portal.azure.com/ から 「リソ</description>
      </item>
      
      <item>
        <title>Invoke-WebRequestやCompress-Archiveを使っていると画面上部に一瞬表示される何かの表示を非表示に</title>
        <link>https://yukihane.github.io/blog/201809/08/pwsh-progress-silent/</link>
        <pubDate>Sat, 08 Sep 2018 19:50:04 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201809/08/pwsh-progress-silent/</guid>
        <description>進捗状況(progress)が表示されているそうです。少量のデータを扱っている場合には画面の一部がフラッシュしているように見えており、何のた</description>
      </item>
      
      <item>
        <title>Windows向けrsyncがなくなったみたい？</title>
        <link>https://yukihane.github.io/blog/201808/22/windows-rsync-unavailable/</link>
        <pubDate>Wed, 22 Aug 2018 19:48:21 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201808/22/windows-rsync-unavailable/</guid>
        <description>vagrantでrsyncが使いたくなった。 そこでscoopでrsyncをインストールしようとしたが、見つからない。 おや？と思い検索してみる</description>
      </item>
      
      <item>
        <title>vim で E117 未知の関数です</title>
        <link>https://yukihane.github.io/blog/201808/08/gvim-unknown-function/</link>
        <pubDate>Wed, 08 Aug 2018 19:43:44 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201808/08/gvim-unknown-function/</guid>
        <description>vim は ~/.vim ディレクトリを読むのに対し gvim は~/vimfilesディレクトリを読むためだそうです。Windows ならジャンクションを作りましょう。 cd</description>
      </item>
      
      <item>
        <title>gitで利用するエディタを設定したかった</title>
        <link>https://yukihane.github.io/blog/201807/27/set-git-commit-editor/</link>
        <pubDate>Fri, 27 Jul 2018 19:40:03 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201807/27/set-git-commit-editor/</guid>
        <description>あるいは vim-plug をセットアップしたら git commit したときに E492: Not an editor command って怒られるようになっちゃった。 Vagrant で CentOS の Box を作るたびにひっかかる。 Git が使う editor を(vi で</description>
      </item>
      
      <item>
        <title>M2_HOMEは不要</title>
        <link>https://yukihane.github.io/blog/201807/25/not-required-m2_home/</link>
        <pubDate>Wed, 25 Jul 2018 19:38:38 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201807/25/not-required-m2_home/</guid>
        <description>M2_HOME は削除されました。 MNGSITE-283 Remove M2_HOME from documentation MNG-5607 Don&amp;rsquo;t use M2_HOME in mvn shell/command scripts anymore 3.5.0 リリースノート &amp;ldquo;Based on problems in using M2_HOME related to different Maven versions installed and to simplify things, the usage of M2_HOME has been removed and is not supported any more MNG-5823, MNG-5836, MNG-5607.&amp;rdquo; (変更 commit) 敢え</description>
      </item>
      
      <item>
        <title>Git for Windowsでzipコマンドを再現する</title>
        <link>https://yukihane.github.io/blog/201807/13/zip-on-git-for-windows/</link>
        <pubDate>Fri, 13 Jul 2018 19:36:48 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201807/13/zip-on-git-for-windows/</guid>
        <description>git-archive使えば何とかなることに気付きました。 ちなみにunzipコマンドは標準で使えます。 mkdir workrepo cd workrepo git init cp -r [target_file_or_dir] . git add . git commit -m commit git archive</description>
      </item>
      
      <item>
        <title>Undertow上でJSF実現</title>
        <link>https://yukihane.github.io/blog/201807/08/jsf-on-undertow/</link>
        <pubDate>Sun, 08 Jul 2018 19:33:26 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201807/08/jsf-on-undertow/</guid>
        <description>手順 FacesInitializer#onStartupでやっていることを自力で書く 標準パス(WEB-INF/classes)に無いので、M</description>
      </item>
      
      <item>
        <title>エラーメッセージでググろうと思ったんだけど日本語だからかヒットしない</title>
        <link>https://yukihane.github.io/blog/201807/08/java-compiler-error-in-japanese/</link>
        <pubDate>Sun, 08 Jul 2018 19:30:29 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201807/08/java-compiler-error-in-japanese/</guid>
        <description>Java でメッセージを英語にする 環境変数 JAVA_TOOL_OPTIONS に設定しよう。 export JAVA_TOOL_OPTIONS=&amp;quot;-Duser.language=en -Duser.country=US&amp;quot;</description>
      </item>
      
      <item>
        <title>Tomcat上でJSF実現</title>
        <link>https://yukihane.github.io/blog/201807/07/jsf-on-tomcat/</link>
        <pubDate>Sat, 07 Jul 2018 21:47:59 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201807/07/jsf-on-tomcat/</guid>
        <description>非 JavaEE なサーブレットコンテナ上で JSF を実行するように変更する手順。 TL;DR Mojarra を依存関係に含める JSF リソースを javax.faces.webapp.FacesServlet にマップするよう web.xml で設定する 実装例 https://github.com/yukihane/hello-jsf/tree/feature/server/tomcat feature/server/tomcat ブラ</description>
      </item>
      
      <item>
        <title>Building Java Project</title>
        <link>https://yukihane.github.io/blog/201805/19/building-java-project/</link>
        <pubDate>Sat, 19 May 2018 19:28:37 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201805/19/building-java-project/</guid>
        <description>はじめに 他者が作成したプログラムにちょっと変更を加えて使いたい その言語は未経験だけれど、コードの変更自体は検索したり周辺コードのコピペで何と</description>
      </item>
      
      <item>
        <title>yamlの継承っぽいのは継承というよりハッシュのマージ</title>
        <link>https://yukihane.github.io/blog/201805/09/yaml/</link>
        <pubDate>Wed, 09 May 2018 19:26:26 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201805/09/yaml/</guid>
        <description>なので配列(Array)には使えない。 database: &amp;amp;default ip: 192.168.1.5 port: 2000 db_name: test foo_database: &amp;lt;&amp;lt;: *default port: 2001 db_name: foo 上は実現できても下のようにはできない。 database_attr: &amp;amp;default - ip - port www_attr: &amp;lt;&amp;lt;: *default - name 関連: https://github.com/yaml/yaml/issues/35</description>
      </item>
      
      <item>
        <title>ワンライナー sudoers 編集</title>
        <link>https://yukihane.github.io/blog/201805/09/edit-sudoers-oneliner/</link>
        <pubDate>Wed, 09 May 2018 19:24:15 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201805/09/edit-sudoers-oneliner/</guid>
        <description>Dockerfile 内で sudoers を編集しユーザ情報を追加したかった。 RUN echo &#39;myuser ALL=(ALL) NOPASSWD: ALL&#39; | EDITOR=&#39;tee -a&#39; visudo 参考: linux - How do I edit /etc/sudoers from a script? - Stack Overflow</description>
      </item>
      
      <item>
        <title>手っ取り早くRPMパッケージを作成したかった</title>
        <link>https://yukihane.github.io/blog/201803/20/building-rpm/</link>
        <pubDate>Tue, 20 Mar 2018 19:21:51 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201803/20/building-rpm/</guid>
        <description>前提 既にビルド方法は確立しており、パッケージシステムに配布方法だけ任せたい、という場合に最小限の手間で RPM パッケージを作ることを考えます ビルド</description>
      </item>
      
      <item>
        <title>maven-archetype-plugin と archetype-catalog.xml 生成場所/読み取り場所</title>
        <link>https://yukihane.github.io/blog/201802/25/maven-archetype-catalog/</link>
        <pubDate>Sun, 25 Feb 2018 19:18:52 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201802/25/maven-archetype-catalog/</guid>
        <description>(注: 文中に記載の localRepository 設定有無、というのは間違った条件かも知れません(検証中)) 問題 mvn archetype:generate -DarchetypeCatalog=local コマンドを実行したところ、次のようなメッセージが出力</description>
      </item>
      
      <item>
        <title>Java9でJettyでJerseyのMaven</title>
        <link>https://yukihane.github.io/blog/201801/28/java9-jetty-jersey/</link>
        <pubDate>Sun, 28 Jan 2018 19:16:07 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201801/28/java9-jetty-jersey/</guid>
        <description>dependency について、2.3.2. Servlet based server-side applicationをみると最小構成はjersey-container-servletだけでいいように見える</description>
      </item>
      
      <item>
        <title>Polymer2 で &amp;lt;input&amp;gt; の値を「親エレメントの値と」バインドする</title>
        <link>https://yukihane.github.io/blog/201801/21/polymer2-input-bind-to-parent/</link>
        <pubDate>Sun, 21 Jan 2018 19:12:25 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201801/21/polymer2-input-bind-to-parent/</guid>
        <description>Polymer2 で の値をバインドする で my-input なるカスタムエレメントを作成しました。&amp;lt;input&amp;gt;の入力値をそのまま表示するだけのエレメントです。 1</description>
      </item>
      
      <item>
        <title>Polymer2 で &amp;lt;input&amp;gt; の値をバインドする</title>
        <link>https://yukihane.github.io/blog/201801/21/polymer2-input-bind/</link>
        <pubDate>Sun, 21 Jan 2018 19:08:22 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201801/21/polymer2-input-bind/</guid>
        <description>ドキュメントのstartを読み終えて、さあなにか作ってみるか、そうだよく 2-way binding の例で出てくるinputタグ入力値を画面に反映させるのをやってみ</description>
      </item>
      
      <item>
        <title></title>
        <link>https://yukihane.github.io/blog/201908/spring-postconstruct-deadlock/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201908/spring-postconstruct-deadlock/</guid>
        <description></description>
      </item>
      
      <item>
        <title></title>
        <link>https://yukihane.github.io/blog/201908/spring-test-number-of-context/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://yukihane.github.io/blog/201908/spring-test-number-of-context/</guid>
        <description></description>
      </item>
      
    
  </channel>
</rss>