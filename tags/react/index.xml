<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React on 発火後忘失</title>
    <link>https://yukihane.github.io/tags/react/</link>
    <description>Recent content in React on 発火後忘失</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Sun, 03 Oct 2021 08:20:21 +0000</lastBuildDate>
    <atom:link href="https://yukihane.github.io/tags/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tauri を GUI にして Rust と React に入門する</title>
      <link>https://yukihane.github.io/blog/202110/03/hello-tauri/</link>
      <pubDate>Sun, 03 Oct 2021 08:20:21 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202110/03/hello-tauri/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://tauri.studio/&#34;&gt;Tauri&lt;/a&gt; という、 WebView を利用して GUI を実現する Rust 製フレームワークを試してみました。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Rust も React も入門書から陸続きで書き始められるので、余計なことに気を取られずに済みそうです(ただし、 JS - Rust 間のデータ受け渡しに利用する JSON オブジェクトのシリアライズ/デシリアライズに利用する &lt;a href=&#34;https://serde.rs/&#34;&gt;Serde&lt;/a&gt; についての知識は少し必要になりそうでした)。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>redux-devtools-extension をTypeScriptで使う</title>
      <link>https://yukihane.github.io/blog/202004/24/redux-devtools-extension-with-typescript/</link>
      <pubDate>Fri, 24 Apr 2020 21:00:56 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202004/24/redux-devtools-extension-with-typescript/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/zalmoxisus/redux-devtools-extension/blob/master/README.md#13-use-redux-devtools-extension-package-from-npm&#34;&gt;https://github.com/zalmoxisus/redux-devtools-extension/blob/master/README.md#13-use-redux-devtools-extension-package-from-npm&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;というわけで型付けされているので&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;const store = createStore(rootReducer, undefined, devToolsEnhancer({}));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;で良い。&lt;/p&gt;&#xA;&lt;p&gt;何か Qiia の記事とかを見てると&lt;a href=&#34;https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Recipes.md#using-in-a-typescript-project&#34;&gt;こっちの方法&lt;/a&gt;でばっかり書いてあるが。&lt;/p&gt;&#xA;&lt;hr /&gt;&#xA;&lt;p&gt;Electron から使う場合は&lt;a href=&#34;https://www.electronjs.org/docs/tutorial/devtools-extension#how-to-load-a-devtools-extension&#34;&gt;Electron 公式&lt;/a&gt;からも&lt;a href=&#34;https://github.com/zalmoxisus/redux-devtools-extension#3-for-electron&#34;&gt;redux-devtools-extension 公式&lt;/a&gt;からもリンクされている &lt;a href=&#34;https://github.com/MarshallOfSound/electron-devtools-installer&#34;&gt;electron-devtools-installer&lt;/a&gt; が利用できた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ReduxのBasic TutorialにTypeScriptで型を付けただけ</title>
      <link>https://yukihane.github.io/blog/202004/15/redux-basic-tutorial/</link>
      <pubDate>Wed, 15 Apr 2020 20:56:22 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202004/15/redux-basic-tutorial/</guid>
      <description>&lt;p&gt;Redux 多分使わないけど理解のため写経。&lt;/p&gt;&#xA;&lt;p&gt;答え合わせに他の方が似たようなことやってないかググったけれども プラスアルファ要素(Redux Toolkit を使う、feature folders 流派でフォルダ分け、etc)が付いてたりして 1 対 1 で突き合わせて確認できるものが見つからなかった。ので自分が書いたものをリンクしておく:&lt;/p&gt;</description>
    </item>
    <item>
      <title>React Router &lt;Route&gt; で描画したいコンポーネントの指定方法が人によってまちまちなんだけどどれが正解なの？</title>
      <link>https://yukihane.github.io/blog/202004/13/react-router/</link>
      <pubDate>Mon, 13 Apr 2020 20:54:12 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202004/13/react-router/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://reacttraining.com/react-router/web/api/Route/route-render-methods&#34;&gt;https://reacttraining.com/react-router/web/api/Route/route-render-methods&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;The recommended method of rendering something with a &lt;Route&gt; is to use children elements&lt;/strong&gt;, as shown above. There are, however, a few other methods you can use to render something with a &lt;Route&gt;. These are provided mostly for supporting apps that were built with earlier versions of the router before hooks were introduced.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&amp;lt;Route component&amp;gt;&lt;/li&gt;&#xA;&lt;li&gt;&amp;lt;Route render&amp;gt;&lt;/li&gt;&#xA;&lt;li&gt;&amp;lt;Route children&amp;gt; function&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;つまり、引用部の直前にあるこの書き方:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
