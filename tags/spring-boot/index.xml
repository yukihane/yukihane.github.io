<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring-Boot on 発火後忘失</title>
    <link>https://yukihane.github.io/tags/spring-boot/</link>
    <description>Recent content in Spring-Boot on 発火後忘失</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Mon, 05 May 2025 11:59:23 +0900</lastBuildDate>
    <atom:link href="https://yukihane.github.io/tags/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Thymeleafのformのバインドにrecord classは使わない方が良さそう</title>
      <link>https://yukihane.github.io/blog/202505/05/form-cannot-bind-to-record/</link>
      <pubDate>Mon, 05 May 2025 11:59:23 +0900</pubDate>
      <guid>https://yukihane.github.io/blog/202505/05/form-cannot-bind-to-record/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://yukihane.github.io/blog/202505/04/kotlin-form-binding/&#34;&gt;前回&lt;/a&gt; のつづき。&lt;/p&gt;&#xA;&lt;p&gt;あれ、そういえばJavaのrecord classも似たような性質だな、ということはrecord classもform bindingには使えないのかな？でもあまりそんな話聞いたこと無いな、どうなんだろう…と思い検索してみたのですが、ヒットしたのは自分の記事でしたｗ&lt;/p&gt;</description>
    </item>
    <item>
      <title>KotlinでformバインディングするときもやっぱりJava Beansにした方が良さそう</title>
      <link>https://yukihane.github.io/blog/202505/04/kotlin-form-binding/</link>
      <pubDate>Sun, 04 May 2025 14:17:43 +0900</pubDate>
      <guid>https://yukihane.github.io/blog/202505/04/kotlin-form-binding/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://yukihane.github.io/blog/202505/01/spring-boot-form-binding/&#34;&gt;前回&lt;/a&gt; の続きになります。&lt;br /&gt;&#xA;前回はJavaでformバインディングしvalidationを行いました。&lt;/p&gt;&#xA;&lt;p&gt;今回は、Kotlinでformバインディングしてみて挙動を確認します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Boot(Spring MVC)のform送信の仕組みを少しずつ理解する</title>
      <link>https://yukihane.github.io/blog/202505/01/spring-boot-form-binding/</link>
      <pubDate>Thu, 01 May 2025 21:19:38 +0900</pubDate>
      <guid>https://yukihane.github.io/blog/202505/01/spring-boot-form-binding/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Spring Boot + Thymeleaf でのform送信について、公式ドキュメントとしては&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://spring.io/guides/gs/handling-form-submission&#34;&gt;Handling Form Submission&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://spring.io/guides/gs/validating-form-input&#34;&gt;Validating Form Input&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;があります。&lt;/p&gt;&#xA;&lt;p&gt;しかし、これらのドキュメントは初歩的な説明にとどまり、この知識だけで実践に挑むとかなり苦労します。&lt;br /&gt;&#xA;また、最近は静的webページでformをpostするみたいなことをやる機会が少なくなっており、検索しても実例が出てこなかったりロストテクノロジー化しつつあるように思われました。&lt;br /&gt;&#xA;(「ロストテクノロジー化」については、AIに聞けば良い時代になったので今後は問題にはならないかも？)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Boot 開発で SASS や TypeScript を利用するための設定(Vite)</title>
      <link>https://yukihane.github.io/blog/202410/26/spring-boot-with-vite/</link>
      <pubDate>Sat, 26 Oct 2024 01:49:44 +0900</pubDate>
      <guid>https://yukihane.github.io/blog/202410/26/spring-boot-with-vite/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;次のエントリーで、Spring Boot &amp;amp; Thymeleaf な開発時に TypeScript を利用する設定を書きました。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://yukihane.github.io/blog/202107/10/spring-boot-with-typescript/&#34;&gt;Spring Boot と TypeScript で開発するためのプロジェクト設定(Gradle)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://yukihane.github.io/blog/202107/11/spring-boot-with-babel/&#34;&gt;Spring Boot と TypeScript で開発するためのプロジェクト設定(Gradle) - Polyfill も必要とする場合&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;今回は Spring Boot &amp;amp; Thymeleaf な開発で、もうちょっとちゃんとモダンなフロントエンド開発環境を統合する手順です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gradleプロジェクトではリソースファイルを編集してもAutomatic Restartしてしまう</title>
      <link>https://yukihane.github.io/blog/202410/20/spring-boot-devtools-auto-restart/</link>
      <pubDate>Sun, 20 Oct 2024 14:51:14 +0900</pubDate>
      <guid>https://yukihane.github.io/blog/202410/20/spring-boot-devtools-auto-restart/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/20136&#34;&gt;Devtools always triggers restart if build with gradle - spring-projects/spring-boot #20136&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/gradle/gradle/issues/12220&#34;&gt;Delegated build process always triggers Spring-Boot devtools restart - gradle/gradle #12220&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;にある通りですが。&lt;/p&gt;&#xA;&lt;p&gt;spring-boot-devtools の説明では、クラスのリロードが必要になった場合それを検知して自動的に再起動するが、Thymeleaf テンプレートや css などの static リソースファイルが変更された場合は再起動しない、とあります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Boot でサンプルコードを作成するときのプロパティなど</title>
      <link>https://yukihane.github.io/blog/202110/31/spring-boot-template/</link>
      <pubDate>Sun, 31 Oct 2021 10:01:45 +0900</pubDate>
      <guid>https://yukihane.github.io/blog/202110/31/spring-boot-template/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Stack Overflow で Spring Boot の質問に回答するときのサンプルプロジェクトを作成するとき、 &lt;a href=&#34;https://start.spring.io/&#34;&gt;Spirng Initializr&lt;/a&gt; を利用しているのですが、よく必要な dependencies を追加し忘れたり、設定しておいた方が良いプロパティってなんだっけかな、と迷うことがあります。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Boot でカスタム validator に injection する</title>
      <link>https://yukihane.github.io/blog/202110/18/spring-inject-in-validator/</link>
      <pubDate>Mon, 18 Oct 2021 12:59:08 +0900</pubDate>
      <guid>https://yukihane.github.io/blog/202110/18/spring-inject-in-validator/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Spring Boot で JPA Validator にインジェクションしようとしたけどできなかった、という話を何度か聞いてその度に調べていたので、次回に備えてまとめておきます。&#xA;サンプルコードはこちら:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring MVC で Java17 record を試してみる</title>
      <link>https://yukihane.github.io/blog/202110/18/java17-record-on-spring-mvc/</link>
      <pubDate>Mon, 18 Oct 2021 10:03:46 +0900</pubDate>
      <guid>https://yukihane.github.io/blog/202110/18/java17-record-on-spring-mvc/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;(※ &lt;code&gt;record&lt;/code&gt; は Java14 でプレビュー版が導入、 Java16 で正式版が導入されたので Java17 というのは不正確なようですが…)&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Java17 の &lt;code&gt;record&lt;/code&gt; を今まで利用してきた POJO から置き換えられるのかを簡単に見てみました。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Mapstruct Spring Extensions を試してみる</title>
      <link>https://yukihane.github.io/blog/202110/18/mapstruct-spring-extensions/</link>
      <pubDate>Mon, 18 Oct 2021 02:44:46 +0900</pubDate>
      <guid>https://yukihane.github.io/blog/202110/18/mapstruct-spring-extensions/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://mapstruct.org/&#34;&gt;MapStruct の公式サイト&lt;/a&gt;を見ていると、 &lt;a href=&#34;https://mapstruct.org/documentation/spring-extensions/reference/html/&#34;&gt;Mapstruct Spring Extensions&lt;/a&gt; なるサブプロジェクトが発足していたので、何者か調べようと試してみました。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;結果、これは Spring の &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#core-convert-ConversionService-API&#34;&gt;&lt;code&gt;ConversionService&lt;/code&gt;&lt;/a&gt; の &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#core-convert-Converter-API&#34;&gt;&lt;code&gt;Converter&lt;/code&gt;&lt;/a&gt; と MapStruct の &lt;code&gt;Mapper&lt;/code&gt; を統合して、実装を少し楽にしよう、というもののようでした。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>STS(Eclipse) で Import Getting Started Content が進まない</title>
      <link>https://yukihane.github.io/blog/202110/16/sts-import-getting-started-content-is-stuck/</link>
      <pubDate>Sat, 16 Oct 2021 08:16:59 +0900</pubDate>
      <guid>https://yukihane.github.io/blog/202110/16/sts-import-getting-started-content-is-stuck/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://spring.io/tools&#34;&gt;Spring Tools 4 for Eclipse&lt;/a&gt; を利用していると、バージョンによって？ プロジェクト新規作成時などで &amp;#34;Import Getting Started Content&amp;#34; というタスクが走るのですがこれが全く終わらないことがあります。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>RestTemplateが採用するHTTPクライアント実装の順序</title>
      <link>https://yukihane.github.io/blog/202107/25/resttemplate-impl-order/</link>
      <pubDate>Sat, 24 Jul 2021 19:53:33 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202107/25/resttemplate-impl-order/</guid>
      <description>&lt;div class=&#34;quoteblock&#34;&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;By default the built RestTemplate will attempt to use the most suitable ClientHttpRequestFactory&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;attribution&#34;&gt;&#xA;— &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.5.3/api/org/springframework/boot/web/client/RestTemplateBuilder.html&#34;&gt;RestTemplateBuilder JavaDoc&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;とありますが、具体的にどうやって決めているの？という話です。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-boot/blob/v2.5.3/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/ClientHttpRequestFactorySupplier.java&#34;&gt;&lt;code&gt;ClientHttpRequestFactorySupplier&lt;/code&gt;&lt;/a&gt;をみると一目瞭然ですが、&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;olist arabic&#34;&gt;&#xA;&lt;ol class=&#34;arabic&#34;&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Apache HttpClient (&lt;code&gt;org.apache.http.client.HttpClient&lt;/code&gt;) がクラスパスに存在すればそれを採用する&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;OkHttp (&lt;code&gt;okhttp3.OkHttpClient&lt;/code&gt;) がクラスパスに存在すればそれを採用する&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;上記のものがいずれも無ければ &lt;code&gt;java.net.HttpURLConnection&lt;/code&gt; を採用する&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring BootとTypeScriptで開発するためのプロジェクト設定(Gradle) - Polyfillも必要とする場合</title>
      <link>https://yukihane.github.io/blog/202107/11/spring-boot-with-babel/</link>
      <pubDate>Sat, 10 Jul 2021 23:53:20 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202107/11/spring-boot-with-babel/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://yukihane.github.io/blog/202107/10/spring-boot-with-typescript/&#34;&gt;前回&lt;/a&gt; は &lt;code&gt;ts-loader&lt;/code&gt; を用いて TypeScript をビルドしました。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;簡潔にセットアップできたのは良いのですが、実際にはPolyfillを行いたいので &lt;code&gt;babel-loader&lt;/code&gt; をベースに再構築することにします。また、自動テスト( &lt;code&gt;jest&lt;/code&gt; )も導入します。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring BootとTypeScriptで開発するためのプロジェクト設定(Gradle)</title>
      <link>https://yukihane.github.io/blog/202107/10/spring-boot-with-typescript/</link>
      <pubDate>Fri, 09 Jul 2021 22:54:04 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202107/10/spring-boot-with-typescript/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Spring Boot で JavaScript を扱うときは素のJSをhtml(Thymeleafテンプレート)に &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグで埋め込む、というのが多分一般的で手っ取り早い方法かと思います。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Boot 2.5.0(Spring Security 5.5.0-M2)でremoteUserの値が変わった</title>
      <link>https://yukihane.github.io/blog/202106/30/spring-boot-remoteuser-is-changed/</link>
      <pubDate>Tue, 29 Jun 2021 20:00:43 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202106/30/spring-boot-remoteuser-is-changed/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;code&gt;HttpServletRequest#getRemoteUser()&lt;/code&gt; をログ出力(Tomcatの &lt;a href=&#34;https://tomcat.apache.org/tomcat-9.0-doc/config/valve.html#Access_Log_Valve/Attributes&#34;&gt;&lt;code&gt;%u&lt;/code&gt;&lt;/a&gt;)しているのですが、Spring Boot 2.5.0 から返ってくる値が変わったようです。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;どの変更が影響しているのか調べたところ、次のものが該当するようです。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Boot で Tomcat のメトリクスを出力する</title>
      <link>https://yukihane.github.io/blog/202106/12/spring-boot-tomcat-metrics/</link>
      <pubDate>Sat, 12 Jun 2021 10:07:19 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202106/12/spring-boot-tomcat-metrics/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Spring Boot アプリケーションの性能評価を行っているのですが、実装したアプリケーション部分ではなく、webサーバかどこかがパフォーマンスボトルネックになっているように思われる事象に直面し、その原因を調べたいと思っています。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring BootでTomcatのデフォルトエラーページが出るのを抑止する</title>
      <link>https://yukihane.github.io/blog/202105/21/spring-boot-avoid-tomcat-error-page/</link>
      <pubDate>Thu, 20 May 2021 20:58:00 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202105/21/spring-boot-avoid-tomcat-error-page/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Spring Boot を実行していると、Tomcatのデフォルトエラーページが表示されるような事象に遭遇することがあります。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/21257&#34;&gt;Tomcat invokes ErrorReportValve directly for malformed URLs · Issue #21257 · spring-projects/spring-boot&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;このページのカスタマイズ方法は、上記issueにありますが、現状Spring Boot フレームワークでは提供されておらず少しトリッキーです。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>MySQL Connector/J 8.0.23 でタイムゾーン変換メカニズムが変更になった</title>
      <link>https://yukihane.github.io/blog/202104/29/mysql-connector-j-8.0.23/</link>
      <pubDate>Wed, 28 Apr 2021 15:55:52 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202104/29/mysql-connector-j-8.0.23/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;MySQL Connector/J &lt;code&gt;8.0.23&lt;/code&gt; でタイムゾーン変換のメカニズムが変わりました(Spring Boot では &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.3.9.RELEASE/reference/html/appendix-dependency-versions.html#dependency-versions&#34;&gt;&lt;code&gt;2.3.9&lt;/code&gt;&lt;/a&gt;以降, &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.4.3/reference/html/appendix-dependency-versions.html#dependency-versions&#34;&gt;&lt;code&gt;2.4.3&lt;/code&gt;&lt;/a&gt;以降でこれを採用しています)。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;quoteblock&#34;&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;Important Change&lt;/strong&gt;: A new mechanism has been introduced for users to configure how time zone conversions should occur when time instants are saved to or retrieved from a server by Connector/J.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;attribution&#34;&gt;&#xA;— &lt;a href=&#34;https://dev.mysql.com/doc/relnotes/connector-j/8.0/en/news-8-0-23.html&#34;&gt;MySQL :: MySQL Connector/J 8.0 Release Notes :: Changes in MySQL Connector/J 8.0.23 (2021-01-18, General Availability)&lt;/a&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>ガバガバOIDCモックサーバを作る</title>
      <link>https://yukihane.github.io/blog/202101/30/gava-oidc-idp/</link>
      <pubDate>Sat, 30 Jan 2021 06:29:06 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202101/30/gava-oidc-idp/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;OIDCフローの調査などで本物でないOIDC IdP Mock Serverが欲しくなったので検索してみました。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.google.com/search?q=oidc+mock+server&#34;&gt;世に数多あるよう&lt;/a&gt;に見えたのですが、結構真面目に認証処理してたりして、ちょっとオーバースペックだと感じたので自作することにしました。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yukihane/gava-idp&#34;&gt;gava-idp&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Boot の CORS 設定を全許可する</title>
      <link>https://yukihane.github.io/blog/202101/24/spring-boot-cors-permit-all/</link>
      <pubDate>Sun, 24 Jan 2021 13:59:39 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202101/24/spring-boot-cors-permit-all/</guid>
      <description>&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/a/65867566/4506703&#34;&gt;How to configure CORS in a Spring Boot + Spring Security application?&lt;/a&gt; - Stack Overflow&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Spring Boot のリファレンス &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#boot-features-cors&#34;&gt;4.7.1. The “Spring Web MVC Framework” &amp;gt; CORS Support&lt;/a&gt; を見ると、次のように設定すれば良いように見えます。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Sessionをインメモリで利用する</title>
      <link>https://yukihane.github.io/blog/202101/24/spring-session-in-memory/</link>
      <pubDate>Sun, 24 Jan 2021 13:31:55 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202101/24/spring-session-in-memory/</guid>
      <description>&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/q/48906697/4506703&#34;&gt;What should be a replacement for StoreType.HASH_MAP in spring-boot 2&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;昔は &lt;code&gt;spring.session.store-type&lt;/code&gt; の選択肢に &lt;code&gt;hash_map&lt;/code&gt; というものがあったようですが、現在は存在しません。(ちなみに &lt;code&gt;none&lt;/code&gt; は Spring Session を利用しない、という意味になるようで、挙動が変わってしまいます( &lt;code&gt;JSESSIONID&lt;/code&gt; と &lt;code&gt;SESSIONID&lt;/code&gt; とか))&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>ControllerでUnauthorizedExceptionを投げると401でなく403になる</title>
      <link>https://yukihane.github.io/blog/202101/23/throw-unauthorizedexception-in-controller/</link>
      <pubDate>Sat, 23 Jan 2021 14:14:04 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202101/23/throw-unauthorizedexception-in-controller/</guid>
      <description>&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/q/65757377/4506703&#34;&gt;Authentication handling in Spring boot 2.x with WebSecurityConfigurerAdapter&lt;/a&gt; - Stack Overflow&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-security/blob/5.3.3.RELEASE/web/src/main/java/org/springframework/security/web/authentication/Http403ForbiddenEntryPoint.java#L38-L39&#34;&gt;&lt;code&gt;Http403ForbiddenEntryPoint&lt;/code&gt;&lt;/a&gt; がデフォルトで設定されているため、 &lt;a href=&#34;https://github.com/spring-projects/spring-security/blob/5.3.3.RELEASE/web/src/main/java/org/springframework/security/web/access/ExceptionTranslationFilter.java#L51-L52&#34;&gt;&lt;code&gt;ExceptionTranslationFilter&lt;/code&gt;&lt;/a&gt; において &lt;a href=&#34;https://github.com/spring-projects/spring-security/blob/5.3.3.RELEASE/web/src/main/java/org/springframework/security/web/access/ExceptionTranslationFilter.java#L169&#34;&gt;&lt;code&gt;AuthenticationException&lt;/code&gt; のサブクラス&lt;/a&gt;は全て &lt;code&gt;403&lt;/code&gt; になっている模様。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;認証通った上でunauthorizedってことはforbiddenなんだよな？ということでしょうか。…この言い方だと全然ニュアンス伝わらないか。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Boot 2.4.1-&gt;2.4.2アップグレードで発生した問題メモ</title>
      <link>https://yukihane.github.io/blog/202101/21/ploblem-in-springboot2.4.2/</link>
      <pubDate>Thu, 21 Jan 2021 15:51:37 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202101/21/ploblem-in-springboot2.4.2/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Spring Framework 5.3.3 で対応された&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-framework/issues/26282&#34;&gt;Update OncePerRequestFilter.isAsyncDispatch to use HttpServletRequest.getDispatcherType() #26282&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-framework/commit/499be70a717b8d20c544bc2eac4fe5dacedc7f28#diff-62abb34de9b72d1c359ee169fb30164f7cc9e8759e5f2a46dbae111ecfa29c9cR148&#34;&gt;コード差分&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;の影響で、 &lt;code&gt;HttpServletRequest#getDispatcherType()&lt;/code&gt; メソッドが呼ばれるようになっています。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;これにより、 &lt;code&gt;HttpServletRequest&lt;/code&gt; をモック化して実行していたテストケースが(想定外のメソッド呼び出しで &lt;code&gt;null&lt;/code&gt; を返すため)失敗するようになっていました。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Boot 2.3.5 で MapStruct を利用しているプロジェクトのビルドが失敗した</title>
      <link>https://yukihane.github.io/blog/202011/14/mapstruct-with-spring-boot-2.3.5/</link>
      <pubDate>Sat, 14 Nov 2020 07:41:01 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202011/14/mapstruct-with-spring-boot-2.3.5/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;調査したところSpring Bootの問題と言うよりは、Lombokのバージョンが &lt;code&gt;1.18.12&lt;/code&gt; から &lt;code&gt;1.18.16&lt;/code&gt; に上がったことによる非互換性の問題でした。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Lombokのchangelogに説明があります:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>claimとscopeを追加して取得してみる</title>
      <link>https://yukihane.github.io/blog/202009/04/oidc-add-claim-and-scope/</link>
      <pubDate>Thu, 03 Sep 2020 23:24:39 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202009/04/oidc-add-claim-and-scope/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Keycloak上で新しいclaimと、それを取得できる新しいscopeを定義し、Spring Securityを使って参照してみます。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://yukihane.github.io/blog/202007/21/hello-oidc-with-keycloak/&#34;&gt;KeycloakをIdPにしてSpring Security OAuth 2.0 Login/Client を試してみる&lt;/a&gt; で作成したコードをベースにしています。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Security: OIDC の redirect_uri を変更する</title>
      <link>https://yukihane.github.io/blog/202009/04/oidc-change-redirect-uri/</link>
      <pubDate>Thu, 03 Sep 2020 22:50:21 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202009/04/oidc-change-redirect-uri/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://yukihane.github.io/blog/202007/21/hello-oidc-with-keycloak/&#34;&gt;KeycloakをIdPにしてSpring Security OAuth 2.0 Login/Client を試してみる&lt;/a&gt; で作成したコードに対して、 カスタム &lt;code&gt;redirect_uri&lt;/code&gt; の設定を行ってみます。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;今回のコードはこちら:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yukihane/hello-java/tree/master/spring/oidc/oidc-change-redirect-uri&#34; class=&#34;bare&#34;&gt;https://github.com/yukihane/hello-java/tree/master/spring/oidc/oidc-change-redirect-uri&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_変更手順&#34;&gt;変更手順&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;sect2&#34;&gt;&#xA;&lt;h3 id=&#34;_keycloak_登録情報の変更&#34;&gt;KeyCloak 登録情報の変更&lt;/h3&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://yukihane.github.io/blog/202007/21/hello-oidc-with-keycloak/&#34;&gt;前回のページ&lt;/a&gt; を参考に、 &amp;#34;Valid Redirect URIs&amp;#34; の値を今回変更するURL &lt;strong&gt;http://localhost:8080/my_redirect_uri&lt;/strong&gt; に更新します。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>DevToolsを組み込んでいると再起動してもsessionが引き継がれる</title>
      <link>https://yukihane.github.io/blog/202009/02/spring-boot-session-take-over-on-restart-with-devtools/</link>
      <pubDate>Tue, 01 Sep 2020 18:46:13 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202009/02/spring-boot-session-take-over-on-restart-with-devtools/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Spring Boot開発中、再起動するとsessionは消失すると思いこんでいたのですが、どうも引き継がれているように見えて混乱しました。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;その後、調査してみると &lt;code&gt;server.servlet.session.persistent&lt;/code&gt; プロパティで再起動時セッションを破棄するか保持するかを設定できることがわかりました。ただし、デフォルト値は &lt;code&gt;false&lt;/code&gt; で、もちろんデフォルトからは変更していません(存在を知らなかったので)。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>gradle bootRun でプロファイルを指定するには？</title>
      <link>https://yukihane.github.io/blog/202008/30/gradle-bootrun-parameter/</link>
      <pubDate>Sat, 29 Aug 2020 23:16:09 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202008/30/gradle-bootrun-parameter/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;code&gt;gradle bootRun&lt;/code&gt; を実行する際にアクティブ化するプロファイルの指定を行いたかったのですが、ぱっと思いつかなかったのでメモ。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;まず、&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre class=&#34;highlight&#34;&gt;&lt;code&gt;gradle bootRun -Dprofiles.active=myproile&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;はうまくいきません。`profiles.active`システムプロパティは (アプリケーションでなく) Gradle に渡されるためです。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>openapi-generaterで生成したcontrollerにカスタム引数を追加する</title>
      <link>https://yukihane.github.io/blog/202008/30/openapi-spring-mvc-handler-args/</link>
      <pubDate>Sat, 29 Aug 2020 19:23:06 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202008/30/openapi-spring-mvc-handler-args/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://yukihane.github.io/blog/202008/23/openapi-generator/&#34;&gt;openapi generator を Spring Boot で利用してみる&lt;/a&gt; で openapi-generator を用いて Spring MVC のコントローラ(のインタフェース)を自動生成してみました。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;その後、これを実際に利用してみて気づいたのですが、ハンドラ(controllerのメソッド)に独自の引数を生やしたいことが多く、このままだと非常に不便です。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>openapi generator を Spring Boot で利用してみる</title>
      <link>https://yukihane.github.io/blog/202008/23/openapi-generator/</link>
      <pubDate>Sun, 23 Aug 2020 05:09:07 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202008/23/openapi-generator/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_今回の成果物&#34;&gt;今回の成果物&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yukihane/hello-java/tree/master/spring/openapi-sample&#34; class=&#34;bare&#34;&gt;https://github.com/yukihane/hello-java/tree/master/spring/openapi-sample&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_設定&#34;&gt;設定&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;sect2&#34;&gt;&#xA;&lt;h3 id=&#34;_build_gradle&#34;&gt;build.gradle&lt;/h3&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-gradle-plugin&#34;&gt;openapi-generator-gradle-plugin&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/spring.md&#34;&gt;spring generator&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;辺りを参考にしています。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;title&#34;&gt;build.gradle&lt;/div&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;plugins {&#xA;    id &amp;#39;eclipse&amp;#39;&#xA;    id &amp;#39;org.openapi.generator&amp;#39; version &amp;#39;4.3.1&amp;#39;&#xA;}&#xA;&#xA;ext {&#xA;    openApiOutputDir = &amp;#34;$rootDir/build/generated/openapi&amp;#34;&#xA;}&#xA;&#xA;sourceSets.main.java.srcDirs += [&amp;#34;$openApiOutputDir/src/main/java&amp;#34;]&#xA;&#xA;dependencies {&#xA;    // これらは自動生成クラスが import しているので必要&#xA;    implementation &amp;#39;org.springframework.boot:spring-boot-starter-validation&amp;#39;&#xA;    implementation &amp;#39;org.openapitools:jackson-databind-nullable:0.2.1&amp;#39;&#xA;    compileOnly &amp;#39;io.swagger:swagger-annotations:1.6.2&amp;#39;&#xA;}&#xA;&#xA;openApiGenerate {&#xA;    generatorName = &amp;#39;spring&amp;#39;&#xA;    inputSpec = &amp;#34;$rootDir/specs/test.yml&amp;#34;&#xA;    outputDir = &amp;#34;$openApiOutputDir&amp;#34;&#xA;    apiPackage = &amp;#39;org.openapi.example.api&amp;#39;&#xA;    modelPackage = &amp;#39;org.openapi.example.model&amp;#39;&#xA;    configOptions = [&#xA;        dateLibrary: &amp;#39;java8&amp;#39;,&#xA;        interfaceOnly: &amp;#39;true&amp;#39;,&#xA;        skipDefaultInterface: &amp;#39;true&amp;#39;,&#xA;    ]&#xA;}&#xA;&#xA;compileJava.dependsOn tasks.openApiGenerate&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Security OAuth 2.0 Login を自動テストする</title>
      <link>https://yukihane.github.io/blog/202008/05/spring-boot-oidc-testing/</link>
      <pubDate>Tue, 04 Aug 2020 21:39:37 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202008/05/spring-boot-oidc-testing/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://yukihane.github.io/blog/202007/21/hello-oidc-with-keycloak/&#34;&gt;KeycloakをIdPにしてSpring Security OAuth 2.0 Login/Client を試してみる&lt;/a&gt; で作成したプログラムの自動テスト方法です。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;今回のコードも前回と同じく次のディレクトリにあります:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yukihane/hello-java/tree/master/spring/oidc-example&#34; class=&#34;bare&#34;&gt;https://github.com/yukihane/hello-java/tree/master/spring/oidc-example&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;まず結論なのですが、リファレンスに説明がありますのでここを参照しましょう、ということになります:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>GradleでSpring Bootプロジェクトを作成してSTS(Eclipse)でインポートする手順</title>
      <link>https://yukihane.github.io/blog/202007/26/spring-boot-gradle-eclipse/</link>
      <pubDate>Sat, 25 Jul 2020 18:11:15 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202007/26/spring-boot-gradle-eclipse/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://start.spring.io/&#34;&gt;Spring Initializr&lt;/a&gt;を使ってGradle形式でプロジェクトを作成した場合、どうやってSTS(Eclipse)へインポートするのか逡巡しました。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>KeycloakをIdPにしてSpring Security OAuth 2.0 Login/Client を試してみる</title>
      <link>https://yukihane.github.io/blog/202007/21/hello-oidc-with-keycloak/</link>
      <pubDate>Mon, 20 Jul 2020 18:54:23 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202007/21/hello-oidc-with-keycloak/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Spring Boot で Spring Security OAuth 2.0 &lt;a href=&#34;https://docs.spring.io/spring-security/site/docs/5.3.3.RELEASE/reference/html5/#oauth2login&#34;&gt;Login&lt;/a&gt; / &lt;a href=&#34;https://docs.spring.io/spring-security/site/docs/5.3.3.RELEASE/reference/html5/#oauth2client&#34;&gt;Client&lt;/a&gt; を利用する手順をまとめます。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;また、認可サーバ(IdP)にはローカルで立てたKeycloakを用いますのでそちらのセットアップ手順も記載します。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Security OAuth 2.0 Client の auto-configuration</title>
      <link>https://yukihane.github.io/blog/202007/20/spring-security-oauth-2.0-client/</link>
      <pubDate>Mon, 20 Jul 2020 06:36:51 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202007/20/spring-security-oauth-2.0-client/</guid>
      <description>&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-boot/blob/v2.3.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/servlet/OAuth2ClientAutoConfiguration.java&#34;&gt;&lt;code&gt;OAuth2ClientAutoConfiguration&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;上記のクラスが &lt;code&gt;Import&lt;/code&gt; しているもの(など):&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-boot/blob/v2.3.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/servlet/OAuth2ClientRegistrationRepositoryConfiguration.java&#34;&gt;&lt;code&gt;OAuth2ClientRegistrationRepositoryConfiguration&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;ClientRegistrationRepository&lt;/code&gt; bean 定義。&lt;/p&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-boot/blob/v2.3.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientProperties.java&#34;&gt;&lt;code&gt;OAuth2ClientProperties&lt;/code&gt;&lt;/a&gt;(&lt;code&gt;spring.security.oauth2.client&lt;/code&gt;)プロパティから定義を取得して生成するインメモリレジストリを生成。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-boot/blob/v2.3.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/servlet/OAuth2WebSecurityConfiguration.java&#34;&gt;&lt;code&gt;OAuth2WebSecurityConfiguration&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-security/blob/5.3.3.RELEASE/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/OAuth2AuthorizedClientService.java&#34;&gt;&lt;code&gt;OAuth2AuthorizedClientService&lt;/code&gt;&lt;/a&gt; bean 定義。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-security/blob/5.3.3.RELEASE/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/web/OAuth2AuthorizedClientRepository.java&#34;&gt;&lt;code&gt;OAuth2AuthorizedClientRepository&lt;/code&gt;&lt;/a&gt; bean 定義。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; デフォルト実装。&lt;/p&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;全てのリクエストに authenticated を要求する。 oauth2Login, oauth2Client 有効化。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>`WebClient` の 覚書</title>
      <link>https://yukihane.github.io/blog/202007/20/webclientbuilder/</link>
      <pubDate>Sun, 19 Jul 2020 23:26:51 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202007/20/webclientbuilder/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;code&gt;RestTemplateBuilder&lt;/code&gt; の &lt;code&gt;Bean&lt;/code&gt; がsingleton-socpeかつちょっと変態的なインスタンス生成を行っていたので驚いた、というエントリを昔書きました:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://yukihane.github.io/posts/201912/10/resttemplatebuilder/&#34;&gt;RestTemplateBuilderに関する覚書&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;ところで、現時点で &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/5.2.7.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html&#34;&gt;&lt;code&gt;RestTemplate&lt;/code&gt; は既に maintenance mode&lt;/a&gt; なので、新規実装に用いるのは忍びないなあ、と思い、 &lt;code&gt;WebClient&lt;/code&gt; を利用する前提で薦めることにしました。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Bootブックレビュー Spring Boot 2 入門: 基礎から実演まで</title>
      <link>https://yukihane.github.io/blog/202007/15/spring-boot-books-review/</link>
      <pubDate>Wed, 15 Jul 2020 14:28:39 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202007/15/spring-boot-books-review/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Kindle Unlimited でいくつかのSpring Framework/Spring Boot 本が読めることに気づきました。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;もし入門本として有用なものがあれば初心者の方に薦めていきたいなと考え、今回それらを呼んでみましたので感想を記録します。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring SecurityのOAuth2.0関連の歴史を調査し実装してみた</title>
      <link>https://yukihane.github.io/blog/202007/15/history-of-spring-oauth2-libraries/</link>
      <pubDate>Tue, 14 Jul 2020 23:47:11 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202007/15/history-of-spring-oauth2-libraries/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Qiita に昔(2019年中頃)書いていた資料を転記し忘れていたので構成を見直してアップロードし直します。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;2020年現在の状況はまた更新されています。次のURLを参照してください。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Boot で Controller と Repositoryを同じクラスで併用する</title>
      <link>https://yukihane.github.io/blog/202007/11/same-class-controller-and-repository/</link>
      <pubDate>Sat, 11 Jul 2020 00:41:41 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202007/11/same-class-controller-and-repository/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;…なんてことができたんですね。こんなコード:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre&gt;@RestController&#xA;@Repository&#xA;public interface VehicleInterface extends JpaRepository&amp;lt;vehicle, Long&amp;gt; {&#xA;&#xA;    @Query(&amp;#34;select u from vehicle u where u.year = :year&amp;#34;)&#xA;    @RequestMapping(value = &amp;#34;/vehicles&amp;#34;, method = RequestMethod.GET)&#xA;    List&amp;lt;vehicle&amp;gt; findByYearEquals(@Param(&amp;#34;year&amp;#34;) Integer year);&#xA;}&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://localhost:8080/vehicles?year=2010&#34; class=&#34;bare&#34;&gt;http://localhost:8080/vehicles?year=2010&lt;/a&gt; 的なURLでアクセスします。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yukihane/stackoverflow-qa/tree/master/so62843109&#34;&gt;サンプルコード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/q/62843109/4506703&#34;&gt;ネタ元&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring-BootでJSPを使う</title>
      <link>https://yukihane.github.io/blog/202007/11/jsp-on-springboot/</link>
      <pubDate>Fri, 10 Jul 2020 21:54:33 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202007/11/jsp-on-springboot/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://start.spring.io/&#34; class=&#34;bare&#34;&gt;https://start.spring.io/&lt;/a&gt; で depencencies に &lt;code&gt;Spring Web&lt;/code&gt; を追加して生成します。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;生成された &lt;code&gt;pom.xml&lt;/code&gt; に次の依存関係を追加します:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;title&#34;&gt;pom.xml&lt;/div&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;org.apache.tomcat.embed&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;tomcat-embed-jasper&amp;lt;/artifactId&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;!-- 必要に応じて --&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;jstl&amp;lt;/artifactId&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;code&gt;appliction.properties&lt;/code&gt; に次を追加します:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;title&#34;&gt;application.properties&lt;/div&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;spring.mvc.view.prefix=/WEB-INF/view/&#xA;spring.mvc.view.suffix=.jsp&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;code&gt;src/main/webapp/WEB-INF/view/&lt;/code&gt; の下に JSP ファイルを作成します。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Boot でなるべく依存関係を小さくしてWebMVCを使ってみる</title>
      <link>https://yukihane.github.io/blog/202007/02/minimal-webmvc-with-springboot/</link>
      <pubDate>Thu, 02 Jul 2020 21:11:04 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202007/02/minimal-webmvc-with-springboot/</guid>
      <description>&lt;p&gt;特に実用性とかは考えていない。何となくやってみたというだけ。&lt;/p&gt;&#xA;&lt;h2 id=&#34;動かしたいやつ&#34;&gt;動かしたいやつ&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java:MyController.java&#34; data-lang=&#34;java:MyController.java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@RestController&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyController&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@GetMapping&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h2 id=&#34;設定&#34;&gt;設定&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml:pom.xml&#34; data-lang=&#34;xml:pom.xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-webmvc&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.tomcat.embed&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;tomcat-embed-core&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java:WebConfig.java&#34; data-lang=&#34;java:WebConfig.java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Configuration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@EnableWebMvc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;WebConfig&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ServletWebServerFactory&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;servletWebServerFactory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TomcatServletWebServerFactory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DispatcherServlet&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;dispatcherServlet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DispatcherServlet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java:MyApplication.java&#34; data-lang=&#34;java:MyApplication.java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@ComponentScan&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyApplication&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&#x9;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SpringApplication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyApplication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>${...}と#{...}の違い</title>
      <link>https://yukihane.github.io/blog/202007/02/difference-between-doller-and-hash/</link>
      <pubDate>Thu, 02 Jul 2020 00:31:47 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202007/02/difference-between-doller-and-hash/</guid>
      <description>&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/a/5322737/4506703&#34;&gt;Spring Expression Language (SpEL) with @Value: dollar vs. hash ($ vs. #)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;より。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;code&gt;${…​}&lt;/code&gt; は単なるプロパティのプレースホルダ。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;code&gt;#{…​}&lt;/code&gt; は &lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#expressions&#34;&gt;Spring Expression Language(SpEL)&lt;/a&gt; の構文。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;プレースホルダは置き換えるだけだけれども、SpELはもっと複雑なこともできる(Javaのメソッドを呼び出したりとか)。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring 2.3.0 で時刻オフセットの書式コロン付き&#43;09:00みたいに変わっとるやん</title>
      <link>https://yukihane.github.io/blog/202006/30/json-datetime-format-changed-on-springboot-2.3/</link>
      <pubDate>Tue, 30 Jun 2020 21:09:44 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202006/30/json-datetime-format-changed-on-springboot-2.3/</guid>
      <description>&lt;p&gt;正確には jackson-databind 2.11.0 で。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.11#changes-behavior&#34;&gt;jackson 2.11 リリースノート&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/FasterXML/jackson-databind/issues/2643&#34;&gt;Change default textual serialization of &lt;code&gt;java.util.Date&lt;/code&gt;/&lt;code&gt;Calendar&lt;/code&gt; to include colon in timezone offset #2643&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.2.8.RELEASE/reference/htmlsingle/#dependency-versions-coordinates&#34;&gt;このへん&lt;/a&gt;見ると分かるけど、Spring Boot 2.2 系列は jackson-databind 2.10.x が採用されていて、 &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/htmlsingle/#dependency-versions-coordinates&#34;&gt;2.3.0&lt;/a&gt; で 2.11.0 が採用されている。&lt;/p&gt;&#xA;&lt;p&gt;コード:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@GetMapping&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;結果(2.2.8):&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring MVCにはJPA EntityのIDからエンティティオブジェクトに変換する機能がある(が、2.3.1では機能しない)</title>
      <link>https://yukihane.github.io/blog/202006/20/spring-boot-thymeleaf-converts-id-to-entity/</link>
      <pubDate>Sat, 20 Jun 2020 08:16:28 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202006/20/spring-boot-thymeleaf-converts-id-to-entity/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;追記: 2020-07-24にリリースされた2.3.2, 2.2.9 でこの問題は修正されました。ただし、2.1.16では未修正のままのようでした。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Spring Bootは &lt;a href=&#34;https://docs.spring.io/spring-data/commons/docs/current/reference/html/&#34;&gt;Spring Data Commons&lt;/a&gt; を利用して、Thymeleaf(など)からのリクエストからオブジェクトへ変換する際、Sprint Data JPAと連携して、IDからエンティティオブジェクトへマッピングする機能があります(&lt;a href=&#34;https://docs.spring.io/spring-data/commons/docs/2.3.1.RELEASE/reference/html/#mapping.property-population&#34;&gt;3.2. Property population&lt;/a&gt;)。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Security OAuth 2.0 Client(OAuth 2.0 Login)でトークンの管理をしているのはOAuth2AuthorizedClientService</title>
      <link>https://yukihane.github.io/blog/202006/17/oauth2authorizedclientservice/</link>
      <pubDate>Wed, 17 Jun 2020 09:24:57 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202006/17/oauth2authorizedclientservice/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;私も今回の質問(本文末参照)を見たとき少しの間勘違いしてしまったのですが、OAuth2.0のクライアントがどこで各リソースオーナーのトークンを管理しているかと言うと、アプリケーションコンテキストであって、ユーザのセッションコンテキストなわけが無いですよね…&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring BootのGradleでのデバッグ実行方法</title>
      <link>https://yukihane.github.io/blog/202006/15/spring-boot-debugging/</link>
      <pubDate>Mon, 15 Jun 2020 07:42:25 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202006/15/spring-boot-debugging/</guid>
      <description>&lt;div class=&#34;literalblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre&gt;gradle bootRun --debug-jvm&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;というように、&lt;code&gt;--debug-jvm&lt;/code&gt; オプションを付与すれば良いようです。&#xA;これで、デバッガ接続の待受状態で起動します。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/gradle-plugin/api/org/springframework/boot/gradle/tasks/run/BootRun.html&#34;&gt;&lt;code&gt;BootRun&lt;/code&gt;&lt;/a&gt; は &lt;a href=&#34;https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/JavaExec.html&#34;&gt;&lt;code&gt;JavaExec&lt;/code&gt;&lt;/a&gt; を継承していますが、この &lt;code&gt;--debug-jvm&lt;/code&gt; は後者のリファレンスで言及されています。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>So many UserDetailsService samples considered harmful for beginners</title>
      <link>https://yukihane.github.io/blog/202006/13/userdetailsservice-samples-considered-harmful-for-biginners/</link>
      <pubDate>Sat, 13 Jun 2020 21:07:40 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202006/13/userdetailsservice-samples-considered-harmful-for-biginners/</guid>
      <description>&lt;p&gt;やっぱり一発目の Spring Security やってみたで UserDetailsService 使うのは止めようず。So many UserDetailsService samples considered harmful for beginners.&lt;/p&gt;&#xA;&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://qiita.com/yukihane/items/865db9e7279cf0e588a7&#34;&gt;ちょっと待って！その UserDetails、本当に必要ですか？&lt;/a&gt;で書いたことの繰り返しなんですけども。&lt;/p&gt;</description>
    </item>
    <item>
      <title>UserDetailsServiceは誤解されている</title>
      <link>https://yukihane.github.io/blog/202006/12/userdetailsservice-conidered-harmful/</link>
      <pubDate>Fri, 12 Jun 2020 09:37:26 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202006/12/userdetailsservice-conidered-harmful/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;サンプルコード等だけを見ていると &lt;code&gt;UserDetailsService&lt;/code&gt; を利用することがSpring Securityの唯一の認証処理実現方法だと誤解しがちですが、 &lt;code&gt;UserDetailsService&lt;/code&gt; はむしろユーティリティライブラリくらいの立ち位置で、別に利用しなくても実現可能です。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Bootでは -parameters オプションは有効化されている</title>
      <link>https://yukihane.github.io/blog/202002/20/spring-boot-compiler-parameters/</link>
      <pubDate>Thu, 20 Feb 2020 06:25:59 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202002/20/spring-boot-compiler-parameters/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;MyBatisの設定項目として &lt;a href=&#34;https://github.com/mybatis/mybatis-3/issues/549#issuecomment-218483088&#34;&gt;&lt;code&gt;useActualParamName&lt;/code&gt;&lt;/a&gt; というものがあります。マニュアルの説明によると、&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;quoteblock&#34;&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;ステートメントの引数を参照する際、メソッドシグネチャで宣言されている名前で参照できるようにします。 このオプションを有効にする場合、プロジェクトを Java 8 （コンパイラオプション -parameters 付き）でコンパイルする必要があります。 (導入されたバージョン: 3.4.1)&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring BootのRestTemplateで text/plain;Windows-31J なRESTレスポンスを処理する</title>
      <link>https://yukihane.github.io/blog/202001/26/resttemplate-with-illformed-json/</link>
      <pubDate>Sun, 26 Jan 2020 14:48:47 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202001/26/resttemplate-with-illformed-json/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_要旨&#34;&gt;要旨&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;JSONを返してくるのだけれどMIME typeが &lt;code&gt;text/plain;charset=Windows-31J&lt;/code&gt; なレスポンスを、RestTemplateで扱いたい。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;literalblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre&gt;@GetMapping(produces = &amp;#34;text/plain;charset=Windows-31J&amp;#34;)&#xA;public String response() {&#xA;    return &amp;#34;{\&amp;#34;text\&amp;#34;: \&amp;#34;こんにちは世界\&amp;#34; }&amp;#34;;&#xA;}&lt;/pre&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>RestTemplateBuilderに関する覚書</title>
      <link>https://yukihane.github.io/blog/201912/10/resttemplatebuilder/</link>
      <pubDate>Tue, 10 Dec 2019 20:41:15 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/201912/10/resttemplatebuilder/</guid>
      <description>&lt;h1 id=&#34;resttemplatebuilder&#34;&gt;&lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/web/client/RestTemplateBuilder.html&#34;&gt;RestTemplateBuilder&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-framework/blob/v5.2.2.RELEASE/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java&#34;&gt;RestTemplate&lt;/a&gt; は Spring Framework(spring-web)だけれども &lt;a href=&#34;https://github.com/spring-projects/spring-boot/blob/v2.2.2.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java&#34;&gt;RestTemplateBuilder&lt;/a&gt; は Spring Boot。&lt;/li&gt;&#xA;&lt;li&gt;Java の世界の &lt;code&gt;なんちゃらBuilder&lt;/code&gt; (&lt;a href=&#34;https://docs.oracle.com/javase/jp/11/docs/api/java.base/java/lang/StringBuilder.html&#34;&gt;StringBuilder&lt;/a&gt;とか Lombok の&lt;a href=&#34;https://projectlombok.org/features/Builder&#34;&gt;&lt;code&gt;Builder&lt;/code&gt;アノテーション&lt;/a&gt;とか、ざっくり総称で Effective Java 版 Builder とでも呼ぶべきか)の使い方は、「まず &lt;code&gt;builder&lt;/code&gt; のインスタンスを生成します」から始まるので &lt;code&gt;RestTempalteBuilder&lt;/code&gt; もそれだと思っていた。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;つまり、このクラスインスタンスは Spring Boot のデフォルト状態でインジェクション可能だけれども、このインジェクションされた&lt;code&gt;RestTempalteBuilder&lt;/code&gt;インスタンスのスコープは(Spring のデフォルトであるところの)singleton-scope &lt;strong&gt;ではない&lt;/strong&gt; と思っていた。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;だって&lt;code&gt;builder&lt;/code&gt;インスタンスが singleton-scope なら、ある&lt;code&gt;bean&lt;/code&gt;で &lt;code&gt;builder&lt;/code&gt;に設定したものが他所の&lt;code&gt;bean&lt;/code&gt;にも波及しちゃうじゃない。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;けど&lt;a href=&#34;https://github.com/spring-projects/spring-boot/blob/v2.2.2.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/client/RestTemplateAutoConfiguration.java#L56-L69&#34;&gt;&lt;code&gt;ResttemplateAutoConfiguration&lt;/code&gt;の Bean 定義部分&lt;/a&gt;どう見ても singleton-scope にしか見えない。何か自分の知らない記法(あるいは暗黙的解釈)がなにかまだあるのか？ &lt;strong&gt;また&lt;/strong&gt; 何か Spring マジックが発動しているのか…？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;と思ってたけど、&lt;code&gt;RestTemplateBuilder&lt;/code&gt;の状態設定メソッド(&lt;a href=&#34;https://github.com/spring-projects/spring-boot/blob/v2.2.2.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L141-L668&#34;&gt;このへん&lt;/a&gt;)見て気づいた、 &lt;strong&gt;設定メソッドの中で &lt;code&gt;new RestTemplateBuilder()&lt;/code&gt; やっとるんかーい！&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Boot のプロパティではkebab-formatが推奨されている</title>
      <link>https://yukihane.github.io/blog/201911/28/kebab-format-recommended-on-spring-boot-properties/</link>
      <pubDate>Thu, 28 Nov 2019 20:38:12 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/201911/28/kebab-format-recommended-on-spring-boot-properties/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Relaxed Binding 2.0&lt;/strong&gt; という仕組みにより&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spring.jpa.database-platform=mysql&#xA;spring.jpa.databasePlatform=mysql&#xA;spring.JPA.database_platform=mysql&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;いずれの形式でも正しくバインドできる。&lt;br /&gt;&#xA;が、公式ドキュメントからは一番上の &lt;code&gt;database-platform&lt;/code&gt; が推奨されているように読み取れる。&lt;/p&gt;&#xA;&lt;hr /&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-booT/wiki/Spring-Boot-Configuration-Binding#relaxed-binding&#34;&gt;Relaxed binding&lt;/a&gt; - Spring Boot Configuration Binding:&lt;/p&gt;</description>
    </item>
    <item>
      <title>MockMvc でURLエンコード済みのpathを渡したいときは new URI(...) を引数にする</title>
      <link>https://yukihane.github.io/blog/201910/29/encoded-url-passing-to-mockmvc/</link>
      <pubDate>Tue, 29 Oct 2019 20:36:42 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/201910/29/encoded-url-passing-to-mockmvc/</guid>
      <description>&lt;p&gt;OAuth2.0 の &lt;code&gt;redirect_uri&lt;/code&gt; をゴニョった実装をテストしたいときにハマった。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;mockMvc.perform(get(new URI(&amp;quot;/line/oauth/authorize?redirece_uri=https%3A%2F%2Fexample.com&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;ってやらないと二重にエンコードされてしまう。&lt;/p&gt;&#xA;&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-framework/issues/16067&#34;&gt;MockMvc needs to accept prepared URI with encoded URI path variables [SPR-11441] #16067&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-framework/blob/master/spring-test/src/test/java/org/springframework/test/web/servlet/samples/spr/EncodedUriTests.java&#34;&gt;EncodedUriTests.java&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>LINE Messaging API を試してみる</title>
      <link>https://yukihane.github.io/blog/201908/line-bot-sample/</link>
      <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/201908/line-bot-sample/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_準備&#34;&gt;準備&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;sect2&#34;&gt;&#xA;&lt;h3 id=&#34;_spring_boot_セットアップ&#34;&gt;Spring Boot セットアップ&lt;/h3&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://start.spring.io/&#34; class=&#34;bare&#34;&gt;https://start.spring.io/&lt;/a&gt; でテンプレートを作成して次の依存関係を追加します。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.linecorp.bot&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;line-bot-spring-boot&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;2.7.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;リポジトリ: &lt;a href=&#34;https://github.com/line/line-bot-sdk-java/tree/master/line-bot-spring-boot&#34; class=&#34;bare&#34;&gt;https://github.com/line/line-bot-sdk-java/tree/master/line-bot-spring-boot&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;sect2&#34;&gt;&#xA;&lt;h3 id=&#34;_heroku_セットアップ&#34;&gt;Heroku セットアップ&lt;/h3&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;今回は &lt;code&gt;linebotbeta&lt;/code&gt; というアプリケーション名にしました。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>LINE リッチメニューを試してみる</title>
      <link>https://yukihane.github.io/blog/201908/line-richmenu-sample/</link>
      <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/201908/line-richmenu-sample/</guid>
      <description>&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yukihane/hello-java/tree/master/line/richmenu-sample&#34; class=&#34;bare&#34;&gt;https://github.com/yukihane/hello-java/tree/master/line/richmenu-sample&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developers.line.biz/ja/docs/messaging-api/using-rich-menus/&#34;&gt;公式リファレンス&lt;/a&gt; に書いてある通りですが、リッチメニューを試してみました。&#xA;メニューをタップするとPostBackEventを送信します。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;botでハンドリングするために、 &lt;a href=&#34;https://himeji-cs.jp/blog2/blog/2019/08/line-bot-sample.html&#34;&gt;前回&lt;/a&gt; 作成した &lt;a href=&#34;https://github.com/yukihane/hello-java/tree/master/line/line-bot-sample&#34;&gt;bot&lt;/a&gt; に、PostBackEvent のハンドラを追加しています。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>LINEログイン機能を試してみる(Spring Boot 2.1.7/Spring Security 5.1.6)</title>
      <link>https://yukihane.github.io/blog/201908/line-login-sample/</link>
      <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/201908/line-login-sample/</guid>
      <description>&lt;div class=&#34;admonitionblock important&#34;&gt;&#xA;&lt;table&gt;&#xA;&lt;tbody&gt;&lt;tr&gt;&#xA;&lt;td class=&#34;icon&#34;&gt;&#xA;&lt;div class=&#34;title&#34;&gt;Important&lt;/div&gt;&#xA;&lt;/td&gt;&#xA;&lt;td class=&#34;content&#34;&gt;&#xA;本ページは Spring Boot 2.1.7 の頃のものですが、後続として 2.4.5 対応版があります: &lt;a href=&#34;https://yukihane.github.io/blog/202105/06/ling-login-202105/&#34;&gt;LINEログインを試してみる(Spring Boot 2.4.5/Spring Security 5.4.6)&lt;/a&gt; – 発火後忘失&#xA;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/tbody&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;hr/&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Spring SecurityのOAuth実装は &lt;a href=&#34;https://qiita.com/yukihane/items/fc97f888ecb6a6850ea7&#34;&gt;こちらに書いたとおり&lt;/a&gt; 歴史的経緯により複数存在しますが、 &lt;a href=&#34;https://start.spring.io/&#34; class=&#34;bare&#34;&gt;https://start.spring.io/&lt;/a&gt; の&#xA; Dependencies で &amp;#34;OAuth2 Client&amp;#34; を選択した場合に追加されるものは一番新しいSpring Securityの &lt;a href=&#34;https://docs.spring.io/spring-security/site/docs/5.1.6.RELEASE/reference/html/modules.html#spring-security-oauth2-client&#34;&gt;&lt;code&gt;spring-security-oauth2-client&lt;/code&gt;&lt;/a&gt; (及び &lt;code&gt;spring-security-oauth2-jose&lt;/code&gt;)でした。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>HerokuでSpringBootアプリを動かしてみる</title>
      <link>https://yukihane.github.io/blog/201908/hello-heroku-with-springboot/</link>
      <pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/201908/hello-heroku-with-springboot/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;最終的にはLINE platformのAPIを理解したいのですが、 &lt;a href=&#34;https://developers.line.biz/ja/docs/&#34;&gt;リファレンス&lt;/a&gt;を読んでいるとサンプルプログラム(サンプルbot)をHerokuにデプロイして試してみる、というような説明が多数あったので、Herokuについて理解しておこう、と考えました。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;そういった考えで、今回、単純なSpringBoot hello-worldアプリをHerokuにデプロイして接続確認してみることにしました。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Bootは、セキュリティフィルタBeanを作っている分だけ、無料で認証できちまうんだ</title>
      <link>https://yukihane.github.io/blog/201907/18/spring-boot-filter-bean/</link>
      <pubDate>Thu, 18 Jul 2019 20:34:56 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/201907/18/spring-boot-filter-bean/</guid>
      <description>&lt;h1 id=&#34;要約&#34;&gt;要約&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.1.6.RELEASE/reference/html/howto-embedded-web-servers.html#howto-add-a-servlet-filter-or-listener&#34;&gt;78.10 Add a Servlet, Filter, or Listener to an Application&lt;/a&gt;曰く。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;any &lt;code&gt;Servlet&lt;/code&gt; or &lt;code&gt;Filter&lt;/code&gt; beans are registered with the servlet container automatically.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Spring Security 使った自前の認証フィルタを &lt;code&gt;@Component&lt;/code&gt; 付けて作ったりなんかした際に意図しない URL path にも認証がかかってしまう。&lt;br /&gt;&#xA;んゴ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>h2-consoleとspring-boot-starter-securityと私</title>
      <link>https://yukihane.github.io/blog/201907/12/h2-console-on-spring-boot/</link>
      <pubDate>Fri, 12 Jul 2019 20:33:40 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/201907/12/h2-console-on-spring-boot/</guid>
      <description>&lt;h1 id=&#34;概要&#34;&gt;概要&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;spring-boot-starter-security&lt;/code&gt; を導入しても http://localhost:8080/h2-console にアクセスしたかった。&lt;/p&gt;&#xA;&lt;p&gt;作業結果: &lt;a href=&#34;https://github.com/yukihane/hello-java/tree/master/spring/h2-console-spring-security-example&#34;&gt;https://github.com/yukihane/hello-java/tree/master/spring/h2-console-spring-security-example&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;手順&#34;&gt;手順&lt;/h1&gt;&#xA;&lt;h2 id=&#34;h2-console-が使える依存関係を追加してプロジェクトセットアップ-8113d7&#34;&gt;h2-console が使える依存関係を追加してプロジェクトセットアップ &lt;a href=&#34;https://github.com/yukihane/hello-java/commit/8113d7bc552c11f3e1cf3d6e64fe97be922d2596&#34;&gt;8113d7&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-pom.xml&#34; data-lang=&#34;pom.xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-jdbc&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.h2database&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;h2&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span class=&#34;nt&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h2 id=&#34;h2-console-を表示してみる-1b16dc&#34;&gt;h2-console を表示してみる &lt;a href=&#34;https://github.com/yukihane/hello-java/commit/1b16dcc49ca9a83dd0a80b947800a63be0d39422&#34;&gt;1b16dc&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-application.properties&#34; data-lang=&#34;application.properties&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;spring.h2.console.enabled&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;spring.datasource.generate-unique-name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;false&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-schema.sql&#34; data-lang=&#34;schema.sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;greeting_table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;(注: &lt;code&gt;spring.datasource.generate-unique-name&lt;/code&gt; 設定は Spring Boot 2.3.0 からデフォルト値が変わったため必要になったもので、リンク先 Git リポジトリには含まれていません(&lt;a href=&#34;https://qiita.com/yukihane/items/2be37518f42525c8327d&#34;&gt;参考&lt;/a&gt;))&lt;/p&gt;</description>
    </item>
    <item>
      <title>spring-boot-starter-security を入れたら認証画面が！</title>
      <link>https://yukihane.github.io/blog/201907/04/spring-boot-and-spring-security/</link>
      <pubDate>Thu, 04 Jul 2019 20:32:21 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/201907/04/spring-boot-and-spring-security/</guid>
      <description>&lt;p&gt;&lt;code&gt;WebSecurityConfigurerAdapter#configure(HttpSecurity)&lt;/code&gt; で form 認証を有効化しているのでこれをディスる。&lt;br /&gt;&#xA;&lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt;を継承した Spring コンポーネントをスキャン対象に含めれば良い。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Bootで コンポーネント外からコンポーネントを取得したかった</title>
      <link>https://yukihane.github.io/blog/201906/01/spring-boot-component-out-of-container/</link>
      <pubDate>Sat, 01 Jun 2019 20:15:54 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/201906/01/spring-boot-component-out-of-container/</guid>
      <description>&lt;h1 id=&#34;動機&#34;&gt;動機&lt;/h1&gt;&#xA;&lt;p&gt;CDI で言うところの &lt;code&gt;CDI.current().getBeans(...)&lt;/code&gt; とか &lt;code&gt;CDI.current().select(...)&lt;/code&gt;とかそんな感じのことをやりたかった。&lt;/p&gt;&#xA;&lt;h1 id=&#34;参考リファレンス&#34;&gt;参考リファレンス&lt;/h1&gt;&#xA;&lt;p&gt;ドキュメントでは、やりたいことが書いてあるように見えたのはこのセクション&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Boot 2.1 でテスト時 @Bean を挿げ替えたかった</title>
      <link>https://yukihane.github.io/blog/201905/31/spring-boot-bean-on-testing/</link>
      <pubDate>Fri, 31 May 2019 20:14:41 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/201905/31/spring-boot-bean-on-testing/</guid>
      <description>&lt;h1 id=&#34;動機&#34;&gt;動機&lt;/h1&gt;&#xA;&lt;p&gt;ユニットテスト実行時に &lt;a href=&#34;https://docs.oracle.com/javase/jp/11/docs/api/java.base/java/time/Clock.html&#34;&gt;java.time.Clock&lt;/a&gt; を特定の時間に固定して再現性のあるテスト(現在の時刻に依存しないテスト)を作成したかった。&lt;/p&gt;&#xA;&lt;h1 id=&#34;考え方方針&#34;&gt;考え方/方針&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;@Configuration&lt;/code&gt; で &lt;code&gt;@Bean&lt;/code&gt; を定義して &lt;code&gt;Clock&lt;/code&gt; をインジェクションできるようにし、実装ではそれを用いる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>text/plain で JSON を投げつけてくるヤツに対処する</title>
      <link>https://yukihane.github.io/blog/201905/21/spring-boog-json-convert/</link>
      <pubDate>Tue, 21 May 2019 20:12:30 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/201905/21/spring-boog-json-convert/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://qiita.com/masato_ka/items/aa5f158a94eca1fcc42d&#34;&gt;RestTemplate でレスポンスの Content-Type を変更する。&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;の別解。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;@Autowired&#xA;private RestTemplateBuilder builder;&#xA;&#xA;...&#xA;    final MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();&#xA;    converter.setSupportedMediaTypes(Arrays.asList(MediaType.TEXT_PLAIN));&#xA;    final RestTemplate restTemplate = builder.additionalMessageConverters(converter).build();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;ちなみに上記のようにコンバータを明示的に設定しない場合だと次のような例外になる :&lt;/p&gt;</description>
    </item>
    <item>
      <title>Testing the Web Layer のコードを JUnit Jupiter にマイグレーションしてみる</title>
      <link>https://yukihane.github.io/blog/201904/16/migration-to-junit5/</link>
      <pubDate>Tue, 16 Apr 2019 20:06:33 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/201904/16/migration-to-junit5/</guid>
      <description>&lt;h1 id=&#34;概要&#34;&gt;概要&lt;/h1&gt;&#xA;&lt;p&gt;(追記: ここで試したのは&lt;code&gt;2.1.4.RELEASE&lt;/code&gt;時点のもの。&lt;code&gt;2.2.0.M3&lt;/code&gt;以降では &lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/14736&#34;&gt;#14736&lt;/a&gt;の通り JUnit5 がデフォルトになっている模様。)&lt;/p&gt;&#xA;&lt;p&gt;spring-boot-starter-test の JUnit5 対応はこちらの issue:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Validator(でラップされたBean Validation)のメッセージをi18nしたときの覚え書き</title>
      <link>https://yukihane.github.io/blog/201903/26/change-spring-validator-message/</link>
      <pubDate>Tue, 26 Mar 2019 20:04:13 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/201903/26/change-spring-validator-message/</guid>
      <description>&lt;h1 id=&#34;やりたかったこと&#34;&gt;やりたかったこと&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;BeanValidation のプロパティファイル &lt;a href=&#34;https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#validator-customconstraints-errormessage&#34;&gt;&lt;code&gt;ValidationMessages.properties&lt;/code&gt;&lt;/a&gt; でなく、 Spring のメッセージプロパティに統合したい。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring のメッセージプロパティとは？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Accept-Language&lt;/code&gt;ベースでメッセージを国際化したい。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;調べた&#34;&gt;調べた&lt;/h1&gt;&#xA;&lt;h2 id=&#34;spring-のメッセージプロパティファイルはどこ&#34;&gt;Spring のメッセージプロパティファイルはどこ？&lt;/h2&gt;&#xA;&lt;p&gt;これはキーワード &amp;ldquo;site:spring.io i18n message&amp;rdquo; でググるとすぐ見つかった。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
