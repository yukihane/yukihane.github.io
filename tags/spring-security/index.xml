<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring-Security on 発火後忘失</title>
    <link>https://yukihane.github.io/tags/spring-security/</link>
    <description>Recent content in Spring-Security on 発火後忘失</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Tue, 29 Jun 2021 20:00:43 +0000</lastBuildDate>
    <atom:link href="https://yukihane.github.io/tags/spring-security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Boot 2.5.0(Spring Security 5.5.0-M2)でremoteUserの値が変わった</title>
      <link>https://yukihane.github.io/blog/202106/30/spring-boot-remoteuser-is-changed/</link>
      <pubDate>Tue, 29 Jun 2021 20:00:43 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202106/30/spring-boot-remoteuser-is-changed/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;code&gt;HttpServletRequest#getRemoteUser()&lt;/code&gt; をログ出力(Tomcatの &lt;a href=&#34;https://tomcat.apache.org/tomcat-9.0-doc/config/valve.html#Access_Log_Valve/Attributes&#34;&gt;&lt;code&gt;%u&lt;/code&gt;&lt;/a&gt;)しているのですが、Spring Boot 2.5.0 から返ってくる値が変わったようです。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;どの変更が影響しているのか調べたところ、次のものが該当するようです。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>LINEログインを試してみる(Spring Boot 2.4.5/Spring Security 5.4.6)</title>
      <link>https://yukihane.github.io/blog/202105/06/ling-login-202105/</link>
      <pubDate>Thu, 06 May 2021 10:43:04 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202105/06/ling-login-202105/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://yukihane.github.io/blog/201908/line-login-sample/&#34;&gt;LINEログイン機能を試してみる&lt;/a&gt; – 発火後忘失&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;で、 Spring Boot 2.1.7 (Spring Security 5.1.6) を利用してLINEログインを行ってみました。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;本ドキュメントは、このコードをそのまま Spring Boot 2.4.5 へアップグレードしたところ上手く動かなかったので修正を行った記録です。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>ControllerでUnauthorizedExceptionを投げると401でなく403になる</title>
      <link>https://yukihane.github.io/blog/202101/23/throw-unauthorizedexception-in-controller/</link>
      <pubDate>Sat, 23 Jan 2021 14:14:04 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202101/23/throw-unauthorizedexception-in-controller/</guid>
      <description>&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/q/65757377/4506703&#34;&gt;Authentication handling in Spring boot 2.x with WebSecurityConfigurerAdapter&lt;/a&gt; - Stack Overflow&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-security/blob/5.3.3.RELEASE/web/src/main/java/org/springframework/security/web/authentication/Http403ForbiddenEntryPoint.java#L38-L39&#34;&gt;&lt;code&gt;Http403ForbiddenEntryPoint&lt;/code&gt;&lt;/a&gt; がデフォルトで設定されているため、 &lt;a href=&#34;https://github.com/spring-projects/spring-security/blob/5.3.3.RELEASE/web/src/main/java/org/springframework/security/web/access/ExceptionTranslationFilter.java#L51-L52&#34;&gt;&lt;code&gt;ExceptionTranslationFilter&lt;/code&gt;&lt;/a&gt; において &lt;a href=&#34;https://github.com/spring-projects/spring-security/blob/5.3.3.RELEASE/web/src/main/java/org/springframework/security/web/access/ExceptionTranslationFilter.java#L169&#34;&gt;&lt;code&gt;AuthenticationException&lt;/code&gt; のサブクラス&lt;/a&gt;は全て &lt;code&gt;403&lt;/code&gt; になっている模様。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;認証通った上でunauthorizedってことはforbiddenなんだよな？ということでしょうか。…この言い方だと全然ニュアンス伝わらないか。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring SecurityのOAuth 2.0 Login でログインしても UserInfo Endpoint にアクセスしてくれない</title>
      <link>https://yukihane.github.io/blog/202009/12/oidc-userinfo-not-fetched-for-custom-claims/</link>
      <pubDate>Sat, 12 Sep 2020 12:56:30 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202009/12/oidc-userinfo-not-fetched-for-custom-claims/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Spring Security &lt;a href=&#34;https://docs.spring.io/spring-security/site/docs/current/reference/html5/#oauth2login&#34;&gt;OAuth 2.0 Login&lt;/a&gt; を利用してログインしたのですが、通常ログイン後 UserInfo Endpoint へアクセスしてくれるはずなのにこの処理がスキップされてしまうような事象に出会いました。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>claimとscopeを追加して取得してみる</title>
      <link>https://yukihane.github.io/blog/202009/04/oidc-add-claim-and-scope/</link>
      <pubDate>Thu, 03 Sep 2020 23:24:39 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202009/04/oidc-add-claim-and-scope/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Keycloak上で新しいclaimと、それを取得できる新しいscopeを定義し、Spring Securityを使って参照してみます。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://yukihane.github.io/blog/202007/21/hello-oidc-with-keycloak/&#34;&gt;KeycloakをIdPにしてSpring Security OAuth 2.0 Login/Client を試してみる&lt;/a&gt; で作成したコードをベースにしています。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Security: OIDC の redirect_uri を変更する</title>
      <link>https://yukihane.github.io/blog/202009/04/oidc-change-redirect-uri/</link>
      <pubDate>Thu, 03 Sep 2020 22:50:21 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202009/04/oidc-change-redirect-uri/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://yukihane.github.io/blog/202007/21/hello-oidc-with-keycloak/&#34;&gt;KeycloakをIdPにしてSpring Security OAuth 2.0 Login/Client を試してみる&lt;/a&gt; で作成したコードに対して、 カスタム &lt;code&gt;redirect_uri&lt;/code&gt; の設定を行ってみます。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;今回のコードはこちら:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yukihane/hello-java/tree/master/spring/oidc/oidc-change-redirect-uri&#34; class=&#34;bare&#34;&gt;https://github.com/yukihane/hello-java/tree/master/spring/oidc/oidc-change-redirect-uri&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_変更手順&#34;&gt;変更手順&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;sect2&#34;&gt;&#xA;&lt;h3 id=&#34;_keycloak_登録情報の変更&#34;&gt;KeyCloak 登録情報の変更&lt;/h3&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://yukihane.github.io/blog/202007/21/hello-oidc-with-keycloak/&#34;&gt;前回のページ&lt;/a&gt; を参考に、 &amp;#34;Valid Redirect URIs&amp;#34; の値を今回変更するURL &lt;strong&gt;http://localhost:8080/my_redirect_uri&lt;/strong&gt; に更新します。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Security OAuth 2.0 Login を自動テストする</title>
      <link>https://yukihane.github.io/blog/202008/05/spring-boot-oidc-testing/</link>
      <pubDate>Tue, 04 Aug 2020 21:39:37 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202008/05/spring-boot-oidc-testing/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://yukihane.github.io/blog/202007/21/hello-oidc-with-keycloak/&#34;&gt;KeycloakをIdPにしてSpring Security OAuth 2.0 Login/Client を試してみる&lt;/a&gt; で作成したプログラムの自動テスト方法です。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;今回のコードも前回と同じく次のディレクトリにあります:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yukihane/hello-java/tree/master/spring/oidc-example&#34; class=&#34;bare&#34;&gt;https://github.com/yukihane/hello-java/tree/master/spring/oidc-example&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;まず結論なのですが、リファレンスに説明がありますのでここを参照しましょう、ということになります:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>KeycloakをIdPにしてSpring Security OAuth 2.0 Login/Client を試してみる</title>
      <link>https://yukihane.github.io/blog/202007/21/hello-oidc-with-keycloak/</link>
      <pubDate>Mon, 20 Jul 2020 18:54:23 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202007/21/hello-oidc-with-keycloak/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Spring Boot で Spring Security OAuth 2.0 &lt;a href=&#34;https://docs.spring.io/spring-security/site/docs/5.3.3.RELEASE/reference/html5/#oauth2login&#34;&gt;Login&lt;/a&gt; / &lt;a href=&#34;https://docs.spring.io/spring-security/site/docs/5.3.3.RELEASE/reference/html5/#oauth2client&#34;&gt;Client&lt;/a&gt; を利用する手順をまとめます。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;また、認可サーバ(IdP)にはローカルで立てたKeycloakを用いますのでそちらのセットアップ手順も記載します。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Security OAuth 2.0 Client の auto-configuration</title>
      <link>https://yukihane.github.io/blog/202007/20/spring-security-oauth-2.0-client/</link>
      <pubDate>Mon, 20 Jul 2020 06:36:51 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202007/20/spring-security-oauth-2.0-client/</guid>
      <description>&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-boot/blob/v2.3.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/servlet/OAuth2ClientAutoConfiguration.java&#34;&gt;&lt;code&gt;OAuth2ClientAutoConfiguration&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;上記のクラスが &lt;code&gt;Import&lt;/code&gt; しているもの(など):&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-boot/blob/v2.3.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/servlet/OAuth2ClientRegistrationRepositoryConfiguration.java&#34;&gt;&lt;code&gt;OAuth2ClientRegistrationRepositoryConfiguration&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;ClientRegistrationRepository&lt;/code&gt; bean 定義。&lt;/p&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-boot/blob/v2.3.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientProperties.java&#34;&gt;&lt;code&gt;OAuth2ClientProperties&lt;/code&gt;&lt;/a&gt;(&lt;code&gt;spring.security.oauth2.client&lt;/code&gt;)プロパティから定義を取得して生成するインメモリレジストリを生成。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-boot/blob/v2.3.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/servlet/OAuth2WebSecurityConfiguration.java&#34;&gt;&lt;code&gt;OAuth2WebSecurityConfiguration&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-security/blob/5.3.3.RELEASE/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/OAuth2AuthorizedClientService.java&#34;&gt;&lt;code&gt;OAuth2AuthorizedClientService&lt;/code&gt;&lt;/a&gt; bean 定義。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-security/blob/5.3.3.RELEASE/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/web/OAuth2AuthorizedClientRepository.java&#34;&gt;&lt;code&gt;OAuth2AuthorizedClientRepository&lt;/code&gt;&lt;/a&gt; bean 定義。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; デフォルト実装。&lt;/p&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;全てのリクエストに authenticated を要求する。 oauth2Login, oauth2Client 有効化。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Security から認可サーバサポートが無くなる、というのは取り敢えず見直されています</title>
      <link>https://yukihane.github.io/blog/202007/19/spring-security-authentication-server/</link>
      <pubDate>Sun, 19 Jul 2020 06:10:14 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202007/19/spring-security-authentication-server/</guid>
      <description>&lt;div class=&#34;quoteblock&#34;&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;世の中に認可サーバー製品がたくさんあるので、Spring Securityではサポートしないことを決定しました&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;attribution&#34;&gt;&#xA;— &lt;a href=&#34;https://qiita.com/suke_masa/items/4e68012e3b8c92822a9a&#34;&gt;Spring Security OAuth2はあと数年でサポート終了、その代替策 - Qiita&lt;/a&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring SecurityのOAuth2.0関連の歴史を調査し実装してみた</title>
      <link>https://yukihane.github.io/blog/202007/15/history-of-spring-oauth2-libraries/</link>
      <pubDate>Tue, 14 Jul 2020 23:47:11 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202007/15/history-of-spring-oauth2-libraries/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Qiita に昔(2019年中頃)書いていた資料を転記し忘れていたので構成を見直してアップロードし直します。&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;2020年現在の状況はまた更新されています。次のURLを参照してください。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Security OAuth 2.0 Client(OAuth 2.0 Login)でトークンの管理をしているのはOAuth2AuthorizedClientService</title>
      <link>https://yukihane.github.io/blog/202006/17/oauth2authorizedclientservice/</link>
      <pubDate>Wed, 17 Jun 2020 09:24:57 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202006/17/oauth2authorizedclientservice/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;私も今回の質問(本文末参照)を見たとき少しの間勘違いしてしまったのですが、OAuth2.0のクライアントがどこで各リソースオーナーのトークンを管理しているかと言うと、アプリケーションコンテキストであって、ユーザのセッションコンテキストなわけが無いですよね…&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>So many UserDetailsService samples considered harmful for beginners</title>
      <link>https://yukihane.github.io/blog/202006/13/userdetailsservice-samples-considered-harmful-for-biginners/</link>
      <pubDate>Sat, 13 Jun 2020 21:07:40 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202006/13/userdetailsservice-samples-considered-harmful-for-biginners/</guid>
      <description>&lt;p&gt;やっぱり一発目の Spring Security やってみたで UserDetailsService 使うのは止めようず。So many UserDetailsService samples considered harmful for beginners.&lt;/p&gt;&#xA;&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://qiita.com/yukihane/items/865db9e7279cf0e588a7&#34;&gt;ちょっと待って！その UserDetails、本当に必要ですか？&lt;/a&gt;で書いたことの繰り返しなんですけども。&lt;/p&gt;</description>
    </item>
    <item>
      <title>UserDetailsServiceは誤解されている</title>
      <link>https://yukihane.github.io/blog/202006/12/userdetailsservice-conidered-harmful/</link>
      <pubDate>Fri, 12 Jun 2020 09:37:26 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/202006/12/userdetailsservice-conidered-harmful/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;サンプルコード等だけを見ていると &lt;code&gt;UserDetailsService&lt;/code&gt; を利用することがSpring Securityの唯一の認証処理実現方法だと誤解しがちですが、 &lt;code&gt;UserDetailsService&lt;/code&gt; はむしろユーティリティライブラリくらいの立ち位置で、別に利用しなくても実現可能です。&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Bootは、セキュリティフィルタBeanを作っている分だけ、無料で認証できちまうんだ</title>
      <link>https://yukihane.github.io/blog/201907/18/spring-boot-filter-bean/</link>
      <pubDate>Thu, 18 Jul 2019 20:34:56 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/201907/18/spring-boot-filter-bean/</guid>
      <description>&lt;h1 id=&#34;要約&#34;&gt;要約&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.1.6.RELEASE/reference/html/howto-embedded-web-servers.html#howto-add-a-servlet-filter-or-listener&#34;&gt;78.10 Add a Servlet, Filter, or Listener to an Application&lt;/a&gt;曰く。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;any &lt;code&gt;Servlet&lt;/code&gt; or &lt;code&gt;Filter&lt;/code&gt; beans are registered with the servlet container automatically.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Spring Security 使った自前の認証フィルタを &lt;code&gt;@Component&lt;/code&gt; 付けて作ったりなんかした際に意図しない URL path にも認証がかかってしまう。&lt;br /&gt;&#xA;んゴ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>spring-boot-starter-security を入れたら認証画面が！</title>
      <link>https://yukihane.github.io/blog/201907/04/spring-boot-and-spring-security/</link>
      <pubDate>Thu, 04 Jul 2019 20:32:21 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/201907/04/spring-boot-and-spring-security/</guid>
      <description>&lt;p&gt;&lt;code&gt;WebSecurityConfigurerAdapter#configure(HttpSecurity)&lt;/code&gt; で form 認証を有効化しているのでこれをディスる。&lt;br /&gt;&#xA;&lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt;を継承した Spring コンポーネントをスキャン対象に含めれば良い。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ちょっと待って！そのUserDetails、本当に必要ですか？</title>
      <link>https://yukihane.github.io/blog/201907/03/you-dont-need-userdetails/</link>
      <pubDate>Wed, 03 Jul 2019 21:55:20 +0000</pubDate>
      <guid>https://yukihane.github.io/blog/201907/03/you-dont-need-userdetails/</guid>
      <description>&lt;h1 id=&#34;概要&#34;&gt;概要&lt;/h1&gt;&#xA;&lt;p&gt;Spring Boot の認証を実装してみた系のサンプルでよく &lt;code&gt;UserDetails&lt;/code&gt; や &lt;code&gt;UserDetailsService&lt;/code&gt; が用いられているが、必然性が不明なものがほとんどである。&lt;br /&gt;&#xA;(おそらく当の実装者も理解していない&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。)&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
