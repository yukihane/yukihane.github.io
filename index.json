[{"content":"Stack Overflow で Spring Boot の質問に回答するときのサンプルプロジェクトを作成するとき、 Spirng Initializr を利用しているのですが、よく必要な dependencies を追加し忘れたり、設定しておいた方が良いプロパティってなんだっけかな、と迷うことがあります。\n それをメモしておきます。\n application.properties # https://stackoverflow.com/a/31249985/4506703 logging.level.org.hibernate.SQL=DEBUG logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE # https://yukihane.github.io/blog/201907/12/h2-console-on-spring-boot/ spring.h2.console.enabled=true spring.datasource.generate-unique-name=false # https://docs.spring.io/spring-boot/docs/2.5.6/reference/htmlsingle/#howto.data-initialization.using-basic-sql-scripts spring.jpa.defer-datasource-initialization=true   pom.xml \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-data-jpa\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-security\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.thymeleaf.extras\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;thymeleaf-extras-springsecurity5\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-thymeleaf\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-validation\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-devtools\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.h2database\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;h2\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-configuration-processor\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.security\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-security-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt;   ","description":"","id":0,"section":"blog","tags":["spring-boot"],"title":"Spring Boot でサンプルコードを作成するときのプロパティなど","uri":"https://yukihane.github.io/blog/202110/31/spring-boot-template/"},{"content":"VSCode のデフォルトの色設定だと、エラーの波線と警告の波線との区別が私の目では付けづらいのです。 おそらく赤色と黄色だと思うのですが…\n 色についてのプロパティは次のリンク先に説明がありました。\n   https://code.visualstudio.com/api/references/theme-color\n   今回は警告色を少し暗めにしてエラー色と区別できるようにすることにしました。\n { \u0026#34;workbench.colorCustomizations\u0026#34;: { \u0026#34;editorWarning.foreground\u0026#34;: \u0026#34;#00588f\u0026#34; } }   この設定で下波線と、サイドバー(スクロールバー)に表示される色が変わりました。 サイドバーの色はいったんエディタを全て閉じないと反映されないかもしれません。\n ","description":"","id":1,"section":"blog","tags":null,"title":"VSCode でエラー/警告アンダーラインの区別がつかない","uri":"https://yukihane.github.io/blog/202110/25/vscode-underline-coloring/"},{"content":"はじめに Spring Boot で JPA Validator にインジェクションしようとしたけどできなかった、という話を何度か聞いてその度に調べていたので、次回に備えてまとめておきます。 サンプルコードはこちら:\n   https://github.com/yukihane/hello-java/tree/master/spring/inject-in-validator\n     解説 Spring Boot で JPA Validator を利用するのは、典型的には\n   Sprng MVC でハンドラメソッドにアノテーションを付与する\n  永続化時のバリデーション (一般的な JPA Validation の利用方法)\n   の 2 つのタイミングがあるのかなと思っています。\n 前者は次のような感じのものです:\n @PostMapping(\u0026#34;/\u0026#34;) public MyEntity index(@Valid @RequestBody final MyRequest req) { ... } public record MyRequest(@MyConstraint(\u0026#34;1\u0026#34;) String name, int age) { }   こちらは、 Spring Framework のリファレンス 3.7.2. Configuring a Bean Validation Provider に説明があり、この設定を行うことでカスタム validator でも @Autowired が利用できるようになります。\n ちなみに Spring Boot では自動設定されます(ValidationAutoConfiguration)ので明示的なコンフィグレーションは不要です。\n よく困るのは後者です。エンティティにアノテーションを付与して、永続化時に検証するものです:\n @Entity public class MyEntity { @Id private Long id; @MyConstraint(\u0026#34;4\u0026#34;) private String name; private int age; }   こちらは自動設定されないので明示的なコンフィグレーションが必要になります。 次のような設定を行います:\n import java.util.Map; import javax.validation.Validator; import org.springframework.boot.autoconfigure.orm.jpa.HibernatePropertiesCustomizer; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class MyConfig { @Bean public HibernatePropertiesCustomizer hibernatePropertiesCustomizer(final Validator validator) { return new HibernatePropertiesCustomizer() { @Override public void customize(final Map\u0026lt;String, Object\u0026gt; hibernateProperties) { hibernateProperties.put(\u0026#34;javax.persistence.validation.factory\u0026#34;, validator); } }; } }   この設定を行うことで、 JPA フレームワークが用いる validator インスタンスの生成が Spring Framework に委譲され、 Spring Bean として管理されることになります。 そのため @Autowired も利用できるようになります。\n 参考:\n   @AutowiredでインジェクトしたUserServiceがnullになってしまう - スタック・オーバーフロー\n     余談 この検証をしていて気づいたのですが、 validator インスタンスは必要に応じて生成されるんですね。\n 通常の @Component を付与した Spring Bean は(特に設定しないと)singleton なので 1 つしか生成されないのですが、そうすると不都合あるよな…(validator が状態を持っているので並行して validation できない)とか思っていたのですが、ちゃんとチェックするタイミングごと(context ごと、というのが正確なのかな？)にインスタンス生成されていますね。\n   ","description":"","id":2,"section":"blog","tags":["spring-boot"],"title":"Spring Boot でカスタム validator に injection する","uri":"https://yukihane.github.io/blog/202110/18/spring-inject-in-validator/"},{"content":"(※ record は Java14 でプレビュー版が導入、 Java16 で正式版が導入されたので Java17 というのは不正確なようですが…)\n Java17 の record を今まで利用してきた POJO から置き換えられるのかを簡単に見てみました。\n   https://github.com/yukihane/hello-java/tree/master/spring/record-spring-mvc\n   結果、 Jackson も Thymeleaf も MapStruct もちゃんと record を変換してくれてそうに見えます。\n ただ、現時点(STS 4.12.0(Eclipse 2021-09 (4.21)相当)に Java17 support pluginを導入したもの) では、 MapStruct のマッパーインタフェースでエラーが出ているのが少し気持ち悪いです。\n @RestController @RequestMapping(\u0026#34;/rest\u0026#34;) @RequiredArgsConstructor @Slf4j public class MyRestController { private final ConversionService conversionService; @PostMapping public ResponseData rest(@RequestBody final RequestData req) { log.info(\u0026#34;req: {}\u0026#34;, req); final ResponseData resp = conversionService.convert(req, ResponseData.class); log.info(\u0026#34;resp: {}\u0026#34;, resp); return resp; } public record RequestData( String name, int age, LocalDate registrationDate) { } public record ResponseData( String name, int age, LocalDate registrationDate) { } @Mapper public interface RequestDataMapper extends Converter\u0026lt;RequestData, ResponseData\u0026gt; { @Override ResponseData convert(RequestData source); } }   @Controller public class MyHtmlController { @PostMapping public String index(@ModelAttribute final FormData form, final Model model) { model.addAttribute(\u0026#34;form\u0026#34;, form); return \u0026#34;index\u0026#34;; } public record FormData( String name, int age, @DateTimeFormat(pattern = \u0026#34;uuuu-MM-dd\u0026#34;) LocalDate registrationDate) { } }   ","description":"","id":3,"section":"blog","tags":["spring-boot","java"],"title":"Spring MVC で Java17 record を試してみる","uri":"https://yukihane.github.io/blog/202110/18/java17-record-on-spring-mvc/"},{"content":"はじめに MapStruct の公式サイトを見ていると、 Mapstruct Spring Extensions なるサブプロジェクトが発足していたので、何者か調べようと試してみました。\n 結果、これは Spring の ConversionService の Converter と MapStruct の Mapper を統合して、実装を少し楽にしよう、というもののようでした。\n 今回は、 MapStruct の基本的な使い方から始めて、順に Spring Boot に統合していってみます。\n ちなみに公式サンプルは こちら になります。 (いろいろ機能を紹介するサンプルになっていて本質が分かりづらいので、今回シンプルな実装で試してみています。)\n 今回のコードはこちらです。\n   https://github.com/yukihane/hello-java/tree/master/spring/mapstruct-spring-extensions-example\n     実装 前提   Java17\n  Spring Boot 2.6.0-M3\n  MapStruct 1.4.2.Final\n  MapStruct Spring Extensions 0.1.0\n   README にも書いていますが、どのタイミングでもリクエストは次のコマンドで行います。\n curl --location --request POST \u0026#39;http://localhost:8080/\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --data-raw \u0026#39;{ \u0026#34;name\u0026#34;: \u0026#34;my car\u0026#34;, \u0026#34;wheel\u0026#34;: { \u0026#34;size\u0026#34;: 100 }, \u0026#34;pedal\u0026#34;: { \u0026#34;size\u0026#34;: 20 } }\u0026#39;    1. 普通の使い方で MapStruct を組み込む   コード: c4deee3\n   @Data public class Car { private String name; private Wheel wheel; private Pedal pedal; } @Data public class Wheel { private int size; } @Data public class Pedal { private int size; }   のようなコードを、\n @Data public class CarDto { private String name; private WheelDto steeringWheel; private PedalDto footPedal; } @Data public class WheelDto { private int wheelSize; } @Data public class PedalDto { private int pedalSize; }   にマッピングすることを考えます。 このとき、マッパーは次のような実装になります。\n @Mapper(uses = { WheelMapper.class, PedalMapper.class }) public interface CarMapper { @Mappings({ @Mapping(source = \u0026#34;wheel\u0026#34;, target = \u0026#34;steeringWheel\u0026#34;), @Mapping(source = \u0026#34;pedal\u0026#34;, target = \u0026#34;footPedal\u0026#34;), }) CarDto convert(Car car); } @Mapper public interface WheelMapper { @Mapping(source = \u0026#34;size\u0026#34;, target = \u0026#34;wheelSize\u0026#34;) WheelDto convert(Wheel wheel); } @Mapper public interface PedalMapper { @Mapping(source = \u0026#34;size\u0026#34;, target = \u0026#34;pedalSize\u0026#34;) PedalDto convert(Pedal pedal); }   マッピング処理を行いたい箇所でマッパーをインジェクションして利用します。\n @RestController @RequiredArgsConstructor @Slf4j public class MyController { private final CarMapper carMapper; @PostMapping(\u0026#34;/\u0026#34;) public CarDto index(@RequestBody final Car car) { log.info(\u0026#34;car: {}\u0026#34;, car); final CarDto dto = carMapper.convert(car); log.info(\u0026#34;dto: {}\u0026#34;, dto); return dto; } }    2. Converter として実装する   コード: eb23410\n   マッパーが org.springframework.core.convert.converter.Converter を実装したコンポーネントであれば ConversionService の仕組みで変換できるよね、というのが次の発想になります。 extends Converter\u0026lt;_,_\u0026gt; を加えるだけです(正確には、 MapStruct 変換メソッド名は何でもよかったのですが、 Converter を実装するなら convert という名前でないといけないので一般的にはメソッド名変更も伴います)。\n @Mapper(uses = { WheelMapper.class, PedalMapper.class }) public interface CarMapper extends Converter\u0026lt;Car, CarDto\u0026gt; { @Override @Mappings({ @Mapping(source = \u0026#34;wheel\u0026#34;, target = \u0026#34;steeringWheel\u0026#34;), @Mapping(source = \u0026#34;pedal\u0026#34;, target = \u0026#34;footPedal\u0026#34;), }) CarDto convert(Car car); } // (他の2つのマッパーも同様に extends Converter する)   そうすると、利用個所ではマッパーの代わりに ConversionService をインジェクションして変換できるようになります。\n @RestController @RequiredArgsConstructor @Slf4j public class MyController { private final ConversionService conversionService; @PostMapping(\u0026#34;/\u0026#34;) public CarDto index(@RequestBody final Car car) { log.info(\u0026#34;car: {}\u0026#34;, car); final CarDto dto = conversionService.convert(car, CarDto.class); log.info(\u0026#34;dto: {}\u0026#34;, dto); return dto; } }   現在、 CarMapper で uses = { WheelMapper.class, PedalMapper.class } というように、内包するエンティティのマッパーも明示的に指定していますが、 ConversionService にどの Converter を使って変換するかは任せてしまえるんじゃないか、というのがこのライブラリのモチベーションのようです(参考)。\n  3. Mapstruct Spring Extensions を利用する   コード: 105b509\n アノテーションとアノテーションプロセッサを追加(参考: 2. Set up)します(link)。\n  Application クラスに @SpringMapperConfig アノテーションを付与します(link)。\n  マッパーの uses 値を ConversionServiceAdapter.class に置き換えます(link)。\n      この手順の最後で行っている uses 値が固定値で良くなる、というのが本ライブラリを使うメリット、ということのようです。\n    ","description":"","id":4,"section":"blog","tags":["mapstruct","spring-boot"],"title":"Mapstruct Spring Extensions を試してみる","uri":"https://yukihane.github.io/blog/202110/18/mapstruct-spring-extensions/"},{"content":"Spring Tools 4 for Eclipse を利用していると、バージョンによって？ プロジェクト新規作成時などで \u0026#34;Import Getting Started Content\u0026#34; というタスクが走るのですがこれが全く終わらないことがあります。\n Window \u0026gt; Preference で設定画面を開いて、 General \u0026gt; Network Connections の設定値を \u0026#34;Native\u0026#34; から \u0026#34;Direct\u0026#34;(プロキシを使用している場合は\u0026#34;Manual\u0026#34;にしてプロキシ設定) へ変更するとスムーズに進むようになる場合があります。\n 何でうまくいくのかはわかりませんが…(Stack Overflow でも同じような質問が繰り返されていますね)\n (追記) …と思ったのですが、設定変えてもやっぱり進まなくなりました。プロジェクト作成はウィザードを使わずに https://start.spring.io/ を利用するのが良さそう。\n ","description":"","id":5,"section":"blog","tags":["spring-boot","eclipse","java"],"title":"STS(Eclipse) で Import Getting Started Content が進まない","uri":"https://yukihane.github.io/blog/202110/16/sts-import-getting-started-content-is-stuck/"},{"content":"その1はこちらです:\n   map で Result を引き回すときに Err を意識したくない - スタック・オーバーフロー\n   その1では戻り値が i * 2 の i32 型になる話でしたが、その次に考えたかったのは Result が返ってくるメソッドで引き回すときの話でした。こんな感じで:\n // and_then を利用すれば可能だが // この and_then を省きたい use anyhow::{anyhow, Result}; fn parse(s: \u0026amp;str) -\u0026gt; Result\u0026lt;i32\u0026gt; { let res = s.parse::\u0026lt;i32\u0026gt;()?; Ok(res) } fn x2(i: i32) -\u0026gt; Result\u0026lt;i32\u0026gt; { if i \u0026lt; 50 { Ok(i * 2) } else { Err(anyhow!(\u0026#34;too large\u0026#34;)) } } fn main() { let strings = vec![\u0026#34;tofu\u0026#34;, \u0026#34;93\u0026#34;, \u0026#34;18\u0026#34;]; let numbers: Vec\u0026lt;_\u0026gt; = strings .into_iter() .map(parse) .map(|r| r.and_then(x2)) .map(|r| r.and_then(x2)) .collect(); println!(\u0026#34;Results: {:?}\u0026#34;, numbers); // Results: [Err(invalid digit found in string), Err(too large), Ok(72)] }   anyhow::Result\u0026lt;i32\u0026gt; な関数を map でつなげて、最終的な結果を anyhow::Result\u0026lt;i32\u0026gt; のベクタで得たかったのです。\n なんとなくその1の結果からするにイテレータを自作すれば良さそうに思われるのですが、現時点では 実装がさっぱり理解できないので、将来の自分に任せたいと思います…\n ","description":"","id":6,"section":"blog","tags":["rust"],"title":"map で Result を引き回すときに Err を意識したくない その2","uri":"https://yukihane.github.io/blog/202110/15/rust-map-with-result/"},{"content":"現在の Servlet API では Cookie に SameSite 属性を設定するメソッドがありません。\n そのため、仕様外の、フレームワーク固有の方法だったり、低レイヤーの仕組みを使って設定する必要があります。\n   ServletでSameSite Cookieを設定する - Zenn\n  JavaでCookieにSameSite属性をつける - Qiita\n  DefaultCookieSerializer#setSameSite() - spring-session-docs 2.5.2 API\n   そういった状況に対して、Servlet 5.1 で、 Cookie に setAttribute という汎用的な属性設定用のメソッドが追加されることになったようです。\n   SameSite Cookie Support #175 - eclipse-ee4j/servlet-api\n   変更差分を見てみると、 setSecure()とか setHttpOnly()といった既存のメソッドも今回の仕組みで実装し直されています。\n ","description":"","id":7,"section":"blog","tags":["java"],"title":"Servlet 5.1 で Samesite 属性を設定できるようになる","uri":"https://yukihane.github.io/blog/202110/15/servlet-with-cookies-samesite/"},{"content":"  HAXM を有効化するためには 今でも Hyper-V を無効化しておく必要があるらしいです。つまり Android 開発と WSL2 は両立できないということに。\n  私は最初 Hyper-V 有効か状態で開発環境インストールを進めたのですが、やはりインストール失敗しました。\n     最初コマンドラインツール(sdkmanager)だけインストールしようとしたものの、どこからダウンロードすればいいのか分からなかったのですが、 Android Studio のダウンロードページにリンクがありました(Command line tools only)。\n  …ですが結局面倒くさくなって All-in-One でインストールしてくれる Android Studio をインストールすることでセットアップを済ませてしまいましたｗ\n     adb コマンドは %LOCALAPPDATA%\\Android\\sdk\\platform-tools にインストールされていました(参照: Where is adb.exe in windows 10 located? - Stack Overflow)。\n  開発手順はこちら: Developing extensions for Firefox for Android - Firefox Extension Workshop\n  web-ext コマンド引数に --firefox-apk org.mozilla.fenix を指定していますが、通常の Firefox を対象にする場合は --firefox-apk org.mozilla.firefox, beta版の場合は --firefox-apk org.mozilla.firefox_beta を指定すればよかったです。\n  Firefox を Google Play ストアからインストールのが面倒だったので(Google アカウントでログインする必要がある)、 GitHub のリリースページから apk をダウンロードしてインストールしました。\n         ","description":"","id":8,"section":"blog","tags":["android","webextensions","firefox"],"title":"Android Firefox Webextensions 開発/デバッグ覚え書き","uri":"https://yukihane.github.io/blog/202110/15/develop-android-firefox-addons/"},{"content":"Firefox 69 以降かな？ Fenix というコードネームになってから Android Firefox にインストールできる Webextensions(addons) に制約ができ、公式がお薦めとしているものだけしか通常の手順ではインストールできなくなりました。\n はてなブックマークオープナー という Android Firefox 向け Webextensions を作りっぱなしで長らく放置していたのですが、これを使いたくなったのでインストール方法を調べました。\n 公式ドキュメントとしては次のリンクで言及されています。\n   Android 版 Firefox でアドオンを検索してインストールするには \u0026gt; Android 版 Firefox Nightly での拡張機能のサポート拡大\n  Mozilla Add-ons Community Blog \u0026gt; Expanded extension support in Firefox for Android Nightly\n      日本語で解説されている方がいらっしゃいましたので、こちらを見る方が分かりやすかもしれません。\n   Aqua Ware つぶやきブログ \u0026gt; Android版 Firefox (Fenix) で、任意のアドオンを使えるようにする\n   Android Firefox の Nightly 版であれば、少し手間がかかりますが過去動作していた addons を取り込むことができる、ということになります。\n さて、冒頭の自作 addons をインストールしてみたのですが、昔と比べて addons をタップするまでのステップが増えているので利便性は低下してしまっていますね…\n ","description":"","id":9,"section":"blog","tags":["android","webextensions","firefox"],"title":"Android Firefox に addons をインストールする方法","uri":"https://yukihane.github.io/blog/202110/15/install-addon-to-android-firefox/"},{"content":"ググっていると、ちょくちょく 「Rust に reduce は無い、代わりに fold を使え」という話が出てくるのが疑問だったのですが、 reduce が導入されたのって 1.51.0(2021-03-25)と、比較的最近だからなんですね。\n しかしリリースノートを見てもこういう変更は載っていないのですね。 細かすぎるから？ 気付いてない人は気付かないまま過ごしてそう…\n fn main() { let v = vec![1, 2, 3, 4, 5]; let sum = v.into_iter().reduce(|x, y| x + y).unwrap(); println!(\u0026#34;{}\u0026#34;, sum); // 15 // 要素1個 let v = vec![1]; let sum = v.into_iter().reduce(|x, y| x + y).unwrap(); println!(\u0026#34;{}\u0026#34;, sum); // 1 // 要素無し let v = vec![0; 0]; let sum = v.into_iter().reduce(|x, y| x + y); println!(\u0026#34;{:?}\u0026#34;, sum); // None }   ","description":"","id":10,"section":"blog","tags":["rust"],"title":"Rust に reduce は、あります","uri":"https://yukihane.github.io/blog/202110/09/rust-reduce/"},{"content":"…というのを検索する用語が \u0026#34;エラーハンドリング(error handling)\u0026#34; だということに気付くまでにも時間がかかるくらいの初級者です。\n Rust でのエラーハンドリングについては歴史的変遷があるようで、ググると結局今はどうやったらええねん、という新たな疑問が湧いてきます。\n 取り敢えず 2021/10 現在は、 anyhow(+ 自分でエラー定義する場合は thiserror) を利用するのが良さそうです。 この辺りは README に書きました。\n   https://github.com/yukihane/hello-rust/tree/master/error-handling\n   src/bin/gear07.rs use anyhow::Result; fn get_int_from_file() -\u0026gt; Result\u0026lt;i32\u0026gt; { let path = \u0026#34;number.txt\u0026#34;; let num_str = std::fs::read_to_string(path)?; let num = num_str.trim().parse::\u0026lt;i32\u0026gt;().map(|t| t * 2)?; Ok(num) } fn main() { match get_int_from_file() { Ok(x) =\u0026gt; println!(\u0026#34;{}\u0026#34;, x), Err(e) =\u0026gt; println!(\u0026#34;{:#?}\u0026#34;, e), } }   それ以外、外部クレートを利用しない方式としては、\n   The Rust Programming Language \u0026gt; 9.2. Recoverable Errors with Result (※ 日本語版にはまだ反映されていないようです)\n  Rust By Example 日本語版 \u0026gt; 18.4.3. エラーをBoxする (原文)\n   にあるような Box 化して取り扱う方式があるようです。\n src/bin/rust-book.rs use std::error::Error; fn get_int_from_file() -\u0026gt; Result\u0026lt;i32, Box\u0026lt;dyn Error\u0026gt;\u0026gt; { let path = \u0026#34;number.txt\u0026#34;; let num_str = std::fs::read_to_string(path)?; let res = num_str.trim().parse::\u0026lt;i32\u0026gt;().map(|t| t * 2)?; Ok(res) } fn main() { match get_int_from_file() { Ok(x) =\u0026gt; println!(\u0026#34;{}\u0026#34;, x), Err(e) =\u0026gt; println!(\u0026#34;{}\u0026#34;, e), } }   あるいは別の方法として 自前のエラー型でラップする(18.4.5. エラーをラップする, 原文)方法も解説がありました(src/bin/gear03.rs)。\n ","description":"","id":11,"section":"blog","tags":["rust"],"title":"Rust の Result を良い感じにまとめるには","uri":"https://yukihane.github.io/blog/202110/09/rust-result/"},{"content":"はじめに   Hello Project Panama – 発火後忘失\n   で、 Project Panama (リンク1, リンク2) の機能を利用して、 Java から Rust を呼び出してみました。\n 当時(Java14)は Project Panama 用にビルドされた JDK を利用する必要がありましたが、 Java17 では incubator ではあるものの JEP 412: Foreign Function \u0026amp; Memory API が標準 JDK に導入された\n   Java 17新機能まとめ - Qiita\n   ので、標準の JDK でも冒頭にリンクしたコード相当のものをビルド、実行できるようになりました(※ 後述の通り jextract コマンド は標準 JDK に含まれていないので別途取得する必要があります)。\n API, jextract コマンド引数など、 Java14 当時と結構変わっていましたので、改めて project Panama を使って Hello, world してみたいと思います。\n 今回の成果物は次のリンク先にあります:\n   https://github.com/yukihane/hello-java/tree/master/project-panama/java17\n     環境   Ubuntu 20.04\n  後で Windows10 上でも試してみましたが、こちらも上手く動作しました\n     Java Corretto-17.0.0.35.1\n  jextract Build 17-panama+3-167 (2021/5/18)\n  rustc 1.55.0\n     作成手順 Rust でダイナミックリンクライブラリ作成 greeter という名前でプロジェクトを作成します。 プロジェクトルートディレクトリで次のコマンドを実行します。\n cargo new --lib greeter cd greeter   libc クレートを依存関係に追加します。 また、ダイナミックリンクライブラリを生成するように crate-type に cdylib を設定します。\n Cargo.toml [dependencies] libc = \u0026#34;0.2.103\u0026#34; [lib] crate-type = [\u0026#34;cdylib\u0026#34;]   Rust 側で行う処理を実装します。\n src/lib.rs use libc::size_t; use std::ffi::{CStr, CString}; use std::os::raw::c_char; #[no_mangle] pub unsafe extern \u0026#34;C\u0026#34; fn greet(name: *const c_char, message: *mut c_char, count: size_t) { let name = CStr::from_ptr(name); let name = name.to_str().unwrap(); let text = format!(\u0026#34;こんにちは、{}！\u0026#34;, name); let text = CString::new(text).unwrap(); message.copy_from(text.as_ptr(), count); }   ビルドします。\n cargo build --release   参考   The Cargo Book \u0026gt; 3.2.1. Cargo Targets \u0026gt; The crate-type field\n  The Rustonomicon \u0026gt; 11. Foreign Function Interface \u0026gt; Calling Rust code from C\n     ダイナミックリンクライブラリの C ヘッダ自動生成 上で作成したライブラリのヘッダファイルを自動生成します。\n cbindgen コマンドをインストールします。\n cargo install --force cbindgen   プロジェクトルートディレクトリで次のコマンドを実行します。\n cbindgen -l c -o bridges/greeter.h greeter   上記コマンド実行により bridges/greeter.h ヘッダファイルが生成されます。\n bridges/greeter.h #include \u0026lt;stdarg.h\u0026gt; #include \u0026lt;stdbool.h\u0026gt; #include \u0026lt;stdint.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; void greet(const char *name, char *message, size_t count);    C ヘッダから Java API 自動生成 jextract コマンドを利用してヘッダファイルから Java API を自動生成します。\n jextract コマンドは Project Panama の Early Access Build をダウンロードし展開すると bin ディレクトリ下にあります。\n プロジェクトルートディレクトリで次のコマンドを実行します。\n /path/to/jextract \\ -l greeter \\ -d classes \\ -t com.example \\ ./bridges/greeter.h   上記コマンドを実行すると classes ディレクトリ下にクラスファイルが生成されます。\n 補足/参考   上で自動生成した bridges/greeter.h は、実際には不必要なインクルードを含んでいます。 これを削減し、 #include \u0026lt;stddef.h\u0026gt; (size_t を定義しているヘッダファイル) だけにすると、ここで自動生成されるファイルも減ります。\n  jextract コマンドに --source オプションを付与すると、 .class ファイルでなく .java ファイルが生成されます。\n  jextract コマンドの詳細は次のリンク先を参照:\n  Using the jextract tool - openjdk/panama-foreign\n  同階層 doc ディレクトリには他にも参考になるドキュメントあり\n           呼び出し側を Java で実装 jdk.incubator.foreign 機能を用いてメモリ領域を確保し、自動生成した API com.example.greeter_h.greeter() を呼ぶコードを実装します。\n src/Main.java import static com.example.greeter_h.*; import static jdk.incubator.foreign.CLinker.*; import jdk.incubator.foreign.*; import java.awt.BorderLayout; import java.io.Serial; import java.nio.charset.StandardCharsets; import javax.swing.*; public class Main extends JFrame { @Serial private static final long serialVersionUID = 4648172894076113183L; public Main() { super(\u0026#34;Rust GUI Frontend by Java Swing\u0026#34;); setLayout(new BorderLayout()); final JTextField nameField = new JTextField(20); final JTextField outputField = new JTextField(30); outputField.setEditable(false); final JButton greetButton = new JButton(\u0026#34;greet\u0026#34;); greetButton.addActionListener((e) -\u0026gt; { try (ResourceScope scope = ResourceScope.newConfinedScope()) { final SegmentAllocator allocator = SegmentAllocator.ofScope(scope); final MemorySegment name = toCString(nameField.getText(), scope); final long size = 256; final MemorySegment message = allocator.allocateArray(C_CHAR, size); greet(name, message, size); // Project PanamaのJDKには存在するが、通常のJDK17には無い // final String retval = toJavaString(message, StandardCharsets.UTF_8); final String retval = toJavaString(message); outputField.setText(retval); } }); add(nameField, BorderLayout.WEST); add(greetButton, BorderLayout.EAST); add(outputField, BorderLayout.SOUTH); pack(); } public static void main(final String[] args) { SwingUtilities.invokeLater(() -\u0026gt; { final Main app = new Main(); app.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); app.setVisible(true); }); } }   補足   IDE を用いる場合、次のリンク先に IntelliJ の設定方法が説明されています。\n  https://github.com/carldea/panama4newbies/blob/main/README.md\n  こちらのリンク、IDE の設定方法だけでなく、 Project Panama 全体の説明もわかりやすいと思います\n           Java コードビルド 上記のコードを JDK17 でビルドするには --add-modules jdk.incubator.foreign オプションを付与する必要があります。\n javac \\ -encoding utf-8 \\ -d ./classes \\ -cp ./classes \\ --add-modules jdk.incubator.foreign \\ ./src/Main.java    実行 --enable-native-access=ALL-UNNAMED, --add-modules jdk.incubator.foreign オプションが必要です。\n LD_LIBRARY_PATH=./greeter/target/release \\ java \\ -Dfile.encoding=utf-8 \\ --enable-native-access=ALL-UNNAMED \\ --add-modules jdk.incubator.foreign \\ -cp ./classes Main   参考/補足   Windows で実行する場合、 LD_LIBRARY_PATH は機能しません。 代わりに、 ./greeter/target/release/greeter.dll をカレントディレクトリにコピーしてから上のコマンドを実行します。\n  Using the jextract tool \u0026gt; Running the Java code that invokes helloworld\n       ","description":"","id":12,"section":"blog","tags":["java","rust"],"title":"Hello Project Panama, on Java17","uri":"https://yukihane.github.io/blog/202110/08/hello-project-panama-on-java17/"},{"content":"はじめに Tauri という、 WebView を利用して GUI を実現する Rust 製フレームワークを試してみました。\n Rust も React も入門書から陸続きで書き始められるので、余計なことに気を取られずに済みそうです(ただし、 JS - Rust 間のデータ受け渡しに利用する JSON オブジェクトのシリアライズ/デシリアライズに利用する Serde についての知識は少し必要になりそうでした)。\n 本エントリは、 Tauri で Hello World するアプリケーションを作成しビルドしてみた過程の記録です。 次のような処理を行うプログラムを作成しました。\n   JS 側でパラメータを伴った コマンド をリクエスト\n  Rust 側でパラメータを基に計算を実行\n  計算結果を JS 側に返して出力\n     今回実装したコードはこちらです:\n   https://github.com/yukihane/hello-rust/tree/master/hello-tauri\n     環境 yarn tauri info コマンド実行結果より。\n   Ubuntu 20.04\n  Tauri 1.0.0-beta.8\n  Rust 1.55.0\n  Node 14.18.0\n  React 17.0.2\n     初期セットアップ 公式ドキュメントに従って進めるだけです。 私は前述の通り Ubuntu 上で開発しているので、 Setup for Linux の Debian の項に書かれているパッケージをそのままインストールしました｡\n Node や Rust 開発環境は既にセットアップしていたものをそのまま利用しています。\n   プロジェクト雛形作成と起動 Integrate with Tauri 章をそのまま実行するだけです。\n yarn create tauri-app   上記コマンドを実行すると、いくつか作成する雛形について質問されます。\n 例えば JS フレームワークについて。 私は create-react-app を選択しました。 この後さらに TypeScript テンプレートを利用するか聞かれます。\n ? What UI recipe would you like to add? ❯ Vanilla.js (html, css, and js without the bundlers) create-react-app (https://create-react-app.dev/) create-vite (https://vitejs.dev/guide/#scaffolding-your-first-vite-project) Vue CLI (https://cli.vuejs.org/) Angular CLI (https://angular.io/cli) Svelte (https://github.com/sveltejs/template) Dominator (https://crates.io/crates/dominator/)   コマンド実行が正常終了すると、次のようなファイル/ディレクトリが生成されます。\n create-react-app(以降CRA)で生成したプロジェクトテンプレートに加えて、 src-tauri というディレクトリが生成されています。この後 src-tauri が Rust 側のプロジェクトです。\n . ├── README.md ├── node_modules ├── package.json ├── public ├── src ├── src-tauri ├── tsconfig.json └── yarn.lock   プロジェクトテンプレートが作成できたら次のコマンドで起動できます。\n yarn tauri dev   まずCRAの yarn start と同じくウェブブラウザが起動し、その後 Rust のコンパイル完了後に Tauri アプリケーションが起動します。 JS に閉じたアプリケーションであれば、 CRA と同じくウェブブラウザの方を見て開発できそうですが、 API を利用して Rust 側とコミュニケーションする場合は、ウェブブラウザの方は API にアクセスするとエラーになるので利用できません。 (補足: どうもこの挙動は不具合だったらしく、 #2793 で対応が入ったようです)\n パッケージングは次のコマンドです。 --verbose は必須ではありませんが、付けないと何か問題が発生した場合でもほとんど情報が出ませんでした。\n yarn tauri build --verbose\n   実装 上記で作成したプロジェクトテンプレートに Create Rust Commands を参照しながら実装していきます。\n まず、 JS 側を実装しました(重要でない行は適当に省略しています。全コードはリンク先参照)。\n src/App.tsx import { invoke } from \u0026#34;@tauri-apps/api\u0026#34;; function App() { const [message, setMessage] = useState(\u0026#34;\u0026#34;); const submit = () =\u0026gt; { const data: Request = { personalData: { name, birthDay } }; invoke\u0026lt;Response\u0026gt;(\u0026#34;greet\u0026#34;, data).then((resp) =\u0026gt; { setMessage(resp.message); }); }; return (...); }   invoke 関数の第1引数にコマンド名、第2引数にJSONでコマンドパラメータを設定し呼び出します。 戻り値は Promise 型です。\n 続いてこのコマンドに対応する処理を Rust 側に実装します。\n src-tauri/src/main.rs #![cfg_attr( all(not(debug_assertions), target_os = \u0026#34;windows\u0026#34;), windows_subsystem = \u0026#34;windows\u0026#34; )] use chrono::{DateTime, Datelike, Local, Utc}; use serde::{Deserialize, Serialize}; #[derive(Deserialize, Debug)] struct PersonalData { name: String, birthDay: DateTime\u0026lt;Utc\u0026gt;, } #[derive(Serialize, Debug)] struct Response { message: String, } #[tauri::command] fn greet(personal_data: PersonalData) -\u0026gt; Response { println!(\u0026#34;recieve: {:?}\u0026#34;, personal_data); let age: i32 = calc_age(\u0026amp;personal_data.birthDay, \u0026amp;Local::now()); let message = format!(\u0026#34;こんにちは, {}({}歳)！\u0026#34;, personal_data.name, age); Response { message } } fn calc_age(birth_day: \u0026amp;DateTime\u0026lt;Utc\u0026gt;, now: \u0026amp;DateTime\u0026lt;Local\u0026gt;) -\u0026gt; i32 { let year = now.year() - birth_day.year(); let delta = match now.month() as i32 - birth_day.month() as i32 { m if m \u0026gt; 0 =\u0026gt; 0, m if m \u0026lt; 0 =\u0026gt; -1, _ =\u0026gt; { if now.day() as i32 - birth_day.day() as i32 \u0026gt;= 0 { 0 } else { -1 } } }; year + delta } fn main() { tauri::Builder::default() .invoke_handler(tauri::generate_handler![greet]) .run(tauri::generate_context!()) .expect(\u0026#34;error while running tauri application\u0026#34;); }   コマンド名と同じ名前の関数を定義し #[tauri::command] アトリビュートを付与、 builder の invoke_handler 関数の引数に設定します。\n 引数や戻り値は JS の JSON と Rust の構造体に(基本的には(?) Serde の自動で)相互変換されるようでした。\n 命名規則は決まっており、名前や型が異なると呼び出されませんでした(意図通り動かなかった場合、原因を探すのが少し大変そうです)。\n   大変そう/大変だったところ   冒頭でも少し触れましたが、 Serde という crate が JS - Rust 間データ変換を担っているので、この crate の知識が少し必要になりそうでした。\n  今回のコードでいうと、 Date 型のオブジェクトを渡すのに Cargo.toml の dependencies に chrono = { version = \u0026#34;0.4.19\u0026#34;, features = [\u0026#34;serde\u0026#34;] } を追加する必要がありましたが、解答に辿り着くまで結構時間がかかりました。\n     解説やサンプルが少ないです。公式/非公式ドキュメントも少なく、 showcase からリンクされているコードを理解しようにも、まず動かすまでにも至れなかったりしました。\n  公式リポジトリの examples が数少ない情報源でした。今回のことについては commands が該当します。\n  examples 以下のコードを実行するには、リポジトリをチェックアウトして cargo run --example commands (など)。\n     現状、 JS - Rust 間のやりとりは JSON のみなので、例えばバイナリを高頻度で送受信する必要があるようなアプリケーションではパフォーマンス問題が表出しそうにも思われます。\n  refs: Pass messages between Rust frontend and backend without JSON serialization #1271\n        ","description":"","id":13,"section":"blog","tags":["rust","react"],"title":"Tauri を GUI にして Rust と React に入門する","uri":"https://yukihane.github.io/blog/202110/03/hello-tauri/"},{"content":"問題になりそうなキーワード:\n   lazy loading\n  collection\n  循環参照\n  mutability\n   @Data(@EqualsAndHashCode) を付与すると hashCode() は自動で算出されるようになりますが、JPA @Entity では上記のような理由で、ハッシュ値が計算できなかったり要件を満たせなくなったりします。\n 次のリンク先により詳しく解説が有ります:\n   Lombok and JPA: What Could Go Wrong?\n  Lombok \u0026amp; Hibernate: How to Avoid Common Pitfalls\n   equals() や hashCode() は、大抵の場合デフォルト状態で上手くいきます。考慮無くオーバライドしてしまうと逆に問題を発生させてしまう可能性もある、ということです。\n   JPAのエンティティにはequalsとhashCodeを実装すべきか？ - スタック・オーバーフロー\n   ","description":"","id":14,"section":"blog","tags":["jpa","lombok"],"title":"JPA Entity には Lombok の @Data(@EqualsAndHashCode) を使用すべきでない","uri":"https://yukihane.github.io/blog/202107/31/dont-use-lombok-with-jpa/"},{"content":" By default the built RestTemplate will attempt to use the most suitable ClientHttpRequestFactory\n  — RestTemplateBuilder JavaDoc   とありますが、具体的にどうやって決めているの？という話です。\n ClientHttpRequestFactorySupplierをみると一目瞭然ですが、\n  Apache HttpClient (org.apache.http.client.HttpClient) がクラスパスに存在すればそれを採用する\n  OkHttp (okhttp3.OkHttpClient) がクラスパスに存在すればそれを採用する\n  上記のものがいずれも無ければ java.net.HttpURLConnection を採用する\n   という実装になっています。\n ","description":"","id":15,"section":"blog","tags":["spring-boot"],"title":"RestTemplateが採用するHTTPクライアント実装の順序","uri":"https://yukihane.github.io/blog/202107/25/resttemplate-impl-order/"},{"content":"はじめに 前回 は ts-loader を用いて TypeScript をビルドしました。\n 簡潔にセットアップできたのは良いのですが、実際にはPolyfillを行いたいので babel-loader をベースに再構築することにします。また、自動テスト( jest )も導入します。\n 今回の実証コードはこちらです:\n   https://github.com/yukihane/hello-java/tree/master/spring/with-ts-babel\n     手順 Spring Boot プロジェクトを構成する 前回 と同じです。\n  Yarn プロジェクトを構成する 今回は webpack init コマンドを利用せず、必要なものを明示的に導入します。 次のコマンドで dependencies を追加します:\n yarn init -y yarn add --dev typescript webpack webpack-cli babel-loader @babel/core @babel/plugin-proposal-class-properties @babel/preset-env @babel/preset-typescript yarn add core-js   package.json に前回自動で追加された scripts セクションを手動で追加します:\n package.json \u0026#34;scripts\u0026#34;: { \u0026#34;build\u0026#34;: \u0026#34;webpack --mode=production --node-env=production\u0026#34;, \u0026#34;build:dev\u0026#34;: \u0026#34;webpack --mode=development\u0026#34;, \u0026#34;build:prod\u0026#34;: \u0026#34;webpack --mode=production --node-env=production\u0026#34;, \u0026#34;watch\u0026#34;: \u0026#34;webpack --watch\u0026#34; }   webpack.config.js, tsconfig.json は 前回 のものをコピーしてきます。\n その上で、 webpack.config.js に記述されている ts-loader 部分を babel-loader に書き換え、 @babel/preset-env の設定を追記します。\n webpack.config.js ... { loader: \u0026#34;babel-loader\u0026#34;, options: { exclude: [ // \\\\ for Windows, \\/ for Mac OS and Linux /node_modules[\\\\\\/]core-js/, /node_modules[\\\\\\/]webpack[\\\\\\/]buildin/, ], presets: [ [ \u0026#34;@babel/preset-env\u0026#34;, { useBuiltIns: \u0026#34;usage\u0026#34;, corejs: \u0026#34;3\u0026#34;, shippedProposals: true, }, ], \u0026#34;@babel/preset-typescript\u0026#34;, ], plugins: [\u0026#34;@babel/plugin-proposal-class-properties\u0026#34;], }, }, ...   更に、 package.json へ browserslist の設定を追記します。\n package.json  \u0026#34;browserslist\u0026#34;: [ \u0026#34;defaults\u0026#34; ]   補足 必要な dependencies は次を参照しました:\n   babel-loader | webpack\n  microsoft / TypeScript-Babel-Starter - GitHub\n   browserslist など、 @babel/preset-env の設定は次を参考にしました:\n   @babel/preset-env \u0026gt; Browserslist Integration · Babel\n  browserslist / browserslist - GitHub\n   browserslist で設定する値は 公式のFull Listに記載されています。 また、設定値が具体的にどのブラウザを対象にしているかは、次のコマンドで確認できます:\n npx browserslist \u0026#34;defaults\u0026#34;     Yarn を Gradle に統合する 前回 と同じです。\n  ビルドしてみる 前回 と同じく、 UAParser.js をインストールし、同じサンプルコードを追加します。\n 加えて、 babel-loader の設定で、 ua-parser-js を除外するよう設定します。\n webpack.config.js ... module: { rules: [ { loader: \u0026#34;babel-loader\u0026#34;, options: { exclude: [ ... /node_modules[\\\\\\/]ua-parser-js/, ], ...   補足 上記の設定追加を行わない場合、コンパイル時に次の警告\n WARNING in ./src/main/js/index.ts 3:19-27 export \u0026#39;UAParser\u0026#39; (imported as \u0026#39;UAParser\u0026#39;) was not found in \u0026#39;ua-parser-js\u0026#39; (module has no exports)   及び実行時に次のエラー\n Uncaught TypeError: ua_parser_js__WEBPACK_IMPORTED_MODULE_0__.UAParser is not a constructor   が発生します。\n この件に関して詳細は次を参照してみてください:\n   UAParser.js をインポートできない - スタック・オーバーフロー\n     Spring Boot プロセスにデバッガ(Eclipse)をアタッチする 同じく 前回 を参照してください。\n  自動テストを実行する(Jest) いくつかやり方はあるようですが、今回は ts-jest を利用します。\n yarn add --dev jest @types/jest ts-jest   package.json に jest セクションを追加します:\n package.json \u0026#34;jest\u0026#34;: { \u0026#34;roots\u0026#34;: [ \u0026#34;\u0026lt;rootDir\u0026gt;/src/main/js\u0026#34; ], \u0026#34;transform\u0026#34;: { \u0026#34;^.+\\\\.tsx?$\u0026#34;: \u0026#34;ts-jest\u0026#34; }, \u0026#34;testRegex\u0026#34;: \u0026#34;(/__tests__/.*|\\\\.(test|spec))\\\\.(tsx?|jsx?)$\u0026#34;, \u0026#34;moduleFileExtensions\u0026#34;: [ \u0026#34;ts\u0026#34;, \u0026#34;tsx\u0026#34;, \u0026#34;js\u0026#34;, \u0026#34;json\u0026#34;, \u0026#34;jsx\u0026#34; ] }   script セクションを編集し、testを組み込みます。\n package.json \u0026#34;scripts\u0026#34;: { \u0026#34;build\u0026#34;: \u0026#34;yarn run test \u0026amp;\u0026amp; webpack --mode=production --node-env=production\u0026#34;, ... \u0026#34;test\u0026#34;: \u0026#34;jest\u0026#34; },   補足 Jest の設定は次を参考にしています:\n   Jest - TypeScript Deep Dive 日本語版\n   Jest の公式ドキュメントでは、別の実現手段として、Babel経由でテストする設定が説明されています:\n   はじめましょう \u0026gt; TypeScript を使用する · Jest\n     型チェックを行う @babel/preset-typescript は 型チェックを行ってくれない ので、別途チェックする必要が有ります。これは tsc で実現します。\n そのために tsconfig.json を再編集します。\n tsconfig.json { \u0026#34;include\u0026#34;: [\u0026#34;src/main/js/**/*\u0026#34;], \u0026#34;compilerOptions\u0026#34;: { \u0026#34;strict\u0026#34;: true, \u0026#34;module\u0026#34;: \u0026#34;es6\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;es5\u0026#34;, \u0026#34;moduleResolution\u0026#34;: \u0026#34;Node\u0026#34;, \u0026#34;noEmit\u0026#34;: true } }   package.json の script セクションを書き換え、型チェックも行うようにします:\n package.json  \u0026#34;scripts\u0026#34;: { \u0026#34;build\u0026#34;: \u0026#34;yarn run test \u0026amp;\u0026amp; webpack --mode=production --node-env=production\u0026#34;, \u0026#34;build:dev\u0026#34;: \u0026#34;webpack --mode=development\u0026#34;, \u0026#34;build:prod\u0026#34;: \u0026#34;webpack --mode=production --node-env=production\u0026#34;, \u0026#34;watch\u0026#34;: \u0026#34;webpack --watch\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;tsc \u0026amp;\u0026amp; jest\u0026#34; },   補足 tsconfig.json の設定については下記を参考にしました:\n   TypeScript: Documentation - Using Babel with TypeScript\n  Producing ES6-module output from TypeScript, with Jest installed, without producing errors - Stack Overflow\n  Typescript cannot find redux - Stack Overflow\n          ","description":"","id":16,"section":"blog","tags":["spring-boot","javascript"],"title":"Spring BootとTypeScriptで開発するためのプロジェクト設定(Gradle) - Polyfillも必要とする場合","uri":"https://yukihane.github.io/blog/202107/11/spring-boot-with-babel/"},{"content":"はじめに Spring Boot で JavaScript を扱うときは素のJSをhtml(Thymeleafテンプレート)に \u0026lt;script\u0026gt; タグで埋め込む、というのが多分一般的で手っ取り早い方法かと思います。\n ただ、そろそろ素のJSを書くのをやめたい、という思いもあり、今回設定方法を考え、記録しました。\n 私は普段はMavenを使っているのですが、今回は事情によりGradleプロジェクトの設定方法です。 (Mavenでも同じ方針で実現できると思います)\n 今回の実証コードはこちらです:\n   https://github.com/yukihane/hello-java/tree/master/spring/with-ts\n     手順 Spring Boot プロジェクトを構成する https://start.spring.io/ で、Webアプリケーションを構成します。\n 今回は次のdependenciesを追加しました。\n   Spring Boot DevTools\n  Lombok\n  Spring Configuration Processor\n  Spring Web\n  Thymeleaf\n   Project は、冒頭に記載した通り今回は \u0026#34;Gradle Project\u0026#34; を選択します。\n build.gradle にデフォルトで導入するプラグインをセットアップします。\n build.gradle plugins { // ... id \u0026#39;eclipse\u0026#39; id \u0026#39;com.diffplug.eclipse.apt\u0026#39; version \u0026#39;3.30.0\u0026#39; id \u0026#39;com.dorongold.task-tree\u0026#39; version \u0026#39;2.1.0\u0026#39; }   Eclipseプロジェクトを構成します。\n gradle build cleanEclipse eclipse   Eclipse メニューの File \u0026gt; Import を選択し、ダイアログの General \u0026gt; Existing Projects into Workspace から今回のプロジェクトをインポートします。\n 補足 GradleプロジェクトをEclipse(Spring Tools 4 for Eclipse)にインポートする手順は次のエントリで説明しています。\n   GradleでSpring Bootプロジェクトを作成してSTS(Eclipse)でインポートする手順 – 発火後忘失\n     Yarn プロジェクトを構成する 上記で作成したGradleプロジェクトのルートディレクトリでYarnプロジェクトを生成します。\n yarn init -y yarn add --dev webpack webpack-cli yarn webpack init   yarn webpack init を実行するとインタラクティブにプロジェクトが構成されます。 それぞれの質問には次のように返答します:\n     質問 返答     Would you like to install \u0026#39;@webpack-cli/generators\u0026#39; package?\n Yes\n   Which of the following JS solutions do you want to use?\n Typescript\n   Do you want to use webpack-dev-server?\n No\n   Do you want to simplify the creation of HTML files for your bundle?\n No\n   Do you want to add PWA support?\n No\n   Which of the following CSS solutions do you want to use?\n none\n   Do you like to install prettier to format generated configuration?\n Yes\n   Overwrite package.json?\n y (overwrite)\n    続いて、不要なファイルが生成されているので削除します:\n rm README.md index.html src/index.ts   tsconfig.json を次のように書き換えます:\n tsconfig.json { \u0026#34;compilerOptions\u0026#34;: { \u0026#34;strict\u0026#34;: true, \u0026#34;module\u0026#34;: \u0026#34;es6\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;es5\u0026#34;, }, }   javascript ファイルは src/main/js に、そして出力は build/resources/main/static/static に出力するよう設定します。 また、 mylib という名前のライブラリとして生成します。\n webpack.config.js \u0026#34;use strict\u0026#34;; // Generated using webpack-cli https://github.com/webpack/webpack-cli const path = require(\u0026#34;path\u0026#34;); const isProduction = process.env.NODE_ENV == \u0026#34;production\u0026#34;; const config = { // https://webpack.js.org/concepts/output/#multiple-entry-points // https://webpack.js.org/configuration/output/#outputlibrary entry: { mylib: \u0026#34;./src/main/js/index.ts\u0026#34;, }, output: { library: \u0026#34;[name]\u0026#34;, path: path.resolve(__dirname, \u0026#34;build/resources/main/static/static\u0026#34;), }, plugins: [ // Add your plugins here // Learn more about plugins from https://webpack.js.org/configuration/plugins/ ], module: { rules: [ { test: /\\.(ts|tsx)$/i, loader: \u0026#34;ts-loader\u0026#34;, exclude: [\u0026#34;/node_modules/\u0026#34;], }, // Add your rules for custom modules here // Learn more about loaders from https://webpack.js.org/loaders/ ], }, resolve: { extensions: [\u0026#34;.tsx\u0026#34;, \u0026#34;.ts\u0026#34;, \u0026#34;.js\u0026#34;], }, }; module.exports = () =\u0026gt; { if (isProduction) { config.mode = \u0026#34;production\u0026#34;; } else { config.mode = \u0026#34;development\u0026#34;; config.devtool = \u0026#34;inline-source-map\u0026#34;; } return config; };   補足 yarn add の対象は次のページを参考にしました:\n   Getting Started | webpack\n   webpack.config.js の設定は、 `ts-loader`のリファレンス中で \u0026#34;simplest\u0026#34; と表現されていた こちらのサンプル も参考にしています。\n また、次の説明も参考にしています:\n   Output \u0026gt; Multiple Entry Points | webpack\n  Output \u0026gt; output.library | webpack\n     Yarn を Gradle に統合する gradle build で ts のビルドも含めて実行できるようにします。\n gradle-node-plugin を導入し、 task の依存関係を設定します:\n build.gradle plugins { // ... id \u0026#39;com.github.node-gradle.node\u0026#39; version \u0026#39;3.1.0\u0026#39; } // ... yarn_build.dependsOn yarn_install processResources.dependsOn yarn_build    ビルドしてみる 設定はここまでで完了しました。 試しにサンプルコードをおいてビルドしてみます。\n なお、サンプルコードでは UAParser.js を利用していますので、事前に\n yarn add ua-parser-js yarn add --dev @types/ua-parser-js   を実行しています。\n 以下、サンプルコード:\n src/main/java/com/github/yukihane/withts/MyController.java @Controller @RequestMapping(\u0026#34;\u0026#34;) public class MyController { @GetMapping public String index(final Model model) { model.addAttribute(\u0026#34;now\u0026#34;, new Date()); return \u0026#34;index\u0026#34;; } }   src/main/resources/templates/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;ja\u0026#34; xmlns:th=\u0026#34;http://www.thymeleaf.org\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; table, td, th { border: 1px solid; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;サーバ時刻\u0026lt;/td\u0026gt; \u0026lt;td id=\u0026#34;server\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;ブラウザ\u0026lt;/td\u0026gt; \u0026lt;td id=\u0026#34;client\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;../../../../build/resources/main/static/static/mylib.js\u0026#34; th:src=\u0026#34;@{/static/mylib.js}\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script th:inline=\u0026#34;javascript\u0026#34;\u0026gt; window.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, (event) =\u0026gt; { const serverTime = /*[[${now}]]*/ \u0026#34;2020-01-01T10:10:10.000+09:00\u0026#34;; const server = document.getElementById(\u0026#34;server\u0026#34;); server.innerText = serverTime; const clientTime = mylib.getOS(); const client = document.getElementById(\u0026#34;client\u0026#34;); client.innerText = clientTime; }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   src/main/js/index.ts import { UAParser } from \u0026#34;ua-parser-js\u0026#34;; export const getOS = (userAgent: string) =\u0026gt; { const parser = new UAParser(userAgent); return JSON.stringify(parser.getOS()); };   上記のソースを作成し終わったら、ビルドし、実行してみます:\n gradle clean build java -jar build/libs/with-ts-0.0.1-SNAPSHOT.jar   http://localhost:8080 にアクセスすると、サーバ側で取得した時刻がThymeleafによって挿入され、また、ブラウザ側で取得したOS情報が JavaScript によって挿入されているのが確認できます。\n  Hot Swapping する(コード変更を自動反映する) 前述の方法は jar を作成して実行するものでしたが、これでは開発がやりにくいので、ソースを編集したらリアルタイムで反映してくれるように実行方法を工夫します。\n まず、TypeScriptの更新が行われたら自動でビルドするようにwatchします。\n yarn watch   Java側の変更を検知してビルドし直すようにgradleでwatchします。\n gradle -t classes -x yarn_build   サーバを起動します。\n gradle bootRun -x yarn_build   これで、TypeScript, Java 等のコードを修正し保存すると自動でSpring Bootが再起動し反映されるようになりました。\n  Spring Boot プロセスにデバッガ(Eclipse)をアタッチする はじめに、起動時に suspend する必要がなければ、次の設定を行っておきます:\n build.gradle bootRun { debugOptions { suspend = false } }   そして、前節で説明した最後のコマンド gradle bootRun -x yarn_build に、 --debug-jvm オプションを付けて実行します:\n gradle bootRun -x yarn_build --debug-jvm   これでデバッガをアタッチできるような状態でSpring Bootが起動しました。\n 続いて、Eclipse側で設定を行いアタッチします。\n  メニューから Run \u0026gt; Debug Configurations を選択します。\n  Remote Java Application を右クリックし、 New Configuration を選択します。\n  Project に今回のプロジェクトを設定します。 Port を 5005 に設定変更します。\n   設定が完了したら、 Debug ボタンを押してデバッグを開始します。\n 補足 Eclipse をアタッチしている状態で Eclipse で Javaコードを編集した場合、デバッガ経由で変更が反映されるので gradle -t classes -x yarn_build は必要ありません。 (ただし、静的リソースファイルなどの更新は検知できなくなります)\n Grdleプロジェクトのデバッグオプションについてはこちらに記載しています:\n   Spring BootのGradleでのデバッグ実行方法 – 発火後忘失\n  debug gradle bootRun having server=n - Stack Overflow\n     自動テストを実行する(Jest) 説明が前後してしまいますが、次の記事を参照してください。 次の記事はBabelを組み込む方法ですが、Jestに関しては同じ設定でいけるはずです。\n   Spring BootとTypeScriptで開発するためのプロジェクト設定(Gradle) - Polyfillも必要とする場合\n      ","description":"","id":17,"section":"blog","tags":["spring-boot","javascript"],"title":"Spring BootとTypeScriptで開発するためのプロジェクト設定(Gradle)","uri":"https://yukihane.github.io/blog/202107/10/spring-boot-with-typescript/"},{"content":"HttpServletRequest#getRemoteUser() をログ出力(Tomcatの %u)しているのですが、Spring Boot 2.5.0 から返ってくる値が変わったようです。\n どの変更が影響しているのか調べたところ、次のものが該当するようです。\n   5.5.0-M2 Release Notes\n  getRemoteUser() returns principal name #9211\n      実際にどうなったか見てみます。\n   KeycloakをIdPにしてSpring Security OAuth 2.0 Login/Client を試してみる – 発火後忘失\n   で作成した サンプル実装であるところの\n   https://github.com/yukihane/hello-java/tree/master/spring/oidc/oidc-example\n   を利用します。\n 上記のサンプル実装を次のように変更します。\n public class HelloController { @GetMapping public String index(final HttpServletRequest request) { final Authentication authn = SecurityContextHolder.getContext().getAuthentication(); log.info(\u0026#34;Authentication: {}\u0026#34;, authn); return request.getRemoteUser(); } }   また、Spring Bootのバージョンを 2.4 系の最新版である 2.4.8 にアップグレードします(Spring Security のバージョンは 5.4.7 になります)。\n その上で http://localhost:8080 にアクセスしてログインすると、次の出力を得ます。\n Name: [myuser], Granted Authorities: [[ROLE_USER, SCOPE_email, SCOPE_profile]], User Attributes: [{sub=5512f41b-43b1-40cf-858c-ab27bc6a5e9f, email_verified=false, name=my-firstname my-lastname, preferred_username=myuser, given_name=my-firstname, family_name=my-lastname, email=myuser@example.com}]   続いて、ソースコードはそのまま、Spring Bootのバージョンを 2.5.0 に変更して同様にアクセスしてみると、次の出力を得ます。 なおSpring Securityのバージョンは 5.5.0 です。\n myuser   以上、Spring Boot 2.5.0 以降(Spring Security 5.5.0-M2 以降)で HttpServletRequest#getRemoteUser() の値が変わっていることを確認できました。\n ","description":"","id":18,"section":"blog","tags":["spring-boot","spring-security"],"title":"Spring Boot 2.5.0(Spring Security 5.5.0-M2)でremoteUserの値が変わった","uri":"https://yukihane.github.io/blog/202106/30/spring-boot-remoteuser-is-changed/"},{"content":"はじめに SteamのDLC等をダウンロードしようとしたとき、IPアドレスによるアクセス制限が課されている場合があり、それを回避する必要が出る状況がたまにあります。\n VPNを利用したりする方法が解説されていることもありますが、VPN方式だとPCに別途アプリをインストールしたりする必要があるので煩雑です。\n 私はそのような用途に、AWS EC2 経由でのアクセスを行っているのですが、毎回やり方を思い出すのに時間がかかったりするのでメモを残しておきます。\n Windowsから設定する前提です。\n   前提知識   EC2基礎操作\n  Linuxの基本操作\n     セットアップ EC2 インスタンを起動します。\n     項目名 値 備考     リージョン\n バージニア北部\n 必要に応じて変更\n   AMI\n Amazon Linux 2\n 無料枠対象になっているやつです\n   セキュリティグループ\n SSHに加えて、ポート範囲: 3128, ソース: (自分のIPv4アドレス)/32 を追加\n 3128 が squid のデフォルトリッスンポートです\n    上記でセットアップしたEC2インスタンスにsshでログインします。 その後、次の操作を行います。\n squidをインストールします:\n sudo yum -y install squid   /etc/squid/squid.conf を編集して、自分のPCからの接続を許可します:\n $ sudo diff -c /etc/squid/squid.conf{.orig,} *** /etc/squid/squid.conf.orig 2021-06-21 00:00:12.999196705 +0000 --- /etc/squid/squid.conf 2021-06-21 00:01:11.786605896 +0000 *************** *** 10,15 **** --- 10,16 ---- acl localnet src 192.168.0.0/16 # RFC1918 possible internal network acl localnet src fc00::/7 # RFC 4193 local private network range acl localnet src fe80::/10 # RFC 4291 link-local (directly plugged) machines + acl mypc src (自分のIPv4アドレス)/32 # セキュリティグループに設定したものと同じ acl SSL_ports port 443 acl Safe_ports port 80 # http *************** *** 51,56 **** --- 52,58 ---- # from where browsing should be allowed http_access allow localnet http_access allow localhost + http_access allow mypc # And finally deny all other access to this proxy http_access deny all   squidを起動します:\n sudo systemctl start squid   あとは、AWS EC2 コンソールでこの EC インスタンスの パブリック IPv4 アドレス を調べて、ブラウザのプロキシ設定に、サーバ名にはこのパブリック IPv4 アドレスを、ポート番号に 3128 を設定すれば完了です。\n Firefox であれば、システムの設定を変更せずに、ブラウザに閉じたプロキシ設定ができます。 Google Chrome は OS(Windows) の設定と統合されているようでした(ので今回の用途には不便です)。\n   ","description":"","id":19,"section":"blog","tags":["diary"],"title":"AWS EC2 で squid プロキシサーバを立てる","uri":"https://yukihane.github.io/blog/202106/21/aws-squid-proxy/"},{"content":"Spring Boot アプリケーションの性能評価を行っているのですが、実装したアプリケーション部分ではなく、webサーバかどこかがパフォーマンスボトルネックになっているように思われる事象に直面し、その原因を調べたいと思っています。\n   【真夏の夜のミステリー】Tomcatを殺したのは誰だ？：現場から学ぶWebアプリ開発のトラブルハック（6）（2/3 ページ） - ＠IT\n   に書かれていることに近い状況になっているのでは、と考えたのですが、実際どういう状況なのか確認したい、メトリクスをログ出力したい、と調べたところ、同じように考えられている記事がありました。\n   Spring Boot Actuatorで、Micrometerで収集したメトリクスをログに出力する - CLOVER🍀\n   LoggingMeterRegistry というクラスがビルトインされているので、これを利用すれば良いです。\n なお、 LoggingMeterRegistry に対するプロパティ設定は 用意されていない ようでした(ので必要に応じて自前で用意します)。\n あとは、Tomcatのメトリクスを出力するために、プロパティに以下の設定を行えばOKです。\n # https://docs.spring.io/spring-boot/docs/2.5.1/reference/html/actuator.html#actuator.metrics.supported.tomcat server.tomcat.mbeanregistry.enabled=true   サンプル実装はこちら: https://github.com/yukihane/hello-java/tree/master/spring/tomcat-monitoring-example\n ","description":"","id":20,"section":"blog","tags":["spring-boot","tomcat"],"title":"Spring Boot で Tomcat のメトリクスを出力する","uri":"https://yukihane.github.io/blog/202106/12/spring-boot-tomcat-metrics/"},{"content":"これまで GitHub Actions を使ったことがなかったのですが、\n   GitHub Pagesの更新を自動化したい - スタック・オーバーフロー\n   という質問を見かけ、丁度よいお題だと思ったのでこれを実現してみることにしました。\n リポジトリ作成とコードコミット まず、GitHub Pages用のリポジトリとそれを定期更新するためのプログラムを管理するリポジトリの2つを用意します。これらは1つのリポジトリにまとめてしまえると思いますが、冒頭の質問者の環境はそうでは無さそうだったので今回は別々にしました。\n なお、私は既に個人用に GitHub Pages を利用しているので、別途 hello-github-actions という Organization を作成して、そちらに上記2リポジトリを作成しました。\n   GitHub Pages 用: hello-github-actions/hello-github-actions.github.io\n  更新プログラム管理用: hello-github-actions/updater\n   更新プログラムは こんな感じ のもので、スタック・オーバーフローのRSSを取得して public ディレクトリにhtmlで書き出すものです。 この public ディレクトリ以下を GitHub Pages に表示する設定を行っていきます。\n   Deploy key 設定 GitHub Actions for GitHub Pages というアクションを利用して更新を行います。\n このページの Deploy to external repository external_repository に記載されている機能を用いるために、 Deploy key の設定を行っておきます。\n 鍵生成 まず、 デプロイキーの管理 \u0026gt; デプロイキー \u0026gt; セットアップ の手順通り、 ssh-keygen コマンドでキーを生成します。\n ssh-keygen -t ed25519 -C \u0026#34;your_email@example.com\u0026#34;    GitHub Pages リポジトリへ deploy key として公開鍵を登録 続いて、公開鍵を GitHub Pages のリポジトリに Deploy key として登録します。\n リポジトリの Settings \u0026gt; Deploy keys \u0026gt; Add deploy key ボタンから登録できます。 上記した私のリポジトリの場合は\n   https://github.com/hello-github-actions/hello-github-actions.github.io/settings/keys/new\n   から登録することになります。 Allow write access のチェックを入れます。Title は何でも良いようです。\n  更新プログラム リポジトリへ repository secret として秘密鍵を登録 その後、秘密鍵を更新プログラムリポジトリのシークレットとして登録します。\n リポジトリの Settings \u0026gt; Secrets \u0026gt; New repository secret ボタンから登録できます。 私のリポジトリの場合は\n   https://github.com/hello-github-actions/updater/settings/secrets/actions/new\n   から登録することになります。 Name は後で GitHub Actions スクリプトから変数名として利用するので覚えておいてください。今回のサンプル実装では リファレンスのサンプルと同じく ACTIONS_DEPLOY_KEY という名前に設定しています。\n    GitHub Actions 設定 更新プログラムを定期的に実行したいので、更新プログラムリポジトリに設定を行います。\n .github/workflows に ymlファイルを作成します。名前は何でも良いようなので今回は update.yml としました。\n 記載内容は\n   https://docs.github.com/ja/actions\n   などを参考にし、結果的に次のようになっています。\n   https://github.com/hello-github-actions/updater/blob/main/.github/workflows/update.yml\n   前述した通り、 ACTIONS_DEPLOY_KEY という名前を変数として用いています。\n   成果物   https://hello-github-actions.github.io/\n   1時間おきに https://ja.stackoverflow.com/ の上位の質問を取得して一覧します。\n 毎時15分に更新する設定にしていますが、 GitHub Actionsのログを見ると 30-40分程度遅れて実行されているようです。 (検証時、書き方が間違っているせいで実行できていないのかとあせりました…)\n   ","description":"","id":21,"section":"blog","tags":["github"],"title":"GitHub Actions を使って GitHub Pages を定期更新する","uri":"https://yukihane.github.io/blog/202106/06/hello-github-actions/"},{"content":"Spring Boot を実行していると、Tomcatのデフォルトエラーページが表示されるような事象に遭遇することがあります。\n   Tomcat invokes ErrorReportValve directly for malformed URLs · Issue #21257 · spring-projects/spring-boot\n   このページのカスタマイズ方法は、上記issueにありますが、現状Spring Boot フレームワークでは提供されておらず少しトリッキーです。\n まず ErrorReportValve を継承したカスタムクラスを用意し、ここでhtmlを生成します。\n import java.io.IOException; import java.io.Writer; import java.util.concurrent.atomic.AtomicBoolean; import java.util.logging.Logger; import org.apache.catalina.connector.Request; import org.apache.catalina.connector.Response; import org.apache.catalina.valves.ErrorReportValve; import org.apache.coyote.ActionCode; import org.apache.tomcat.util.ExceptionUtils; public class CustomErrorReportValve extends ErrorReportValve { // Create a simple logger Logger log = Logger.getLogger(CustomErrorReportValve.class.getName()); @Override protected void report(final Request request, final Response response, final Throwable throwable) { // ErrorReportValve を参考に実装 final int statusCode = response.getStatus(); // Do nothing on a 1xx, 2xx and 3xx status // Do nothing if anything has been written already // Do nothing if the response hasn\u0026#39;t been explicitly marked as in error // and that error has not been reported. if (statusCode \u0026lt; 400 || response.getContentWritten() \u0026gt; 0 || !response.setErrorReported()) { return; } // If an error has occurred that prevents further I/O, don\u0026#39;t waste time // producing an error report that will never be read final AtomicBoolean result = new AtomicBoolean(false); response.getCoyoteResponse().action(ActionCode.IS_IO_ALLOWED, result); if (!result.get()) { return; } try { try { response.setContentType(\u0026#34;text/html\u0026#34;); response.setCharacterEncoding(\u0026#34;utf-8\u0026#34;); } catch (final Throwable t) { ExceptionUtils.handleThrowable(t); if (container.getLogger().isDebugEnabled()) { container.getLogger().debug(\u0026#34;status.setContentType\u0026#34;, t); } } final Writer writer = response.getReporter(); if (writer != null) { // If writer is null, it\u0026#39;s an indication that the response has // been hard committed already, which should never happen writer.write(\u0026#34;\u0026lt;!doctype html\u0026gt;\u0026lt;html lang=\\\u0026#34;en\\\u0026#34;\u0026gt;\u0026lt;title\u0026gt;error\u0026lt;/title\u0026gt;\u0026lt;body\u0026gt;Error occured.\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#34;); response.finishResponse(); } } catch (IOException | IllegalStateException e) { // Ignore } } }   そしてこれを登録します。\n import org.apache.catalina.Container; import org.apache.catalina.core.StandardHost; import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory; import org.springframework.boot.web.server.WebServerFactoryCustomizer; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class MyConfig { // https://docs.spring.io/spring-boot/docs/2.4.4/reference/htmlsingle/#howto-use-tomcat-legacycookieprocessor // https://github.com/spring-projects/spring-boot/issues/21257#issuecomment-745565376 @Bean public WebServerFactoryCustomizer\u0026lt;TomcatServletWebServerFactory\u0026gt; errorReportValveCustomizer() { return (factory) -\u0026gt; { factory.addContextCustomizers(context -\u0026gt; { final Container parent = context.getParent(); if (parent instanceof StandardHost) { ((StandardHost) parent).setErrorReportValveClass( \u0026#34;com.example.errorcontrollerthrowexceptionexample.CustomErrorReportValve\u0026#34;); } }); }; } }   これで、元々 `ErrorReportValve ` で生成されていた デフォルトエラーページ の代わりに、自前で用意したページが表示されるようになります。\n   参考実装: https://github.com/yukihane/hello-java/tree/master/spring/errorcontroller-throw-exception-example\n   ","description":"","id":22,"section":"blog","tags":["spring-boot"],"title":"Spring BootでTomcatのデフォルトエラーページが出るのを抑止する","uri":"https://yukihane.github.io/blog/202105/21/spring-boot-avoid-tomcat-error-page/"},{"content":"次のblogエントリがバズっていました:\n   Gitのワークフローについての私のスタンス | おそらくはそれさえも平凡な日々\n   大局としては同意なのですが、ミクロな点では、 rebase 恐怖症というか、 merge を信頼し過ぎているというか、少し私とは意見が異なると感じました。 そして、上記のblogのような意見が多数派ではないかと思いますので、改めて merge の怖いところを具体例で示したいと思います。\n 次のようにGitを操作してみてください。\n #!/bin/bash set -eux mkdir sample-git cd sample-git git init git commit --allow-empty -m init # master で hello.txt 作成 echo \u0026#39;Hello, world!\u0026#39; \u0026gt; hello.txt git add hello.txt \u0026amp;\u0026amp; git commit -m \u0026#39;create hello.txt\u0026#39; # feature で hello.txt 削除、 bye.txt 作成 git checkout -b feature git rm hello.txt echo \u0026#39;さようなら、世界！\u0026#39; \u0026gt; bye.txt git add bye.txt \u0026amp;\u0026amp; git commit -m \u0026#39;remove hello.txt and create bye.txt\u0026#39; # master に feature を merge # ...をしたつもりだが... git checkout master git merge --no-ff --no-commit feature git reset -- hello.txt git -c core.editor=/bin/true merge --continue git checkout -- .   git-log や履歴グラフでは feature で行った変更が master にマージされているように見えます。 が、実際にはそうなっておらず、 master では feature で削除した hello.txt が存在しています。\n このように、 merge はぱっと見と実際が異なっている場合があるので注意を要します(このようなマージは、悪意が無くとも、 conflict が発生したときにポカミスとかでやってしまうことがあります)。\n ","description":"","id":23,"section":"blog","tags":["git"],"title":"Git の merge も思いの外危険","uri":"https://yukihane.github.io/blog/202105/19/git-merge-risk/"},{"content":"\u0026lt;script\u0026gt; タグの src に URL 書く場合、クエリパラメータ連結の \u0026amp; ってどう書くべきなんだろう、という話です。\n 結論としては、以下のように、 \u0026amp;amp; とするのが無難、ということのようです。\n \u0026lt;script src=\u0026#34;http://example.com/?foo=1\u0026amp;amp;bar=2\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;     Should src be HTML-escaped in script tags in HTML? - Stack Overflow\n   からリンクされている \u0026#34;HTML Living Standard — Last Updated 18 May 2021 13.2.5.36 Attribute value (double-quoted) state\u0026#34; によると、ダブルクオートされた(※シングルクオートも同じ)文字列中に \u0026amp; が表れた場合、取り敢えず 文字参照 であるとみなそうとするので誤動作を引き起こす可能性がある、ようです。\n とすると、 \u0026lt;a\u0026gt; タグの href も同様にエスケープする必要がありそうですね。…とググった結果(そのとおりでした):\n   Do I encode ampersands in \u0026lt;a href…​\u0026gt;? - Stack Overflow\n   ","description":"","id":24,"section":"blog","tags":["html"],"title":"script src に設定する URL の \u0026 はどう書けば良い？","uri":"https://yukihane.github.io/blog/202105/19/url-amp/"},{"content":"最初に注意点:\n   初めての場合、使えるようになるまで17時間強かかる。\n  最低割り当て時間は24時間。つまり1回利用すると最低 3,000円弱はかかる。\n  インスタンスを終了すると、次のインスタンスを起動できるようになるまで1時間半程度かかる。\n    Mac上で検証を行う必要が出たので、AWS EC2 の Mac インスタンスで行うことにしました…が、思ったより使い勝手が悪かったです。\n 概要は次のページに記載されています。\n   https://aws.amazon.com/jp/ec2/instance-types/mac/\n    EC2 Mac インスタンスは、Apple の macOS ソフトウェアライセンス契約を遵守するために、24 時間を最小割当期間として、1 秒あたりで請求されます。\n   とあるとおり、最低でも24時間分の料金がかかります。\n まず、Macのインスタンスを動かすにはMac用の mac1 というDedicated Hostを割り当ててもらう必要があります(自分用にMac mini筐体を借りるイメージですね)が、初期状態だとquotaで最大値が0となっています。つまり割り当てが行なえません。\n なので、初めての場合、このquotaの引き上げ申請を行う必要があります。これは下記のURLから行えました。\n   https://console.aws.amazon.com/servicequotas/home/services/ec2/quotas/L-A8448DC5\n   (自分が利用するリージョンであることを確認してください)\n 自分は昼の12時に申請して、翌5時に申請が通っていました。17時間程度掛かったことになります。\n その後の dedicated ホストの割り当て、インスタンス起動は次のページを参考にさせてもらい、この通りで上手くいきました。 ただ、インスタンスを起動してからログインできるようになるまでの時間もLinuxやWindowsと比較してかなりかかりました(計っていないのですが10分程度？)。\n   mac EC2にWindows10環境からSSH・VNC接続してみた - 好奇心の赴くままに\n   起動したインスタンスを終了させると、hostの状態が\u0026#34;Pending\u0026#34;になるのですが、この状態だと次のインスタンスを生成できません。Pending状態が解除されるまで1時間半程度かかりました。\n 同じような報告が Stack Overflow にもありましたので、そういうものだと考えておくべきなのでしょう。\n   My AWS Mac1 Dedicated Host is stuck in a Pending state and I can\u0026#39;t create Mac instances - Stack Overflow\n   ","description":"","id":25,"section":"blog","tags":["aws"],"title":"AWS EC2 の Mac インスタンスを試してみた","uri":"https://yukihane.github.io/blog/202105/16/aws-mac/"},{"content":"今日もOAuthは認証じゃなくて認可の仕組みだ云々という話題でソーシャルネットがもちきりですが、そんなことより表題の方がよっぽど気になりませんか…？\n  HTTP の Authorization リクエストヘッダーは、ユーザーエージェントがサーバーから認証を受けるための証明書を保持し、(後略)\n  — Authorization - HTTP | MDN   原文の方がどちらも英単語で表れているのでわかりやすいかな？\n  The HTTP Authorization request header contains the credentials to authenticate a user agent with a server,\n  — https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization   Stack Overflow でも同じ疑問を持ってる方がいらっしゃいました:\n   Why is the HTTP header for Authentication called Authorization?\n   ","description":"","id":26,"section":"blog","tags":["http","diary"],"title":"Authorization(認可)リクエストヘッダに設定するのは認証(authentication)情報","uri":"https://yukihane.github.io/blog/202105/15/authorization-authentication/"},{"content":"はじめに   LINEログイン機能を試してみる – 発火後忘失\n   で、 Spring Boot 2.1.7 (Spring Security 5.1.6) を利用してLINEログインを行ってみました。\n 本ドキュメントは、このコードをそのまま Spring Boot 2.4.5 へアップグレードしたところ上手く動かなかったので修正を行った記録です。\n   コード   https://github.com/yukihane/hello-java/tree/master/line/sample-line-webapp\n   なお、今回の対応前の、 Spring Boot 2.1.7 バージョンは 55b9ea4b2 です。 本文中の「昔のコード」とはこれを指します。\n   対応内容 本質と関係ないものは省略します。\n Support space-delimited oauth2 scope (spring-projects/spring-boot #15398) (表題に反して) scope の指定でスペースが許可されなくなり、カンマ , で区切らなければならなくなった模様です。\n 0274a3c\n  Support unsigned ID tokens for OIDC (spring-projects/spring-security #9494) デフォルトでは RS256 固定 なので HS256 に挿げ替えます。\n 昔のコードが不都合なく動作していたのは、(ちゃんとは見ていませんが)おそらく署名の検証を行っていないからなのではないかと思います。 OAuath2.0 と共通フローだったのではないかと。\n bbe79f9\n  LINEログイン v2.1 API における userinfo_endpoint の誤解 昔のコードでは userinfo エンドポイントは https://api.line.me/v2/profile だと誤解して設定していました。\n 昔のコードはこれで動作したのですが、Spring Securityのバージョンが上がったことで 検証が厳密になり、通らなくなっているようです。\n LINEログイン v2.1 API で UserInfo レスポンス を満たすものを返してくるのは https://api.line.me/oauth2/v2.1/verify だけのようだったので、今回これを指定しました。\n ただ、LINEログインのリファレンスにもある通り、これは \u0026#34;IDトークンのペイロード部分\u0026#34; であり、LINE社はひとことも userinfoエンドポイント である、とは言っていないんですよね (しかし v2.1 は \u0026#34;OpenID Connect プロトコルをサポートし\u0026#34;ていると言っている…じゃあuserinfoエンドポイントはどこなんだっていう)。\n また、 iat やら exp が含まれているのも、UserInfo として妥当であるとは言い難いように思われます(ユーザの属性ではないことは明らか)。\n 実装においては、APIリファレンスを見れば分かる通り、 /verify へのリクエストには id_token と client_id パラメータが必須なので、少し工夫が必要でした。\n 8cdce2a\n    まとめ LINE社の主張に反し、 LINEログイン v2.1 API は OpenID Connect プロトコルには準拠していないと考えます。 なぜならば、 userinfo エンドポイントに相当するエンドポイントを備えていないからです。 (LINE社が言うところのOIDCサポートは、発行者を検証できるid tokenを返している、という部分でしょうか。それだけでは片手落ちでしょう。)\n Spring Security のデフォルト実装を用いる場合、 openid スコープを指定するとうまく動作しません。 本文では openid を指定した実装を無理やり行いましたが、指定しない場合の実装(つまりOIDCでなくOAuth2.0として処理する)を tags/line-login-without-openid タグで行っており、こちらの方が自然だと考えます。\n   ","description":"","id":27,"section":"blog","tags":["line","spring-security","oidc"],"title":"LINEログインを試してみる(Spring Boot 2.4.5/Spring Security 5.4.6)","uri":"https://yukihane.github.io/blog/202105/06/ling-login-202105/"},{"content":"MySQL Connector/J 8.0.23 でタイムゾーン変換のメカニズムが変わりました(Spring Boot では 2.3.9以降, 2.4.3以降でこれを採用しています)。\n  Important Change: A new mechanism has been introduced for users to configure how time zone conversions should occur when time instants are saved to or retrieved from a server by Connector/J.\n  — MySQL :: MySQL Connector/J 8.0 Release Notes :: Changes in MySQL Connector/J 8.0.23 (2021-01-18, General Availability)   影響を受ける典型的な例としては、 DBサーバとクライアントで異なるタイムゾーンで動いている場合 です。\n 次のリンク先では、DBサーバが UTC, クライアント(mysql-connector-java を利用しているSpring Boot)が JST で動作している環境で検証を行いました。 具体的にどのような挙動になるのかを確認できます。\n   MySQL Connector/J 8.0.23 でセッションタイムゾーンのデフォルト挙動が変わっている - GitHub\n   ","description":"","id":28,"section":"blog","tags":["spring-boot","mysql"],"title":"MySQL Connector/J 8.0.23 でタイムゾーン変換メカニズムが変更になった","uri":"https://yukihane.github.io/blog/202104/29/mysql-connector-j-8.0.23/"},{"content":"入力フォームに値を入力して、(送信ボタンを押すのではなく)入力フィールド内でエンターキーを押すと送信される機能、\u0026#34;Implicit Submission\u0026#34;(日本語にすると\u0026#34;暗黙的送信\u0026#34;ですかね？)というそうです。\n この implicit submission ですが、有効になる条件があって、その条件を満たさない場合機能しません。 機能させるためには次のいずれかを満たす必要があるようです:\n   送信フィールドが1つ\n  submitボタンを備えている\n    If the form has no submit button, then the implicit submission mechanism must do nothing if the form has more than one field that blocks implicit submission, (後略)\n  — HTML Living Standard — Last Updated 22 October 2020 \u0026gt; 4.10.21.2 Implicit submission   ","description":"","id":29,"section":"blog","tags":["javascript"],"title":"formで(送信ボタンを押さずに)エンターキーで送信する","uri":"https://yukihane.github.io/blog/202103/21/implicit-submission/"},{"content":"書籍「ソフトウェアテストの教科書 - 品質を決定づけるテスト構成の基本と実践」第4章 ブラックボックステスト 表4-4 分類の基準として利用できる指標の一例 より。\n   ISO/IEC 9126\n  機能性、信頼性、使用性、効率性、保守性、移植性、\n  https://www.meti.go.jp/policy/it_policy/softseibi/metrics/product_metrics.pdf p.14 表1-3\n     https://qiita.com/taumax/items/b70e29ef525b2e561568\n  https://www.ipa.go.jp/files/000005144.pdf p.150 6.2.1. テスト観点\n    テストにおける基本的な観点には、テスト観点 1 からテスト観点 4 まで、大きく 4 つのタイプがあることが判明しました。テスト観点 1 は基本構造を組み立てるもの。テスト観点 2 は基本構造から派生構造を作り出すもの。テスト観点 3 は組み合わせ。テスト観点 4 は期待結果の網羅性の観点です。\n   ","description":"","id":30,"section":"blog","tags":["testing"],"title":"メモ: テスト観点","uri":"https://yukihane.github.io/blog/202103/07/testing-perspective/"},{"content":"以前記載していたUbuntu16.04(及び18.04)用の Kindle for PC セットアップ手順だと起動時にネットワーク接続できず利用できなくなってしまっていた\n 接続できません ネットワークの設定とプロキシの構成を確認してください。   ので、 20.04 向けのセットアップ手順を改めて書き起こしました:\n   Ubuntu20.04 で Kindle for PCを使う\n  (参考)16.04, 18.04時代のもの: UbuntuでKindle for PCを使う\n   ","description":"","id":31,"section":"blog","tags":["ubuntu"],"title":"Ubuntu20.04 で Kindle for PC","uri":"https://yukihane.github.io/blog/202103/07/kindle-for-pc-on-ubuntu20.04/"},{"content":"はじめに 2021-03-07時点では、 UbuntuでKindle for PCを使う の方法で Ubuntu20.04 に Kindle for PC をインストールして起動すると、次のようなエラーが出てコンテンツにアクセスできなくなってしまっていました:\n 接続できません ネットワークの設定とプロキシの構成を確認してください。   そこで、改めてインストール手順を書き直したのが本ドキュメントです。 本ドキュメントで用いた各ソフトウェアのバージョンは次のとおりです(いずれも入手できた最新版を用いました):\n   Ubuntu 20.04\n  wine-6.0\n  playonlinux 4.3.4\n  Kindle for PC 1.26.0(55076)\n     ちなみに 素のwineの環境は ~/.wine に、 PlayOnLinux の環境は ~/.PlayOnLinux にあるので、初期状態に戻したければこれらのディレクトリを削除すればよいでしょう。\n また、wineのデフォルト設定ではWindowsのマイドキュメントがUbuntuの ~/Documents にシンボリックリンクされているようなので、 ~/Documents/My\\ Kindle\\ Content にKindleの書籍データが入っています。初期状態に戻したいのであればこれも削除しましょう。\n   Wine インストール 今回の手順では PlayOnLinux を利用せず直接このwineを利用して Kindle for PC を起動します。\n   参考: https://wiki.winehq.org/Ubuntu\n   sudo dpkg --add-architecture i386   wget -nc https://dl.winehq.org/wine-builds/winehq.key sudo apt-key add winehq.key   リポジトリを追加します。コマンドはUbuntuのバージョンによって異なります。上記リンク先を参照してください(下記の例は20.04のものです)。\n sudo add-apt-repository \u0026#39;deb https://dl.winehq.org/wine-builds/ubuntu/ focal main\u0026#39;   リポジトリを追加したら、次のコマンドでWineのstable版をインストールします。\n sudo apt-get install --install-recommends winehq-stable   今回インストールされたバージョンは 6.0 のようでした。\n $ wine64 --version wine-6.0     補足: インストールするWineとKindleのバージョンについて 過去の記事(本記事冒頭でリンクしている私自身が書いたものも含む)では、WineとKindle for PCは最新バージョンにすれば良いわけではなく、相性がある、と書かれてきました。\n ただ、現時点ではむしろ過去の相性が良いと言われていたバージョンは動かなくなってしまっており、最新を選んだ方が良いようでした。次の不具合が関係していそうです:\n   Is there anyone who use Amazon Kindle for PC via Wine?\n  Bug 50471 Kindle for PC 1.16.0 can’t connect\n   解決策は、 このコメントにある通り\n Now I can connect kindle for PC to amazon with Kindle version 1.30.0. What I did are following. 1. uninstall old kindle with command \u0026#34;wine64 uninstaller\u0026#34; 2. mkdir -p ${WINEPREFIX:-$HOME/.wine}/drive_c/users/$USER/AppData/Local/Amazon/Kindle 3. install Kindle for PC version 1.30.0.   を実行すれば良いです。\n 以下、具体的な手順を記述します。\n   cjkフォントインストール 素の状態だと日本語メニューが文字化けするのでフォントをインストールしておきます。 winetricks というパッケージを追加でインストールします:\n sudo apt install winetricks   winetricks コマンドを実行するとウィザードダイアログが出るので、次のとおり進めていきます:\n   Select the default wineprefix \u0026gt; Install a font \u0026gt; cjk fonts\n   実行するとエラーダイアログが複数回出ますが、無視してOKボタンを押せばよいです。\n 完了するとウィザードダイアログに戻ります。キャンセルボタンを押して終了します。\n   手動で必要なディレクトリ作成 前述のコメントに書かれているコマンドをそのまま実行します:\n mkdir -p ${WINEPREFIX:-$HOME/.wine}/drive_c/users/$USER/AppData/Local/Amazon/Kindle     Kindle for PC インストーラダウンロード \u0026amp; 実行 最新版を用意すれば良いので、公式サイトからダウンロードしましょう:\n   https://www.amazon.co.jp//dp/B011UEHYWQ\n   ちなみに現時点で 1.30.0 がリリースされているはずなのですが、私がインストールを実行したところ 1.26.0 がインストールされました。\n インストールコマンド:\n wine64 \u0026lt;ダウンロードしたexeファイル\u0026gt;   これでインストール完了です。\n   実行 wine64 ~/.wine/drive_c/Program\\ Files\\ \\(x86\\)/Amazon/Kindle/Kindle.exe   コマンドで起動できます。毎回打つのは面倒なのでalias設定しておけばよいでしょう:\n echo \u0026#39;alias kindle=\u0026#34;wine64 $HOME/.wine/drive_c/Program\\ Files\\ \\(x86\\)/Amazon/Kindle/Kindle.exe\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bashrc     ","description":"","id":32,"section":"docs","tags":null,"title":"Ubuntu20.04 で Kindle for PCを使う","uri":"https://yukihane.github.io/docs/ubuntu/kindle-for-pc-ubuntu20.04/"},{"content":"Ubuntuに初回セットアップしてから放置していたのですが、ずっとメニューが文字化け(豆腐表示)になっていたのが気になっていました。\n この度、目次を使い倒す必要ができたので、改めて調べ直し、UbuntuでKindle for PC使う場合でも文字化けせずに利用できるようになる方法がわかりました。 次のリンクを参照してください。\n   UbuntuでKindle for PCを使う\n   ","description":"","id":33,"section":"blog","tags":["ubuntu"],"title":"Ubuntuで使うKindle for PCのメニュー文字化け解消","uri":"https://yukihane.github.io/blog/202103/06/kindle-menu-tofu/"},{"content":"SLF4J の Logger のメソッドを眺めていると、 Throwable を引数にとれるのは 他に Marker と String メッセージだけを持つものばかりで、プレースホルダを利用したい場合にはどうしたら良いのだろう…と思っていたら、普通にプレースホルダと併用できるようです。\n   How to log exception and message with placeholders with SLF4J - Stack Overflow\n  In the presence of an exception/throwable, is it possible to parameterize a logging statement? - 公式FAQ\n   メッセージの後にプレースホルダ分のオブジェクトを指定して、その後に Throwable オブジェクトも指定すれば適切に取り扱ってくれるようです。\n 後から気づいたんですが、ちゃんと API doc からもリンクされていました…\n ","description":"","id":34,"section":"blog","tags":["java"],"title":"SLF4Jでplaceholderも使いつつstacktraceも出力したい","uri":"https://yukihane.github.io/blog/202102/02/slf4j-placeholder-throwable/"},{"content":"OIDCフローの調査などで本物でないOIDC IdP Mock Serverが欲しくなったので検索してみました。\n 世に数多あるように見えたのですが、結構真面目に認証処理してたりして、ちょっとオーバースペックだと感じたので自作することにしました。\n   gava-idp\n   ","description":"","id":35,"section":"blog","tags":["oidc","spring-boot"],"title":"ガバガバOIDCモックサーバを作る","uri":"https://yukihane.github.io/blog/202101/30/gava-oidc-idp/"},{"content":"  How to configure CORS in a Spring Boot + Spring Security application? - Stack Overflow\n   Spring Boot のリファレンス 4.7.1. The “Spring Web MVC Framework” \u0026gt; CORS Support を見ると、次のように設定すれば良いように見えます。\n // https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#boot-features-cors @Configuration public class MyConfiguration { @Bean public WebMvcConfigurer corsConfigurer() { return new WebMvcConfigurer() { @Override public void addCorsMappings(final CorsRegistry registry) { registry.addMapping(\u0026#34;/**\u0026#34;).allowedMethods(\u0026#34;*\u0026#34;).allowedHeaders(\u0026#34;*\u0026#34;); } }; } }   この設定は Spring MVC だけを使っている場合には上手くいきますが、 spring-boot-starter-security を導入するとクライアントサイドでCORSの問題で通信が失敗するような状況が発生します。\n なぜならば、 プリフライトリクエスト には Authorization ヘッダ(等、規定されていないヘッダ)が含まれないため、プリフライトリクエストがSpring Securityフィルタで 401 Unauthorized になって Spring MVC 部分まで到達しないからです。\n 幸い、Spring Securityには 上記で設定したCORS設定を CorsFilter で統合できます。 コンフィグで CORS 有効化すればデフォルトでそのような設定になります。\n // https://docs.spring.io/spring-security/site/docs/5.4.2/reference/html5/#cors @EnableWebSecurity public class WebSecurityConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(final HttpSecurity http) throws Exception { // ... // 大抵の場合、CSRF対策機能は無効化する必要があるでしょう // (CORSを許可する必要がある = JSリクエスト なので) http.csrf().disabled(); // if Spring MVC is on classpath and no CorsConfigurationSource is provided, // Spring Security will use CORS configuration provided to Spring MVC http.cors(Customizer.withDefaults()); } }   サンプルコード\n ","description":"","id":36,"section":"blog","tags":["spring-boot"],"title":"Spring Boot の CORS 設定を全許可する","uri":"https://yukihane.github.io/blog/202101/24/spring-boot-cors-permit-all/"},{"content":"  What should be a replacement for StoreType.HASH_MAP in spring-boot 2\n   昔は spring.session.store-type の選択肢に hash_map というものがあったようですが、現在は存在しません。(ちなみに none は Spring Session を利用しない、という意味になるようで、挙動が変わってしまいます( JSESSIONID と SESSIONID とか))\n ではどうすれば良いかというと、(上のStack Overflowにも回答がありますが)\n   9.5. Using @EnableSpringHttpSession\n   @EnableSpringHttpSession @Configuration public class SpringHttpSessionConfig { @Bean public MapSessionRepository sessionRepository() { return new MapSessionRepository(new ConcurrentHashMap\u0026lt;\u0026gt;()); } }   というコンフィグ設定を行えば良いようです。\n ","description":"","id":37,"section":"blog","tags":["spring-boot","spring-session"],"title":"Spring Sessionをインメモリで利用する","uri":"https://yukihane.github.io/blog/202101/24/spring-session-in-memory/"},{"content":"  Authentication handling in Spring boot 2.x with WebSecurityConfigurerAdapter - Stack Overflow\n   Http403ForbiddenEntryPoint がデフォルトで設定されているため、 ExceptionTranslationFilter において AuthenticationException のサブクラスは全て 403 になっている模様。\n 認証通った上でunauthorizedってことはforbiddenなんだよな？ということでしょうか。…この言い方だと全然ニュアンス伝わらないか。\n   9.6. Handling Security Exceptions\n   にこの辺りの図解がありました。\n ","description":"","id":38,"section":"blog","tags":["spring-boot","spring-security"],"title":"ControllerでUnauthorizedExceptionを投げると401でなく403になる","uri":"https://yukihane.github.io/blog/202101/23/throw-unauthorizedexception-in-controller/"},{"content":"Spring Framework 5.3.3 で対応された\n   Update OncePerRequestFilter.isAsyncDispatch to use HttpServletRequest.getDispatcherType() #26282\n  コード差分\n      の影響で、 HttpServletRequest#getDispatcherType() メソッドが呼ばれるようになっています。\n これにより、 HttpServletRequest をモック化して実行していたテストケースが(想定外のメソッド呼び出しで null を返すため)失敗するようになっていました。\n ","description":"","id":39,"section":"blog","tags":["spring-boot"],"title":"Spring Boot 2.4.1-\u003e2.4.2アップグレードで発生した問題メモ","uri":"https://yukihane.github.io/blog/202101/21/ploblem-in-springboot2.4.2/"},{"content":"さて2021年にもなったし、そろそろUbuntuアップグレードしても解消できない地雷は無くなっているだろう、と思い18.04からアップグレードを敢行しました。\n 毎度のことですが、今回も一発ですんなりとはいかず、グラフィック関係で問題が発生しました。 事象としては次のとおりです。\n   背景壁紙がバグったような表示になる。また、右上に表示されているスピーカーやLANアイコンもおかしい。\n  Steam clientが起動に失敗するようになった。\n   どうやらいずれも原因は同じだったようで、次のページの通り対処したところ、これらの問題は解消されました。\n   Fuzzy graphics after upgrading to Ubuntu 20.04 - Ask Ubuntu\n   sudo apt purge xserver-xorg-video-intel   ","description":"","id":40,"section":"blog","tags":["ubuntu"],"title":"Ubuntu 20.04 LTS にアップグレードして問題が発生した","uri":"https://yukihane.github.io/blog/202101/21/upgrade-to-ubuntu20.04/"},{"content":"調査したところSpring Bootの問題と言うよりは、Lombokのバージョンが 1.18.12 から 1.18.16 に上がったことによる非互換性の問題でした。\n Lombokのchangelogに説明があります:\n    BREAKING CHANGE: mapstruct users should now add a dependency to lombok-mapstruct-binding. This solves compiling modules with lombok (and mapstruct).\n    — https://projectlombok.org/changelog   なお、上記引用文中にはdependencyに追加する、というような説明が為されていますが、正確にはアノテーションプロセッサとして lombok-mapstruct-binding を設定する必要があるようです。\n   https://github.com/mapstruct/mapstruct/issues/2267#issuecomment-722233808\n   Gradle だと\n annotationProcessor \u0026#39;org.projectlombok:lombok-mapstruct-binding:0.1.0\u0026#39;   ということですね。\n ","description":"","id":41,"section":"blog","tags":["mapstruct","lombok","spring-boot"],"title":"Spring Boot 2.3.5 で MapStruct を利用しているプロジェクトのビルドが失敗した","uri":"https://yukihane.github.io/blog/202011/14/mapstruct-with-spring-boot-2.3.5/"},{"content":"Spring Security OAuth 2.0 Login を利用してログインしたのですが、通常ログイン後 UserInfo Endpoint へアクセスしてくれるはずなのにこの処理がスキップされてしまうような事象に出会いました。\n 調査したところ次のissueも同じ事象を説明していて、解決策としては、 setAccessibleScopes() で自分が取得したいscopeを設定する、あるいは、空の設定を行う、ということでした。\n   OpenID Connect Userinfo not fetched for custom claims #6886\n   この事象の解説も上記issueに記載されているのですが、特に何もしなくてもUserInfo Endpointへアクセスする条件は\n   profile, email, address, phone scopeのいずれかをIdPが提供しており、かつ、取得できる権限を持っている\n   場合のようです。\n この4scopeを置き換えるのが setAccessibleScopes() ということです。\n ","description":"","id":42,"section":"blog","tags":["oidc","spring-security"],"title":"Spring SecurityのOAuth 2.0 Login でログインしても UserInfo Endpoint にアクセスしてくれない","uri":"https://yukihane.github.io/blog/202009/12/oidc-userinfo-not-fetched-for-custom-claims/"},{"content":"問題 Spring Bootの自動テストで data.sql を作成しているのですが、 gradle check でテストを実行すると、失敗してしまう。\n 原因を調べたのですが、どうも日本語のカラムを比較しているところで失敗しているようで、出力を見る感じ data.sql のファイルエンコーディングが MS932 で扱われてしまっているようでした。\n この解決策としては、\n gradle -Dfile.encoding=UTF-8 check   とすれば良いことに気づきました。\n ただ、毎回この -Dfile.encoding=UTF-8 を打ちたくないので、デフォルトオプションに指定したく、色々と試行錯誤した結果、次の設定が等価のようです。\n   解決手順 自分はGradleをSDKMAN!でインストールしてGit Bashでのみ利用しています。解決の確認もこの環境で行っています。\n まず、環境変数 GRADLE_USER_HOME を設定します [1]。\n echo \u0026#39;export GRADLE_USER_HOME=$HOME/.gradle\u0026#39; \u0026gt;\u0026gt; ~/.bashrc   続いて、 gradle.properties でファイルエンコーディングを設定します。\n mkdir -p ~/.gradle echo \u0026#39;file.encoding=UTF-8\u0026#39; \u0026gt;\u0026gt; ~/.gradle/gradle.properties   これでOKでした。\n 他の方法、 GRADLE_OPTS 環境変数に設定するなど次のページに書かれている方法ではいずれも目的を達成できませんでした。\n   Show UTF-8 text properly in Gradle - Stack Overflow\n   UTF-8として認識されないまま、あるいは、リソースファイルの読み取りだけでなくGradleコンソール出力もUTF-8になってしまう(結果、出力の日本語が化けてしまう)という結果となりました。\n    1. リファレンスによると未設定の場合は $USER_HOME/.gradle になる、とありましたが、今回この環境変数を明示的に設定しないと有効になりませんでした   ","description":"","id":43,"section":"blog","tags":["gradle"],"title":"WindowsでGradleが扱うリソースのファイルエンコーディング設定","uri":"https://yukihane.github.io/blog/202009/12/gradle-resource-encoding/"},{"content":"はじめに Keycloak上で新しいclaimと、それを取得できる新しいscopeを定義し、Spring Securityを使って参照してみます。\n KeycloakをIdPにしてSpring Security OAuth 2.0 Login/Client を試してみる で作成したコードをベースにしています。\n 今回のコードはこちらです:\n   https://github.com/yukihane/hello-java/tree/master/spring/oidc/oidc-add-scope\n     Keycloak上の設定手順 ユーザ属性(claim)追加 KeycloakをIdPにしてSpring Security OAuth 2.0 Login/Client を試してみる のときと同様に、管理者でログインします。\n Users 設定画面から以前作成したユーザ myuser の編集を行います。\n myuser の編集画面で Attrributes タブを開き、次のレコードを作成し、保存します。\n     Key\n fav-number\n   Value\n 8\n     scope追加 Client Scopesを選択し、表の右上 Create ボタンを押します。\n 次の情報を入力し、 Save します。\n     Name\n extrainfo\n    つづいて Mappers タブを開きます。 Create ボタンを押し、次の情報を入力します。\n     Name\n extrainfo mapper\n   Mapper Type\n User Attribute\n   User Attribute\n fav-number\n   Token Claim Name\n fav-number\n   Claim JSON Type\n int\n   Add to ID token\n OFF\n   Add to access token\n OFF\n   Add to usrinfo\n ON (デフォルトのまま)\n     クライアントから取得できるようにする Clients 画面で myclient を選択し、 Client Scopes タブを開きます。\n Optional Client Scopes で、 extrainfo を Assined Optional Client Scopes に移します。\n    Spring Bootの設定 scope追加 application.yml で設定している registration に、今回追加で取得するscope extrainfo 追加します。\n application.yml registration: myspring: scope: - openid - extrainfo    取得した情報を表示してみる コントローラで情報を取得してみます。\n @GetMapping public String index() { final Authentication authn = SecurityContextHolder.getContext().getAuthentication(); log.info(\u0026#34;Authentication: {}\u0026#34;, authn); final OAuth2User user = ((OAuth2AuthenticationToken) authn).getPrincipal(); final Object favNum = user.getAttribute(\u0026#34;fav-number\u0026#34;); return \u0026#34;Hello \u0026#34; + authn.getName() + \u0026#34;! Your fav is \u0026#34; + favNum + \u0026#34;.\u0026#34;; }      ","description":"","id":44,"section":"blog","tags":["oidc","spring-boot","spring-security"],"title":"claimとscopeを追加して取得してみる","uri":"https://yukihane.github.io/blog/202009/04/oidc-add-claim-and-scope/"},{"content":"はじめに KeycloakをIdPにしてSpring Security OAuth 2.0 Login/Client を試してみる で作成したコードに対して、 カスタム redirect_uri の設定を行ってみます。\n 今回のコードはこちら:\n   https://github.com/yukihane/hello-java/tree/master/spring/oidc/oidc-change-redirect-uri\n     変更手順 KeyCloak 登録情報の変更 前回のページ を参考に、 \u0026#34;Valid Redirect URIs\u0026#34; の値を今回変更するURL http://localhost:8080/my_redirect_uri に更新します。\n  Spring Boot 側の修正  registration 情報更新 application.yml に registration 情報を登録していますが、今回変更するURLに更新します。\n application.yml registration: myspring: redirect-uri: \u0026#34;{baseUrl}/my_redirect_uri\u0026#34;   security config 前回のコードでは security config はデフォルト(OAuth2WebSecurityConfigurerAdapter)のままで良かったので何も書きませんでした。\n 今回は設定を追加する必要があるので、 OAuth2WebSecurityConfigurerAdapter 実装をコピーした上で、必要な設定を追加します。\n MyOAuth2WebSecurityConfiguration.java @EnableWebSecurity public class MyOAuth2WebSecurityConfiguration extends WebSecurityConfigurerAdapter { @Override protected void configure(final HttpSecurity http) throws Exception { http.authorizeRequests((requests) -\u0026gt; requests.anyRequest().authenticated()); http.oauth2Login() .loginProcessingUrl(\u0026#34;/my_redirect_uri\u0026#34;); // 今回追加した部分 http.oauth2Client(); } }   以上です。結果だけ見ると簡単なんですが、どうやってみんなこの結論にたどり着いているのか疑問です… (自分はデバッガで追ったりSpring Securityのコードをcloneしてきてgrepしたりした。リファレンスにも書いてないよね…)\n     ","description":"","id":45,"section":"blog","tags":["oidc","spring-boot","spring-security"],"title":"Spring Security: OIDC の redirect_uri を変更する","uri":"https://yukihane.github.io/blog/202009/04/oidc-change-redirect-uri/"},{"content":"Spring Boot開発中、再起動するとsessionは消失すると思いこんでいたのですが、どうも引き継がれているように見えて混乱しました。\n その後、調査してみると server.servlet.session.persistent プロパティで再起動時セッションを破棄するか保持するかを設定できることがわかりました。ただし、デフォルト値は false で、もちろんデフォルトからは変更していません(存在を知らなかったので)。\n 仕方がないので Session#setPersistent() メソッドでブレークポイントを設定してデバッグ実行してみたところ、確かに誰かが true に設定しようとしていることがわかりました。 しかし、誰が設定しようとしているのかが全くわからない…\n 更にググってなんとか情報が見つかりました:\n   Default value of server.servlet.session.persistent - Stack Overflow\n   これによると DevToolsPropertyDefaultsPostProcessor で設定されている、とのことなので見てみると… 確かに ！\n というか、DevToolsを組み込むことで他にもいろんなデバッグ用設定が有効になるんですね…知りませんでした。\n properties.put(\u0026#34;spring.thymeleaf.cache\u0026#34;, \u0026#34;false\u0026#34;); properties.put(\u0026#34;spring.freemarker.cache\u0026#34;, \u0026#34;false\u0026#34;); properties.put(\u0026#34;spring.groovy.template.cache\u0026#34;, \u0026#34;false\u0026#34;); properties.put(\u0026#34;spring.mustache.cache\u0026#34;, \u0026#34;false\u0026#34;); properties.put(\u0026#34;server.servlet.session.persistent\u0026#34;, \u0026#34;true\u0026#34;); properties.put(\u0026#34;spring.h2.console.enabled\u0026#34;, \u0026#34;true\u0026#34;); properties.put(\u0026#34;spring.resources.cache.period\u0026#34;, \u0026#34;0\u0026#34;); properties.put(\u0026#34;spring.resources.chain.cache\u0026#34;, \u0026#34;false\u0026#34;); properties.put(\u0026#34;spring.template.provider.cache\u0026#34;, \u0026#34;false\u0026#34;); properties.put(\u0026#34;spring.mvc.log-resolved-exception\u0026#34;, \u0026#34;true\u0026#34;); properties.put(\u0026#34;server.error.include-binding-errors\u0026#34;, \u0026#34;ALWAYS\u0026#34;); properties.put(\u0026#34;server.error.include-message\u0026#34;, \u0026#34;ALWAYS\u0026#34;); properties.put(\u0026#34;server.error.include-stacktrace\u0026#34;, \u0026#34;ALWAYS\u0026#34;); properties.put(\u0026#34;server.servlet.jsp.init-parameters.development\u0026#34;, \u0026#34;true\u0026#34;); properties.put(\u0026#34;spring.reactor.debug\u0026#34;, \u0026#34;true\u0026#34;);   ","description":"","id":46,"section":"blog","tags":["spring-boot"],"title":"DevToolsを組み込んでいると再起動してもsessionが引き継がれる","uri":"https://yukihane.github.io/blog/202009/02/spring-boot-session-take-over-on-restart-with-devtools/"},{"content":"  CentOS6 上で rails new できません - スタック・オーバーフロー\n  VagrantとCentOS7環境下でRuby及びRailsをインストールしたい。 - スタック・オーバーフロー\n   でそれぞれ、 CentOS6 + Rails6, CentOS7 + Rails6 の Vagrant Box を作成しました。ググってみたけれど、あまり無いものなんですね。\n ちなみに私、 Ruby/Rails はミリ知らです。\n   CentOS6の Vagrantfile リンク\n  CentOS7の Vagrantfile リンク\n    苦労した点のメモ:\n   Rails6を動かすにはNodeが必要だが、最新版のNode(v12)を動かすには glibc 2.17 が必要っぽい。そして glibc をオフィシャルが提供していないものに置き換えると、それはもはやCentOSとは呼べなくなる気がする。\n  glibc 2.20 くらいまでは GCC10.x でビルドしようとすると gcc が too old って言われる。おそらく2桁バージョンをちゃんと認識できていないのではないか。なので古いバージョンのglibcをビルドしたい場合には GCC9 以下でビルドする必要がありそう。\n  CentOS6 の glibc をどうしてもアップグレードしたい場合、 Fedoraのもので置換する方法 がぐぐったらヒットした。\n  CentOS6はもはやいろんなものが古すぎて、あるものが欲しくなってもバイナリは提供されておらずソースからビルドする必要があり、ソースからビルドしようと思うと別のビルドに必要なものが古すぎて…というループに陥る。さすがにもう古すぎるので避けるべき。\n   ","description":"","id":47,"section":"blog","tags":["centos","ruby","rails"],"title":"Ruby on Rails 6 を Centos6 や Centos7 で動かす","uri":"https://yukihane.github.io/blog/202009/02/ruby-on-rails-on-centos6-centos7/"},{"content":"ビルド作業は次のページを参考にしました:\n   gcc-10.1.0をCentOS7にソースインストール | 株式会社オルタ\n   環境は こちら に記載したものです。\n curl -L -O http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-10.2.0/gcc-10.2.0.tar.xz tar xf gcc-10.2.0.tar.xz cd gcc-10.2.0 ./contrib/download_prerequisites ./configure --enable-languages=c,c++ --prefix=/opt/gcc-10.2.0 --disable-bootstrap --disable-multilib make -j 5 sudo make install   つづいて ldoconfig での登録ですが、そのまま行うとエラーが出たので こちら を参照にして事前に1つのファイルをリネームしておきました:\n sudo mv /opt/gcc-10.2.0/lib64/{,bak.}libstdc++.so.6.0.28-gdb.py   そして ldconfig のコンフィグを設定し実行:\n sudo bash -c \u0026#39;cat \u0026gt; /etc/ld.so.conf.d/gcc-10.2.0.conf\u0026#39; \u0026lt;\u0026lt; EOF /opt/gcc-10.2.0/lib64 EOF sudo ldconfig   gcc へのPATHを設定:\n echo \u0026#39;PATH=/opt/gcc-10.2.0/bin:$PATH\u0026#39; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc   以上です。\n ","description":"","id":48,"section":"blog","tags":["linux"],"title":"CentOS6にGCC10.2.0をインストールしたときのメモ","uri":"https://yukihane.github.io/blog/202008/31/gcc-installation/"},{"content":"gccをビルドしようと思ったのですが、結構時間がかかるイメージがあって、先にどれくらいかかるのか調べたかったのだけれど検索しても見つかりませんでした。\n ので、もしかしたら他の人の参考になるかと思い、自分の経験を記録しておくことにします。\n     実行日\n 2020-08-30\n   実行環境\n Vagrant CentOS6\n   CPU\n Intel® Core™ i5-8400 CPU @ 2.80GHz\n   CPU情報補足\n 2017年11月発売 6コア6スレッド\n   Vagrantの cpus 数設定\n 4\n    という環境で\n ./configure --enable-languages=c,c++ --prefix=/opt/gcc-10.2.0 --disable-bootstrap --disable-multilib time make -j 5   をした結果:\n real 8m44.430s user 21m3.701s sys 3m14.941s   もしかして数時間単位でかかるのか…？と不安だったのですが、思ったより全然時間はかからなかったです。\n ","description":"","id":49,"section":"blog","tags":["diary"],"title":"gccをビルドするのにどれくらい時間がかかるの？(10分かからなかった) ","uri":"https://yukihane.github.io/blog/202008/30/gcc-compilation-time/"},{"content":"gradle bootRun を実行する際にアクティブ化するプロファイルの指定を行いたかったのですが、ぱっと思いつかなかったのでメモ。\n まず、\n gradle bootRun -Dprofiles.active=myproile   はうまくいきません。`profiles.active`システムプロパティは (アプリケーションでなく) Gradle に渡されるためです。\n BootRun は JavaExec を継承しているので同じように\n ので、 --args を利用して、\n gradle bootRun --args=\u0026#39;--spring.profiles.active=myprofile\u0026#39;   とします。\n あるいは、環境変数を用いて\n SPRING_PROFILES_ACTIVE=myprofile gradle bootRun   で適用できます。\n 参考   https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-set-active-spring-profiles\n  https://docs.gradle.org/current/userguide/application_plugin.html\n  https://github.com/spring-projects/spring-boot/issues/1176\n     ","description":"","id":50,"section":"blog","tags":["spring-boot","gradle"],"title":"gradle bootRun でプロファイルを指定するには？","uri":"https://yukihane.github.io/blog/202008/30/gradle-bootrun-parameter/"},{"content":"はじめに openapi generator を Spring Boot で利用してみる で openapi-generator を用いて Spring MVC のコントローラ(のインタフェース)を自動生成してみました。\n その後、これを実際に利用してみて気づいたのですが、ハンドラ(controllerのメソッド)に独自の引数を生やしたいことが多く、このままだと非常に不便です。\n Springを利用していると当然発生する欲求だと思ったのですが、検索してみても全然ヒットしません。\n 仕方がないのでやり方を自分で考えてみました。\n 成果物は、前回と同じディレクトリになります:\n   https://github.com/yukihane/hello-java/tree/master/spring/openapi-sample\n     対応の概要 extension(vender extension) という仕様があり、これを用いればspecファイルに自分で属性を定義して値を付与することができます。\n そして、 テンプレートをカスタマイズし、この属性を見て自動生成時に引数を追加する、というようなことを行いました。\n ただ、ここで利用される mustache というテンプレートエンジン、文法が簡易で学習コストが低いというのが売りなようですが、代わりに表現力が非常に低く、色々妥協しないと容易にスパゲッティ化しそうです(というか既存のテンプレートの時点でもはやスパゲッティ化していると言って差し支えなさそう…)。\n   対応手順 デフォルトテンプレートをローカルにコピー 参考:\n   Using Templates\n   上のページにある通り、最新版の5.0(現時点ではまだ正式リリースされておらずbeta版)と、それより古いバージョンではテンプレートの取得方法が異なるようです。\n 今回は、5.0の方が簡単そうに見えたのでそちらの方法でダウンロードしました。\n   https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/\n   から所望のバージョン(openapi-generator-cli-5.0.0-beta.jar)をダウンロードし、これを用いて specs/template へテンプレートを格納します。\n java -jar openapi-generator-cli-5.0.0-beta.jar author template \\ -g spring --library spring-boot -o specs/template   つづいて、 build.gradle でこのローカルに格納したテンプレートを用いるよう設定を行います。\n build.gradle openApiGenerate { templateDir = \u0026#34;$rootDir/specs/template\u0026#34; // ... }   extension機能を用い、次のようにハンドラの引数を宣言することとしました:\n specs/test.yml  /books: get: description: books listing x-handler-args: - arg: javax.servlet.http.HttpServletRequest request - arg: org.springframework.web.util.UriComponentsBuilder builder   ちなみに、デフォルトで UriComponentsBuilder builder, ` のように挿入されるのですが、最後のカンマが必要ない(他に引数がない)場合には次のように `last という属性を用いることにしました:\n specs/test.yml  /books: get: description: books listing x-handler-args: - arg: javax.servlet.http.HttpServletRequest request - arg: org.springframework.web.util.UriComponentsBuilder builder last: true   そして最後に、上記 x-handler-args を参照して自動生成するようにテンプレートを編集しました:\n specs/template/api.mustache ({{#vendorExtensions.x-handler-args}}{{{arg}}}{{^last}}, {{/last}}{{/vendorExtensions.x-handler-args}}      備考 この対応を行った後、\n   [REQ] How to add Principal parameter to Spring interface method? #4680\n   というissueがあるのに気づきました。 しかし、ここに書かれている対応を行ってみたものの上手く行きませんでした。 ( in: query って指定しているから @RequestParam が付く、つまりクエリパラメータとみなされてしまう。リンク先のような出力にはならない、よね…？)\n  そういえば、modelの方にもカスタムバリデーションのアノテーションとかも付与したくなるよな…と考えたのですが、こちらは既に行われている方がいらっしゃいました:\n   Swagger Codegenにおけるカスタムバリデーションの追加 - GeekFactory\n   やっぱり同じように vendor extension を使ってなんとかするようです。\n   ","description":"","id":51,"section":"blog","tags":["openapi","spring-boot"],"title":"openapi-generaterで生成したcontrollerにカスタム引数を追加する","uri":"https://yukihane.github.io/blog/202008/30/openapi-spring-mvc-handler-args/"},{"content":"特に結論はなく、情報収集です。\n  Google の検索 URI「http://www.google.com/search?q=jellyfish」について考えてみよう。Google Web アプリケーションがパス変数を使用していたならば、この URI はアルゴリズムの実行結果というよりも、ディレクトリのようになっていただろう（http://www.google.com/search/jellyfish）。\n これらの URI はどちらも「クラゲに関する Web ページのディレクトリ」リソースに対する正当なリソース指向の名前である。私たちは URI を調べる方法に順応してしまっているので、2 つ目の URI は正しくないように見える。パス変数は階層をトラバースしているように見えるし、クエリ変数はアルゴリズムに引数を渡しているように見える。「検索」にはアルゴリズムのような響きがある。たとえば、 http://www.google.com/directory/jellyfish は/search/jellyfish よりもよさそうに思える。\n クエリ変数に対するこの認識は、私たちが Web を使用するたびに強化される。Web ブラウザで HTML フォームに入力しているとき、入力したデータはクエリ変数になる。「クラゲ」をフォームに入力して、 http://www.google.com/search/jellyfish に送信する方法はない。HTML フォームの送信先は http://www.google.com/searchに ハードコーディングされているので、そのフォームに入力すると、 http://www.google.com/search?q=jellyfish になる。ブラウザはクエリ変数をベースURI に追加する方法を知っている。だが、変数を http://www.google.com/search/{q}のような汎用URI に置き換える方法は知らない。\n  — RESTful Webサービス - 5.5.3 アルゴリズムリソースに対するクエリ変数の使用     When should we use the query string?\n (snip) the main use-case of the query string is filtering and specifically two special cases of filtering: searching and pagination.\n  — REST API Design Best Practices for Parameter and Query String Usage   ","description":"","id":52,"section":"blog","tags":["web","rest"],"title":"Restful API, path を使うか query を使うか","uri":"https://yukihane.github.io/blog/202008/24/rest-path-or-query/"},{"content":"今回の成果物   https://github.com/yukihane/hello-java/tree/master/spring/openapi-sample\n     設定 build.gradle   openapi-generator-gradle-plugin\n  spring generator\n   辺りを参考にしています。\n build.gradle plugins { id \u0026#39;eclipse\u0026#39; id \u0026#39;org.openapi.generator\u0026#39; version \u0026#39;4.3.1\u0026#39; } ext { openApiOutputDir = \u0026#34;$rootDir/build/generated/openapi\u0026#34; } sourceSets.main.java.srcDirs += [\u0026#34;$openApiOutputDir/src/main/java\u0026#34;] dependencies { // これらは自動生成クラスが import しているので必要 implementation \u0026#39;org.springframework.boot:spring-boot-starter-validation\u0026#39; implementation \u0026#39;org.openapitools:jackson-databind-nullable:0.2.1\u0026#39; compileOnly \u0026#39;io.swagger:swagger-annotations:1.6.2\u0026#39; } openApiGenerate { generatorName = \u0026#39;spring\u0026#39; inputSpec = \u0026#34;$rootDir/specs/test.yml\u0026#34; outputDir = \u0026#34;$openApiOutputDir\u0026#34; apiPackage = \u0026#39;org.openapi.example.api\u0026#39; modelPackage = \u0026#39;org.openapi.example.model\u0026#39; configOptions = [ dateLibrary: \u0026#39;java8\u0026#39;, interfaceOnly: \u0026#39;true\u0026#39;, skipDefaultInterface: \u0026#39;true\u0026#39;, ] } compileJava.dependsOn tasks.openApiGenerate    specs/test.yml 上の build.gradle で指定している、今回の OpenAPI spec ファイルです。\n   https://swagger.io/specification/\n   openapi: \u0026#34;3.0.3\u0026#34; info: title: OpenAPI Sample Project version: \u0026#34;1.0\u0026#34; servers: - url: http://localhost:8080 paths: /books: get: description: books listing parameters: - name: max in: query schema: type: integer responses: \u0026#34;200\u0026#34;: description: list of books content: application/json: schema: type: object $ref: \u0026#34;#/components/schemas/BookListModel\u0026#34; post: description: bookを登録する(description) summary: book登録(summary) requestBody: required: true content: \u0026#34;application/json\u0026#34;: schema: $ref: \u0026#34;#/components/schemas/BookModel\u0026#34; responses: \u0026#34;200\u0026#34;: description: \u0026#34;登録したbook\u0026#34; content: application/json: schema: type: object $ref: \u0026#34;#/components/schemas/BookModel\u0026#34; /books/{id}: get: description: books listing parameters: - name: id in: path required: true schema: type: integer format: int64 responses: \u0026#34;200\u0026#34;: description: book content: application/json: schema: type: object $ref: \u0026#34;#/components/schemas/BookModel\u0026#34; components: schemas: BookListModel: properties: books: type: array items: $ref: \u0026#34;#/components/schemas/BookModel\u0026#34; BookModel: type: object properties: author: type: string title: type: string series: type: integer      コード自動生成 gradle openApiGenerate   で build/generated/openapi にソース一式が生成されます。また、 compileJava.dependsOn tasks.openApiGenerate と設定しているので、明示せずとも\n gradle build   でも自動生成されます。\n   html 生成   https://openapi-generator.tech/docs/installation/#jar\n   curl -L -o openapi-generator-cli.jar https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/4.3.1/openapi-generator-cli-4.3.1.jar   でダウンロードして実行:\n java -jar openapi-generator-cli.jar -g html -i spec/test.yml -o html     未検証事項/要調査項目など   controller のインタフェースは自動生成されたものが利用できそうだが、 model はこのまま使って良いのかまだ良くわからない。自動生成したものに手を入れて使う、という用法はありえないと思うので使えないのなら自前でいちから作成する必要が出る。\n  取り敢えず自動生成されたものを使ってはじめてみる、ということにする。ダメそうならやめれば良いし。\n     上記に関連するが、カスタム制約を設定してそのvalidationアノテーションを付与したく鳴った場合が煩雑そう。\n  参考: Swagger Codegenにおけるカスタムバリデーションの追加 - GeekFactory\n  他にやってそうな人が全然いないのも気になる…\n           ","description":"","id":53,"section":"blog","tags":["spring-boot","openapi"],"title":"openapi generator を Spring Boot で利用してみる","uri":"https://yukihane.github.io/blog/202008/23/openapi-generator/"},{"content":"(2021-10-16 更新)\n Spring Boot プロジェクトにLombokとMapStructを追加し、かつ Eclipse で開発を行う場合の設定です。\n 同じようなことを何回か書いてきた気がするのですが、結局どうすれば良いの？というのをまとめて書いたものが無いっぽいので改めて記事に起こしました。\n 実コード   https://github.com/yukihane/hello-java/tree/master/spring/lombok-mapstruct-example\n     まとめ   MapStruct 1.4.0 以降を利用する。\n  Lombok 1.18.16 以降を利用する。\n  lombok-mapstruct-binding も annoation processor として追加する(参考)。\n  (Maven) maven-compiler-plugin で anotation processing を行う。\n  (Gradle) Buildshipは利用せず、 eclipse, com.diffplug.eclipse.apt プラグインを利用し Eclipse プロジェクトへ変換する。\n     設定ポイント コードの全体は、冒頭のリンク先参照。\n Maven pom.xml \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.mapstruct\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mapstruct\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${mapstruct.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;pluginManagement\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-compiler-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.6.2\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;annotationProcessorPaths\u0026gt; \u0026lt;path\u0026gt; \u0026lt;groupId\u0026gt;org.mapstruct\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mapstruct-processor\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${mapstruct.version}\u0026lt;/version\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${lombok.version}\u0026lt;/version\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;!-- https://mapstruct.org/faq/#Can-I-use-MapStruct-together-with-Project-Lombok --\u0026gt; \u0026lt;path\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok-mapstruct-binding\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${lombok-mapstruct-binding.version}\u0026lt;/version\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/annotationProcessorPaths\u0026gt; \u0026lt;compilerArgs\u0026gt; \u0026lt;compilerArg\u0026gt; -Amapstruct.defaultComponentModel=spring \u0026lt;/compilerArg\u0026gt; \u0026lt;/compilerArgs\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/pluginManagement\u0026gt; ... \u0026lt;build\u0026gt;    Gradle build.gradle plugins { id \u0026#39;eclipse\u0026#39; id \u0026#39;com.diffplug.eclipse.apt\u0026#39; version \u0026#39;3.24.0\u0026#39; } dependencies { implementation \u0026#34;org.mapstruct:mapstruct:$mapstructVersion\u0026#34; compileOnly \u0026#39;org.projectlombok:lombok\u0026#39; annotationProcessor \u0026#34;org.mapstruct:mapstruct-processor:$mapstructVersion\u0026#34; annotationProcessor \u0026#39;org.projectlombok:lombok\u0026#39; // https://mapstruct.org/faq/#Can-I-use-MapStruct-together-with-Project-Lombok annotationProcessor \u0026#34;org.projectlombok:lombok-mapstruct-binding:$lombokMapstructBindingVersion\u0026#34; } compileJava { aptOptions { processorArgs = [ \u0026#39;mapstruct.defaultComponentModel\u0026#39;: \u0026#39;spring\u0026#39;, ] } }   なお、Eclipseにインポートする際には、 \u0026#34;Existing Gradle Project\u0026#34; メニュー [1] からでなく、次のコマンドを実行した後、\u0026#34;Existing Projects into Workspace\u0026#34; でインポートします。\n gradle eclipse       1. これがBuildshipでのインポートです。   ","description":"","id":54,"section":"blog","tags":["eclipse","gradle","maven","lombok","mapstruct"],"title":"Spring BootプロジェクトにLombokとMapStructを追加する(Eclipse \u0026 Maven/Gradle)","uri":"https://yukihane.github.io/blog/202008/23/spring-lombok-mapstruct/"},{"content":"Gradle で integration-test 用にテストディレクトリを分けようとして リファレンス を参考に build.gradle を編集しました。\n しかし、コンパイル対象には入っているようですがこのテストが実行されている気配がありません。\n 仕方なくデバッグログを出力してみたところ、次のようなログが出力されているのに気づきました:\n 2020-08-16T23:10:21.737+0900 [DEBUG] [TestEventLogger] Gradle Test Run :integrationTest STARTED 2020-08-16T23:10:21.746+0900 [DEBUG] [org.gradle.api.internal.tasks.testing.detection.AbstractTestFrameworkDetector] test-class-scan : failed to scan parent class java/lang/Object, could not find the class file 2020-08-16T23:10:21.747+0900 [DEBUG] [TestEventLogger]- 2020-08-16T23:10:21.747+0900 [DEBUG] [TestEventLogger] Gradle Test Run :integrationTest PASSED   \u0026#34;failed to scan parent class java/lang/Object, could not find the class file\u0026#34; でググったところ、次のエントリがヒットしました:\n   Gradle integration test building but not running - Stack Overflow\n   というわけで、JUnit5を利用する場合、 冒頭でリンクしたリファレンスの記述だけでは不十分で、実際には useJUnitPlatform() も必要で、次のように記述する必要がありました:\n build.groovy task integrationTest(type: Test) { useJUnitPlatform() // これを追加！ description = \u0026#39;Runs integration tests.\u0026#39; group = \u0026#39;verification\u0026#39; testClassesDirs = sourceSets.intTest.output.classesDirs classpath = sourceSets.intTest.runtimeClasspath shouldRunAfter test }   ","description":"","id":55,"section":"blog","tags":["gradle"],"title":"Gradleでintegration testを作成するも実行できない(JUnit5)","uri":"https://yukihane.github.io/blog/202008/16/gradle-test-not-working/"},{"content":"推測されないような文字列を動的に生成しURLに利用できるような仕組みを調べていますが、その調査メモです。\n ちょうど私が調べている時期と重なって、関心対象が同じ資料がアップロードされていました:\n   API Meetup Online #3で限定公開URL（Capability URLs）について話をしてきました。 | フューチャー技術ブログ\n  Googleスライド資料: 認証しないWeb認証 - 限定公開URLのセキュリティについて考える -2020/8/7 API Meetup Online #3-\n      上記資料によると、W3Cのドキュメントでは capability URLs と呼称されてているようです。 下記が参考資料のようです:\n   Good Practices for Capability URLs (W3C Editor’s Draft 23 July 2014) (GitHub)\n   ただし、例えば Stack Overflow で capability url を検索しても全くヒットせず、浸透している用語とは言い難いように感じます(Stack Overflow では generate random string url 等で検索するほうがまだヒットした)。\n   How to generate a random alpha-numeric string? - Stack Overflow\n   の回答によると、 UUID は推測困難な文字列を生成するとは言えず、冒頭に記載した用途としては不向きなようです。\n 次のように、RFCにがっつり明記してあります。\n  Do not assume that UUIDs are hard to guess; they should not be used as security capabilities (identifiers whose mere possession grants access), for example. A predictable random number source will exacerbate the situation.\n  — 6.Security Considerations RFC4122 A Universally Unique IDentifier (UUID) URN Namespace     Java UUID.randomUUID() or SecureRandom for id segment on URL? - Information Security Stack Exchange\n   の回答にあるように、Javaの場合、重複しないことが重要なようなら UUID, 推測されないことが重要なら SecureRandom を用いるのが良いのかなと思いました(冒頭の要件なら SecureRandom ですね)。\n ちなみに Docker で /dev/random を使うと、起動してからエントロピーが貯まるまで処理がブロックされる、みたいな問題も何回か聞いたことがあります\n   Not enough entropy to support /dev/random in docker containers running in boot2docker - Stack Overflow\n   ので、その辺りも確認しておいたほうが良いかも知れません。 SecureRandom は、インスタンスの取得方法によって /dev/urandom, /dev/random のどちらを使うかが変わるようです。\n   The Right Way to Use SecureRandom · Terse Systems\n   (そして上記リンクによれば、特に /dev/random を使うメリットは無い、という話も)\n ちなみに Ruby には SecureRandom.urlsafe_base64 なんていう今回の目的そのまんまっぽい名前のメソッドがありました。\n ","description":"","id":56,"section":"blog","tags":["web"],"title":"ランダム文字列URL生成に関するメモ","uri":"https://yukihane.github.io/blog/202008/15/capability-url/"},{"content":"KeycloakをIdPにしてSpring Security OAuth 2.0 Login/Client を試してみる で作成したプログラムの自動テスト方法です。\n 今回のコードも前回と同じく次のディレクトリにあります:\n   https://github.com/yukihane/hello-java/tree/master/spring/oidc-example\n   まず結論なのですが、リファレンスに説明がありますのでここを参照しましょう、ということになります:\n   Testing OAuth 2.0 Clients - 19.2.2. SecurityMockMvcRequestPostProcessors\n   実際のコードがこちらです。\n @WebMvcTest class HelloControllerTest { @Autowired ClientRegistrationRepository clientRegistrationRepository; /** * 未ログイン状態の場合、IdPへリダイレクトする。 */ @Test public void 未ログイン状態(@Autowired final MockMvc mvc) throws Exception { mvc.perform(get(\u0026#34;/\u0026#34;)).andExpect(status().is3xxRedirection()) .andExpect(header().exists(\u0026#34;Location\u0026#34;)); } @Test public void ログイン状態(@Autowired final MockMvc mvc) throws Exception { // https://docs.spring.io/spring-security/site/docs/current/reference/html5/#testing-oauth2-client mvc.perform( get(\u0026#34;/\u0026#34;) .with(oidcLogin() .clientRegistration((this.clientRegistrationRepository.findByRegistrationId(\u0026#34;myspring\u0026#34;))) )) .andExpect(status().isOk()); } @TestConfiguration static class AuthorizedClientConfig { @Bean OAuth2AuthorizedClientRepository authorizedClientRepository() { return new HttpSessionOAuth2AuthorizedClientRepository(); } } }   spring-security-oauth2 (何回も書きますが現在利用すべき Spring Security OAuth 2.0 Client とは別のライブラリです)時代は、 @WithMockUser や、 @WithSecurityContext を利用してモック認証ユーザを作成していましたが、現在のライブラリではそのようにアノテーションで設定する方針は採らないようです。\n  I think we avoided annotation support for OIDC because it was not very easy for users to customize the OidcUser and OAuth2AuthenticationToken objects (the attributes are rich objects which cannot easily be modified by an annotation). Instead, we felt that user’s could set SecurityContextHolder directly for method support or use the oidcLogin support for MockMvc style testing.  — , spring-security-test @WithMockOidcuser gh-8459 #8461    続いて別の話なのですが、前回、 issuer-uri だけ設定すれば他の設定が色々省略できて便利、と書きましたが、 issuer-uri を設定してしまうと(そして他の設定を省略すると) テスト開始時IdPへアクセスしに行こうとしてしまうようです。IdPに接続できないとテストが失敗します。\n これを避けるために、結局、 authorization-uri などは明記する、というところで落ち着きました。\n ","description":"","id":57,"section":"blog","tags":["spring-boot","spring-security","oauth","oidc"],"title":"Spring Security OAuth 2.0 Login を自動テストする","uri":"https://yukihane.github.io/blog/202008/05/spring-boot-oidc-testing/"},{"content":"これまで、LombokとMapStructを併用しようとした場合、そのままだと不具合(MapStructのアノテーションプロセッシングが動作しない)があり、ちょっとひと手間かけてその不具合を回避する必要がありました。\n   Lombokプラグインを入れているEclipseでMapStruct自動生成が機能しない - 発火後忘失\n   この問題について、久しぶりにIssueを確認してみたところ進展がありました。曰く、 1.4.0.Beta1 で修正された、とのこと。\n   Mapstruct, Lombok, Maven \u0026amp; Eclipse #1159\n   試しに 現時点での最新リリースバージョンである 1.4.0.Beta3を利用してみたところ、確かに記載通りひと手間無しにそのままでLombokもMapStructも想定通り動くようになっていました！\n  追記: 本文記載からまた状況は変わって、現在は v1.18.16のchangelogにあるとおり、 lombok-mapstruct-binding を依存関係に追加することで問題を解消するような対応になっていました。 参考\n ","description":"","id":58,"section":"blog","tags":["java","eclipse"],"title":"LombokとMapStructをEclipseで併用しようとした際の不具合がMapStruct1.4.0で解消されていた","uri":"https://yukihane.github.io/blog/202007/28/lombok-and-mapstruct-problem-is-fixed/"},{"content":"オンラインマニュアル https://git-scm.com/docs\n   password記憶 git config --global credential.helper \u0026#39;cache --timeout=21600\u0026#39;   21600秒(6時間)デーモンがパスワードを保持する。\n   単語単位diff git config --global alias.diffw \u0026#34;diff --word-diff-regex=.\u0026#34;   上記で日本語が文字化けする場合は、代わりに以下の設定でいける、はず。\n git config --global diff.wordRegex $\u0026#39;[^\\x80-\\xbf][\\x80-\\xbf]*\u0026#39; git config --global alias.diffw \u0026#34;diff --word-diff\u0026#34;   参考: Gitで日本語長文のdiffをとる方法 - Qiita\n   logの1行簡易なカスタム表示 git config --global alias.logshort \u0026#39;log --pretty=format:\u0026#34;%h %an %ai %s\u0026#34;\u0026#39;     枝分けを行った最初のポイントを見つける `zsh`があることが前提になっているので、例えばWindowsのgit bash環境などでは動かない。 その場合は後述の同名節記載のコマンドで代替すれば良い。\n git config --global alias.oldest-ancestor \u0026#39;!zsh -c \u0026#39;\\\u0026#39;\u0026#39;diff -u \u0026lt;(git rev-list --first-parent \u0026#34;${1:-master}\u0026#34;) \u0026lt;(git rev-list --first-parent \u0026#34;${2:-HEAD}\u0026#34;) | sed -ne \u0026#34;s/^ //p\u0026#34; | head -1\u0026#39;\\\u0026#39;\u0026#39; -\u0026#39;     枝分けを行った最初のポイントを見つける diff -u \u0026lt;(git rev-list --first-parent topic) \\ \u0026lt;(git rev-list --first-parent master) | \\ sed -ne \u0026#39;s/^ //p\u0026#39; | head -1   ちなみに`\u0026lt;(…​)`という書き方はProcess Substitution[1]という。\n   Finding a branch point with Git? - Stack Overflow\n     stats https://github.com/arzzen/git-quick-stats\n 実行例\n _GIT_SINCE=today.0:00am git quick-stats detailedGitStats     excel の diff をとる   http://qiita.com/shuhei/items/6a18d968051378d7ac1a\n  https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA-Git-%E3%81%AE%E5%B1%9E%E6%80%A7\n   Apache Tikaを利用する。\n tikaコマンドをpathの通った場所にインストールする:\n brew install tika   リポジトリ内の`.gitattributes`ファイル(他者と共有してしまって良い場合)、あるいは`YOUR_REPO/.git/info/attributes`(設定するのは自分だけなので共有してはまずい場合)に次のように記述する:\n *.xlsx diff=excel   ~/bin/(等、パスの通った場所)に次のように記述したファイル`tika-text`を作成する。\n #!/bin/bash tika -t \u0026#34;$1\u0026#34;   また、上記ファイルに実行権限を付与する。\n 次のコマンドを実行し、`~/.gitconfig`ファイルに設定を追記する:\n git config --global diff.excel.textconv tika-text   補足:\n   tikaをhomebrewでインストールしない場合は、tika-app-x.x.jar をダウンロードして tika -t \u0026#34;$1\u0026#34; の代わりに java -jar tika-app-x.x.jar -t \u0026#34;$1\u0026#34; とすれば良いはず。\n  gitattributes ファイルの置き場所について - git - Where should I place my global \u0026#39;gitattributes\u0026#39; file? - Stack Overflow\n     author を書き換える https://help.github.com/articles/changing-author-info/\n    1. https://www.gnu.org/software/bash/manual/html_node/Process-Substitution.html   ","description":"","id":59,"section":"docs","tags":null,"title":"Git","uri":"https://yukihane.github.io/docs/git/"},{"content":"チュートリアル http://docs.ansible.com/ansible/intro_getting_started.html の通り実行しようとすると以下のエラーとなった。\n ubuntu:~$ ansible all -m ping mama | UNREACHABLE! =\u0026gt; { \u0026#34;changed\u0026#34;: false, \u0026#34;msg\u0026#34;: \u0026#34;Failed to connect to the host via ssh: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).\\r\\n\u0026#34;, \u0026#34;unreachable\u0026#34;: true } ubuntu:~$ ansible all -m ping --ask-pass SSH password: mama | FAILED! =\u0026gt; { \u0026#34;failed\u0026#34;: true, \u0026#34;msg\u0026#34;: \u0026#34;to use the \u0026#39;ssh\u0026#39; connection type with passwords, you must install the sshpass program\u0026#34; }   Ubuntuであれば sshpass は apt-get install sshpass でインストール可能。\n   公開鍵認証 次のplaybook.ymlを実行すれば自分の公開鍵をターゲットのホストにコピーできる。 以降、パスワード入力は不要になる。\n - hosts: all tasks: - name: mkdir .ssh #.sshフォルダの作成 file: dest=~/.ssh state=directory owner={{ansible_user}} group={{ansible_user}} mode=700 - name: copy publickey #公開鍵を貼付け copy: src=~/.ssh/id_rsa.pub dest=~/.ssh/authorized_keys owner={{ansible_user}} group={{ansible_user}} mode=600   なお、 ansible_user はhostsファイル(デフォルトでは /etc/ansible/hosts )で設定する[1]。\n 参考:\n   ansibleでLinuxユーザーの作成と鍵認証を設定する - Qiita\n      1. Inventory — Ansible Documentation   ","description":"","id":60,"section":"docs","tags":null,"title":"Ansible","uri":"https://yukihane.github.io/docs/ansible/"},{"content":"tips 仮想ハードディスクのUUID変更 仮想ハードディスクはVirtualBox上ではUUIDによって識別されています。 このため、仮想ハードディスクファイルをコピーして別の仮想マシンに接続しようとした場合など、同一UUIDのものが存在する旨のエラーになります。\n 既に不要となった仮想HDがまだVirtualBox管理上残っているのであれば、VirtualBoxのメニュー ファイル \u0026gt; 仮想メディアマネージャー から削除すれば良いです。\n 双方とも残しておきたいのであれば、コピーして新しく生成した仮想HDのUUIDを変更すれば、別のものとして認識できるようになります。\n VBoxManage internalcommands sethduuid my-vhd.vdi    仮想ハードディスクのコンパクト化 キャッシュファイル等無駄ファイルを削除する。以下のコマンドは yum のキャッシュクリア。\n sudo yum clean all   ゲストOSにおいてddコマンドで未使用領域を0埋めする[1]。\n sudo dd if=/dev/zero of=/bigemptyfile bs=4096k sudo rm -rf /bigemptyfile   ゲストOSをシャットダウンし、ホストOS上でコンパクト化コマンドを実行する。\n  VBoxManage modifyhd /path/to/thedisk.vdi --compact       1. http://superuser.com/questions/529149/how-to-compact-virtualboxs-vdi-file-size   ","description":"","id":61,"section":"docs","tags":null,"title":"VirtualBox","uri":"https://yukihane.github.io/docs/virtualbox/"},{"content":"ChocolateyでインストールしたPython3の運用について。\n proxy pip コマンドは環境変数 http_proxy , https_proxy を見ているので、プロキシ環境下ではこれらの設定を行っておく。\n   Ansible インストール 結論としては色々障害があり諦めた。ただし必要があれば問題を解消してインストールすることは可能と思われる。 おそらく次のリンク先の事象と同じ。\n   Windows(x64)でPython3.6.0(x64)にPyCryptoを入れるメモ - Qiita\n    pip コマンドでインストールしようとすると以下のエラーになる。\n \u0026gt;pip install ansible (中略) warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath. building \u0026#39;Crypto.Random.OSRNG.winrandom\u0026#39; extension error: Microsoft Visual C++ 14.0 is required. Get it with \u0026#34;Microsoft Visual C++ Build Tools\u0026#34;: http://landinghub.visualstudio.com/visual-cpp-build-tools ---------------------------------------- Command \u0026#34;c:\\python36\\python.exe -u -c \u0026#34;import setuptools, tokenize;__file__=\u0026#39;C:\\\\Users\\\\xxx\\\\AppData\\\\Local\\\\Temp\\\\pip-build-6vc171ni\\\\pycrypto\\\\setup.py\u0026#39;;f=getattr(tokenize, \u0026#39;open\u0026#39;, open)(__file__);code=f.read().replace(\u0026#39;\\r\\n\u0026#39;, \u0026#39;\\n\u0026#39;);f.close();exec(compile(code, __file__, \u0026#39;exec\u0026#39;))\u0026#34; install --record C:\\Users\\xxx\\AppData\\Local\\Temp\\pip-5ckp1rdw-record\\install-record.txt --single-version-externally-managed --compile\u0026#34; failed with error code 1 in C:\\Users\\xxx\\AppData\\Local\\Temp\\pip-build-6vc171ni\\pycrypto\\   メッセージに従い、 http://landinghub.visualstudio.com/visual-cpp-build-tools で \u0026#34;Visual C++ Build Tools 2015\u0026#34; をダウンロードしインストールする。インストールオプションはデフォルトのまま。\n その後、再度インストールを試みるも、別のエラーが発生。\n  C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\BIN\\x86_amd64\\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -Isrc/ -Isrc/inc-msvc/ -Ic:\\python36\\include -Ic:\\python36\\include \u0026#34;-IC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\INCLUDE\u0026#34; \u0026#34;-IC:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\u0026#34; \u0026#34;-IC:\\Program Files (x86)\\Windows Kits\\8.1\\include\\shared\u0026#34; \u0026#34;-IC:\\Program Files (x86)\\Windows Kits\\8.1\\include\\um\u0026#34; \u0026#34;-IC:\\Program Files (x86)\\Windows Kits\\8.1\\include\\winrt\u0026#34; /Tcsrc/winrand.c /Fobuild\\temp.win-amd64-3.6\\Release\\src/winrand.obj winrand.c C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(26): error C2061: syntax error: identifier \u0026#39;intmax_t\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(27): error C2061: syntax error: identifier \u0026#39;rem\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(27): error C2059: syntax error: \u0026#39;;\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(28): error C2059: syntax error: \u0026#39;}\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(30): error C2061: syntax error: identifier \u0026#39;imaxdiv_t\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(30): error C2059: syntax error: \u0026#39;;\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(40): error C2143: syntax error: missing\u0026#39;{\u0026#39; before \u0026#39;__cdecl\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(41): error C2146: syntax error: missing\u0026#39;)\u0026#39; before identifier \u0026#39;_Number\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(41): error C2061: syntax error: identifier \u0026#39;_Number\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(41): error C2059: syntax error: \u0026#39;;\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(42): error C2059: syntax error: \u0026#39;)\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(45): error C2143: syntax error: missing\u0026#39;{\u0026#39; before \u0026#39;__cdecl\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(46): error C2146: syntax error: missing\u0026#39;)\u0026#39; before identifier \u0026#39;_Numerator\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(46): error C2061: syntax error: identifier \u0026#39;_Numerator\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(46): error C2059: syntax error: \u0026#39;;\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(46): error C2059: syntax error: \u0026#39;,\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(48): error C2059: syntax error: \u0026#39;)\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(50): error C2143: syntax error: missing\u0026#39;{\u0026#39; before \u0026#39;__cdecl\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(56): error C2143: syntax error: missing\u0026#39;{\u0026#39; before \u0026#39;__cdecl\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(63): error C2143: syntax error: missing\u0026#39;{\u0026#39; before \u0026#39;__cdecl\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(69): error C2143: syntax error: missing\u0026#39;{\u0026#39; before \u0026#39;__cdecl\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(76): error C2143: syntax error: missing\u0026#39;{\u0026#39; before \u0026#39;__cdecl\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(82): error C2143: syntax error: missing\u0026#39;{\u0026#39; before \u0026#39;__cdecl\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(89): error C2143: syntax error: missing\u0026#39;{\u0026#39; before \u0026#39;__cdecl\u0026#39; C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10240.0\\ucrt\\inttypes.h(95): error C2143: syntax error: missing\u0026#39;{\u0026#39; before \u0026#39;__cdecl\u0026#39; error: command \u0026#39;C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 14.0\\\\VC\\\\BIN\\\\x86_amd64\\\\cl.exe\u0026#39; failed with exit status 2   冒頭記載リンク先「PyCryptoとコンパイラのstdint.hがバッティング」と同じ事象だと思われるが、作業中断。\n   ","description":"","id":62,"section":"docs","tags":null,"title":"Windows Python","uri":"https://yukihane.github.io/docs/python/windows-python/"},{"content":"セットアップ pip pip を使い、非rootでインストールするには --user オプションを付ける。 このオプションをつけると ~/.local 以下にインストールされる。\n ただ、 pip のアップグレードは\n pip install --user --upgrade pip   とせず、 --user を付けなくても ~/.local にインストールされた。\n  環境変数 前述の通り pip を使うと ~/.local/bin に実行ファイルがインストールされるので、ここにPATHを通しておく。\n    UNIXコマンド実行 subprocess   https://docs.python.jp/3/library/subprocess.html\n   import subprocess proc = subprocess.Popen([\u0026#39;ls\u0026#39;, \u0026#39;-l\u0026#39;], stdout=subprocess.PIPE) res = proc.communicate() text = res[0].decode(\u0026#39;utf-8\u0026#39;).rstrip()     標準入力 sys.stdin か fileinput.input() を使用する？\n with sys.stdin as f:   とすればストリーム的に扱えたが、正しい利用法なのか確証がない(ドキュメントに書かれているのを見つけられていない)。\n   正規表現   https://docs.python.jp/3/library/re.html\n   import re pattern = re.compile(\u0026#34;xxx\u0026#34;) res = pattern.match(target_text)   `match`あるいは`search`が使用できる。\n   データ構造   list\n  set\n  dict\n  http://docs.python.jp/3.5/tutorial/datastructures.html\n     ","description":"","id":63,"section":"docs","tags":null,"title":"Python","uri":"https://yukihane.github.io/docs/python/python/"},{"content":"エスケープ ^ でエスケープ。改行をエスケープする場合は文末に置けばよい。\n   ","description":"","id":64,"section":"docs","tags":null,"title":"バッチファイル","uri":"https://yukihane.github.io/docs/windows/batch/"},{"content":"https://chocolatey.org/\n インストール PowerShell プロファイル作成 プロファイルが存在しない状態でChocolateyインストールを行うと警告が出て気持ち悪いので、プロファイルがなければ先に作成しておく。ただ、PowerShell2では挙動は変わらないようなので無視しても良さそう。\n 参考: https://technet.microsoft.com/ja-jp/scriptcenter/powershell_owner06.aspx\n PowerShellを起動し\n $profile   を実行。これがプロファイル設定ファイルなので、ここにファイルが存在しなければファイルを作成する。\n Not setting tab completion · Issue #991 · chocolatey/choco によるとファイルサイズが4バイト以上無ければならないようなので、適当に数文字コメントを書いておく。このコメントはインストール後削除すれば良い。\n  Chocolatey インストール 参考: https://chocolatey.org/install\n 管理者権限無しでインストールする方法もあるようだが、以下では管理者権限でインストールする前提。 PowerShellやコマンドプロンプトを右クリックで「管理者として実行」メニューから実行し、その上でコマンドを叩く。\n PowerShell3では冒頭に記載されているコマンドでインストールできるのだろうが、Windows7のPowerShell2では実行できなかった。\n PS C:\\Windows\\system32\u0026gt; iwr https://chocolatey.org/install.ps1 -UseBasicParsing | iex 用語 \u0026#39;iwr\u0026#39; は、コマンドレット、関数、スクリプト ファイル、または操作可能なプログラムの名前として認識されません。名前が 正しく記述されていることを確認し、パスが含まれている場合はそのパスが正しいことを確認してから、再試行してください。 発生場所 行:1 文字:4 + iwr \u0026lt;\u0026lt;\u0026lt;\u0026lt; https://chocolatey.org/install.ps1 -UseBasicParsing | iex + CategoryInfo : ObjectNotFound: (iwr:String) []、CommandNotFoundException + FullyQualifiedErrorId : CommandNotFoundException   代わりに、https://chocolatey.org/install#alternative-installation-options[Alternative Installation Options]のCommand Lineに書いてある方法を採用。\n C:\\Windows\\system32\u0026gt;@powershell -NoProfile -ExecutionPolicy unrestricted -Command \u0026#34;(iex ((new-object net.webclient).DownloadString(\u0026#39;https://chocolatey.org/install.ps1\u0026#39;))) \u0026gt;$null 2\u0026gt;\u0026amp;1\u0026#34; \u0026amp;\u0026amp; SET PATH=\u0026#34;%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\u0026#34; WARNING: It\u0026#39;s very likely you will need to close and reopen your shell before you can use choco. WARNING: You can safely ignore errors related to missing log files when upgrading from a version of Chocolatey less than 0.9.9. \u0026#39;Batch file could not be found\u0026#39; is also safe to ignore. \u0026#39;The system cannot find the file specified\u0026#39; - also safe. PATH environment variable does not have C:\\ProgramData\\chocolatey\\bin in it. Adding... WARNING: Chocolatey profile installed. Reload your profile - type . $profile WARNING: Tab completion does not currently work in PowerShell v2. Please upgrade to a more recent version of PowerShell to take advantage of tab completion.   幾つか警告が出ているがインストールされた模様。 環境変数 ChocolateyInstall にインストール先(デフォルトでは C:\\ProgramData\\chocolatey )が設定されたりしている。\n インストール後、コマンドプロンプトを新しく起動し、 choco コマンドを実行してバージョンが出力されればOKだと思われる。\n  補足: プロファイル設定ファイルがなかった場合 C:\\Windows\\system32\u0026gt;@powershell -NoProfile -ExecutionPolicy unrestricted -Command \u0026#34;(iex ((new-object net.webclient).DownloadString(\u0026#39;https://chocolatey.org/install.ps1\u0026#39;))) \u0026gt;$null 2\u0026gt;\u0026amp;1\u0026#34; \u0026amp;\u0026amp; SET PATH=\u0026#34;%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\u0026#34; WARNING: It\u0026#39;s very likely you will need to close and reopen your shell before you can use choco. WARNING: You can safely ignore errors related to missing log files when upgrading from a version of Chocolatey less than 0.9.9. \u0026#39;Batch file could not be found\u0026#39; is also safe to ignore. \u0026#39;The system cannot find the file specified\u0026#39; - also safe. PATH environment variable does not have C:\\ProgramData\\chocolatey\\bin in it. Adding... 警告: Not setting tab completion: Profile file does not exist at \u0026#39;C:\\Users\\xxx\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1\u0026#39;.   インストール後、次の内容が $profile ファイルに追記されるので、もしインストール時にこのような警告を受け取っても、後から手で編集すればよいだろう。 なお、先に示した設定ファイルが存在する場合のインストールログから分かる通り、いずれにせよWindows7のPowerShell2では補完は機能しない模様。\n # Chocolatey profile $ChocolateyProfile = \u0026#34;$env:ChocolateyInstall\\helpers\\chocolateyProfile.psm1\u0026#34; if (Test-Path($ChocolateyProfile)) { Import-Module \u0026#34;$ChocolateyProfile\u0026#34; }      アンインストール 参考: https://chocolatey.org/docs/uninstallation\n アンインストールスクリプトもあるようだが、手動で行うことにする。\n   インストールディレクトリ: C:\\ProgramData\\chocolatey を削除する.\n  環境変数: ChocolateyInstall, ChocolateyBinRoot, `ChocolateyToolsLocation`を削除する. また, `PATH`にもchocolateyのものが含まれているので削る。\n   なお当方の環境では、環境変数は ChocolateyInstall しか存在しなかった。\n 古いバージョンではインストールディレクトリが異なっていたりするようなので、正確な情報は先に示したURLを参照するのが良い。\n   パッケージ インストール ここではpython(Python3)をインストールしてみる。\n C:\\Windows\\system32\u0026gt;cinst python Chocolatey v0.10.3 Installing the following packages: python By installing you accept licenses for the packages. python3 v3.6.0 [Approved] python3 package files install completed. Performing other installation steps. The package python3 wants to run \u0026#39;chocolateyInstall.ps1\u0026#39;. Note: If you don\u0026#39;t run this script, the installation will fail. Note: To confirm automatically next time, use \u0026#39;-y\u0026#39; or consider setting \u0026#39;allowGlobalConfirmation\u0026#39;. Run \u0026#39;choco feature -h\u0026#39; for more details. Do you want to run the script?([Y]es/[N]o/[P]rint): y Using system proxy server \u0026#39;[xxxx]\u0026#39;. Downloading python3 64 bit from \u0026#39;https://www.python.org/ftp/python/3.6.0/python-3.6.0-amd64.exe\u0026#39; Using system proxy server \u0026#39;xxxx\u0026#39;. Progress: 100% - Completed download of C:\\Users\\xxx\\AppData\\Local\\Temp\\chocolatey\\python3\\3.6.0\\python-3.6.0-amd64.exe (30.05 MB). Download of python-3.6.0-amd64.exe (30.05 MB) completed. Hashes match. Installing python3... python3 has been installed. Installed to \u0026#39;C:\\Python36\u0026#39; Environment Vars (like PATH) have changed. Close/reopen your shell to see the changes (or in powershell/cmd.exe just type `refreshenv`). The install of python3 was successful. Software installed as \u0026#39;EXE\u0026#39;, install location is likely default. python v3.6.0 [Approved] python package files install completed. Performing other installation steps. The install of python was successful. Software install location not explicitly set, could be in package or default install location if installer. Chocolatey installed 2/2 packages. 0 packages failed. See the log for details (C:\\ProgramData\\chocolatey\\logs\\chocolatey.log).   新しく(一般権限で)コマンドプロンプトを起動し python --version を打ってみるとインストールされているのが確認できる。\n 本題とは外れるが、上記インストールログ中に refreshenv コマンドというものが登場するので、インストールした直後のコマンドプロンプトで挙動を確認しておく。\n C:\\Windows\\system32\u0026gt;python --version \u0026#39;python\u0026#39; は、内部コマンドまたは外部コマンド、 操作可能なプログラムまたはバッチ ファイルとして認識されていません。 C:\\Windows\\system32\u0026gt;refreshenv Refreshing environment variables from registry for cmd.exe. Please wait...Finished.. C:\\Windows\\system32\u0026gt;python --version Python 3.6.0     パッケージ アンインストール python パッケージをインストールすると、 python, python3 パッケージがインストールされるので、両方アンインストールする必要がある。\n 現在インストールされているパッケージ一覧は choco version all で参照できる。\n C:\\Windows\\system32\u0026gt;choco version all Chocolatey v0.10.3 DEPRECATION NOTICE - choco version command is deprecated and will be removed in version 1.0.0. Please use `choco upgrade pgkname --noop` instead. _ Chocolatey:ChocolateyVersionCommand - Noop Mode _ chocolatey v0.10.3 is the latest version available based on your source(s). python v3.6.0 is the latest version available based on your source(s). python3 v3.6.0 is the latest version available based on your source(s).   アンインストールを実行。\n C:\\Windows\\system32\u0026gt;cuninst python Chocolatey v0.10.3 Uninstalling the following packages: python python v3.6.0 Skipping auto uninstaller - No registry snapshot. python has been successfully uninstalled. Chocolatey uninstalled 1/1 packages. 0 packages failed. See the log for details (C:\\ProgramData\\chocolatey\\logs\\chocolatey.log). C:\\Windows\\system32\u0026gt;cuninst python3 Chocolatey v0.10.3 Uninstalling the following packages: python3 python3 v3.6.0 Running auto uninstaller... Auto uninstaller has successfully uninstalled python3 or detected previous uninstall. Skipping auto uninstaller - The application appears to have been uninstalled already by other means. Skipping auto uninstaller - The application appears to have been uninstalled already by other means. Skipping auto uninstaller - The application appears to have been uninstalled already by other means. Skipping auto uninstaller - The application appears to have been uninstalled already by other means. Skipping auto uninstaller - The application appears to have been uninstalled already by other means. Skipping auto uninstaller - The application appears to have been uninstalled already by other means. Skipping auto uninstaller - The application appears to have been uninstalled already by other means. Skipping auto uninstaller - The application appears to have been uninstalled already by other means. Skipping auto uninstaller - The application appears to have been uninstalled already by other means. Skipping auto uninstaller - The application appears to have been uninstalled already by other means. Auto uninstaller has successfully uninstalled python3 or detected previous uninstall. python3 has been successfully uninstalled. Environment Vars (like PATH) have changed. Close/reopen your shell to see the changes (or in powershell/cmd.exe just type `refreshenv`). Chocolatey uninstalled 1/1 packages. 0 packages failed. See the log for details (C:\\ProgramData\\chocolatey\\logs\\chocolatey.log).   インストール時に環境変数 PATH にPython関係のものがいくつか追加されていたようだが、このアンインストール手順では削除されない。手動で行う必要がある。\n   ","description":"","id":65,"section":"docs","tags":null,"title":"Chocolatey","uri":"https://yukihane.github.io/docs/windows/chocolatey/"},{"content":"システムイメージ作成(Windows7)   https://121ware.com/qasearch/1007/app/servlet/relatedqa?QID=012941\n  https://121ware.com/qasearch/1007/app/servlet/qadoc?QID=013667\n   コントロールパネル \u0026gt; バックアップの作成 \u0026gt; システムイメージの作成\n ハードディスクに作成する場合は起動ディスク(Cドライブ)以外のパーティションが必要。無ければ新しいパーティションを作成する。これはOS標準機能で可能。\n コントロールパネル \u0026gt; システムとセキュリティ \u0026gt; 管理ツール \u0026gt; コンピューターの管理 \u0026gt; ディスクの管理 で、分割するパーティションを右クリックして「ボリュームの縮小」を選択。\n   ","description":"","id":66,"section":"docs","tags":null,"title":"Windows","uri":"https://yukihane.github.io/docs/windows/windows/"},{"content":"  Sphinx\n  Swagger\n  Pandoc\n  AsciiDoc入門 - Qiita\n  https://azu.github.io/slide/individual/\n  文書作成環境の比較 - TeX Wiki\n  ドキュメントシステムはこれを使え2015年版\n  asciidoctor\n  asciidocをPDFに変換してみた（asciidoctor-pdf） | Aimless\n     asciidoc fx\n  Vagrant\n   ","description":"","id":67,"section":"docs","tags":null,"title":"ドキュメンテーションツールメモ","uri":"https://yukihane.github.io/docs/documentation-tool/"},{"content":"リソース   vogella社のチュートリアル のうちのいくつか\n  Packt社刊 Eclipse Plug-in Development: Beginner’s Guide - Second Edition\n  Eclipse Plug-in と Eclipse RCP は技術スタックが同じっぽいので、 RCP の記事も参考になる…のだと思う\n     Eclipse Plug-in Development: Beginner’s Guide - Second Edition 写経時のハマりポイントメモ   Plug-in Project 作成時の Plug-in with a view というテンプレートは無くなっている。\n  おそらく View contribution using 3.x API が該当するものだと思う。\n        ","description":"","id":68,"section":"docs","tags":null,"title":"Eclipse Plugin","uri":"https://yukihane.github.io/docs/java/eclipse-plugin/"},{"content":"dropins ディレクトリ構成パターン 参考: The dropins folder and supported file layouts\n  eclipse/ dropins/ org.eclipse.core.tools_1.4.0.200710121455.jar org.eclipse.releng.tools_3.3.0.v20070412/ plugin.xml tools.jar ... etc ... ...    eclipse/ dropins/ eclipse/ features/ plugins/    eclipse/ dropins/ emf/ eclipse/ features/ plugins/ gef/ eclipse/ features/ plugins/ ... etc ...     テンプレート変数   オフィシャルマニュアル\n  日本語での説明\n     ","description":"","id":69,"section":"docs","tags":null,"title":"Eclipse","uri":"https://yukihane.github.io/docs/java/eclipse/"},{"content":"マニュアルなど   https://github.com/yukihane/quick-junit/blob/develop/ja/README.textile (英版にのみ書かれている情報も)\n  http://web.archive.org/web/20080422234145/www.morijp.com/masarl/homepage3.nifty.com/masarl/article/eclipse/quick-junit.html\n     モジュール 以下の種類のfeatureが`repository/target/repository/`以下に生成される:\n   junit.extensions.eclipse.quick.feature\n  junit.extensions.eclipse.quick.mock.feature\n  junit.extensions.eclipse.quick.notifications.feature\n  junit.extensions.eclipse.quick.pde.feature\n  junit.extensions.eclipse.quick.process.feature\n  junit.extensions.eclipse.quick.template.feature\n   junit.extensions.eclipse.quick.feature   Ctrl+9: プロダクトコードとテストコード切り替え\n  Ctrl+0: テスト実行\n  Ctrl+Shift+0: テストデバッグ実行\n    mock Mockito Integration\n  notifications テスト結果を通知する機能？\n   http://d.hatena.ne.jp/kompiro/20110626/1309093111\n    pde   Ctrl+-: PDEテスト実行\n  Ctrl+Shift+-: PDEテストデバッグ実行\n    process  This plugin provides to launch a process when the test is ended.This feature’s main purpose is to notify test results.\n    template コンテントアシストの追加\n   http://d.hatena.ne.jp/kompiro/20101119/1290179113\n      開発 次のようなエラーが出力される。現行バージョンのEclipseで動作させるためには変更が必要な模様。\n  !ENTRY org.eclipse.equinox.p2.publisher.eclipse 4 0 2017-01-23 23:26:12.178 !MESSAGE Unable to acquire PluginConverter service during generation for: /Users/dewa/opt/raclipsemac1.2.0/Eclipse.app/Contents/Eclipse/dropins/quickjunit/eclipse/features/junit.extensions.eclipse.quick.feature-0.7.0-SNAPSHOT.jar.\n !ENTRY org.eclipse.equinox.p2.publisher.eclipse 4 0 2017-01-23 23:26:12.206 !MESSAGE Unable to acquire PluginConverter service during generation for: /Users/dewa/opt/raclipsemac1.2.0/Eclipse.app/Contents/Eclipse/dropins/quickjunit/eclipse/features/junit.extensions.eclipse.quick.feature-0.7.0-SNAPSHOT.jar.\n     http://stackoverflow.com/questions/24896960/in-eclipse-4-4-rcp-builds-the-service-plugin-converter-could-not-be-acquired\n   変更せずに使用するには Eclipse 2.0 Style Plugin Support プラグインを別途インストールする必要がある(4.4以降[1])。\n 各Eclipseバージョンのアップデートサイトにアクセスすれば取得できる。URLはデフォルトで登録済みのはずなので、そこから選択すれば良い。\n    1. Bug 407312 – Remove support for 2.0 old style plugin support   ","description":"","id":70,"section":"docs","tags":null,"title":"QuickJUnit","uri":"https://yukihane.github.io/docs/java/quick-junit/"},{"content":"JsInterop こちらより:\n  a spec \u0026amp; collection of Java annotations for interoperability with JavaScript. A way to “consume” existing JavaScript libraries as well as to export Java code for consumption from JS\n     https://docs.google.com/document/d/10fmlEYIHcyead_4R1S5wKGs1t2I7Fnp_PaNaa7XTEk0/edit?usp=sharing\n  ERRAI 4 AND JSINTEROP BEST PRACTICES - Erraiに特化した話でなく基礎の説明がある\n     J2CL 元々はJava to Closureの略称だと思われる。 Javaのソースコードを Goole Colusure Toolsのエコシステムに乗せる(乗せられるようにする)こと(あるいはそのような変換ツール)をJ2CLと呼称している？\n   https://discuss.kotlinlang.org/t/interop-with-googles-j2cl-what-would-it-take/2991\n   こちらの動画(39m15sあたり。実際はもう少し前からJ2CLの話をしている)に説明がある。\n   https://www.youtube.com/watch?v=P4VhPck5s_g\u0026amp;t=39m15s\n     Elemental2 :: Elemental2 provides type checked access to all browser APIs for Java code.\n Java(GWT)からブラウザAPIを使用するためのライブラリ。 下記リンクはver1のものだが、Example Usageを見ればおおむね理解できると思われる。\n   Elemental1に関するドキュメント: http://www.gwtproject.org/articles/elemental.html\n     JSO JavaScriptObjectの略と思われる。 com.google.gwt.core.client.JavaScriptObjectクラスを継承したクラスの総称。\n   http://www.gwtproject.org/doc/latest/DevGuideCodingBasicsOverlay.html#javascript-objects\n     TURDUCKENパターン 巨大なモジュールを分割統治するデザインパターン名。GWTコンパイル時間増大問題参照。\n   ","description":"","id":71,"section":"docs","tags":null,"title":"GWT用語集","uri":"https://yukihane.github.io/docs/gwt/gwt-term/"},{"content":"スライド要旨 GwtCon2017のスライドを簡単にまとめます。\n Present and Future of GWT from a developer perspective 既に陳腐化した(使うべきでない)GWT要素技術の紹介。代替方法は何か。これからはどう作るべきか。 20108/01時点で、最新の情報が反映され、まとまっている資料は他にはない。必読。\n Generator, Widget, Element, JavaScriptObject, RPC, RequestFactory, AutoBeans, UiBinder(Widgetを使ったUiBinder方式のことと思われる), JSNI, Classic DevMode, Ant, Designer は Obsolate Stuff。\n  古いの   The future of GWT 2.x - By Colin Alworth\n  GWT2.8.2, 2.9, 2.10, 3について\n     DIY: Split GWT Applications using TURDUCKEN approach By Alberto Mancini\n  大きなアプリケーションは複数のGWTモジュールに分割する(この手法をhttps://www.slideshare.net/RobertKeane1/turducken-divide-and-conquer-large-gwt-apps-with-multiple-teams[TURDUCKEN]パターンと呼ぶ)。\n  モジュール間のコミュニケーションについて、サービスメッセージはhttps://developer.mozilla.org/ja/docs/Web/API/Window/postMessage[window.postMessage]を、それ以外のビジネスメッセージなどはhttps://developer.mozilla.org/ja/docs/Web/API/MessageChannel[channel messaging]を使えばうまくいった。\n         ","description":"","id":72,"section":"docs","tags":null,"title":"GwtCon2017","uri":"https://yukihane.github.io/docs/gwt/gwtcon2017/"},{"content":"問題解説 GWTアプリケーションの規模が大きくなると、コンパイル時間が非常に長くかかってしまうようになる問題。\n 非常に長くかかる、というのは、自身が関わったプロジェクトの体験で言うと、20分弱程度(当時のかなり高速なCPU/SSDを用いていたにもかかわらず)。\n   対策要旨 アプリケーションを分割する。\n エントリポイントを複数に分け、それらを統合して1つのWebアプリケーションとする。\n   参考実装 https://github.com/yukihane/hello-turducken\n   参考   https://www.slideshare.net/RobertKeane1/turducken-divide-and-conquer-large-gwt-apps-with-multiple-teams[Turducken\n  Divide and Conquer large GWT apps with multiple teams], Robert Keane, GWT.create 2013.\n  Turduckenパターンという命名, パターンの提案\n           ","description":"","id":73,"section":"docs","tags":null,"title":"GWTコンパイル時間増大問題","uri":"https://yukihane.github.io/docs/gwt/gwt-compilation-time/"},{"content":"オフィシャルサイト   GXT3\n  GXT4\n   GXTのマニュアルのURLはこれまで頻繁に変わってきたので、上記のリンクもいつの間にか切れている可能性もある。\n またSencha社は独自のMavenリポジトリ https://maven.sencha.com/repo/webapp/browserepo.html (※経験上、頻繁にダウンしている)を持っている。 商用バージョンを使用する場合はこちらから取得することになるだろう。\n GPLv3バージョンについても、 Maven Central Repositoryより新しいバージョンが上がっていることもあったかもしれないので、一応チェックはしておくのが吉。\n   セットアップ gxtを組み込むにはgxtのマニュアル Getting started general configuration参照。\n pom.xml にdependencyを追加すること(ちなみにGPL版の3.x最新バージョンは3.1.1なので例の通りのバージョン指定では駄目)、`[module名].gwt.xml`にinheritを追加する。\n 最初からGXTが使えるarchetypeもあるようだが使用したことはない。\n   ","description":"","id":74,"section":"docs","tags":null,"title":"GXT","uri":"https://yukihane.github.io/docs/gwt/gxt/"},{"content":"プロジェクトのセットアップ 手順 Mavenを用い、次のコマンドで pom.xml を生成する。\n mvn archetype:generate \\ -DarchetypeGroupId=net.ltgt.gwt.archetypes \\ -DarchetypeVersion=2017.10.20 \\ -DarchetypeArtifactId=modular-webapp    備考   オフィシャルサイトにはAntでのセットアップ方法が書かれているが、この方法は古いため用いない方が良い。\n  現在ではMavenを用いるのが良い。gwt pluginは2つ並行で開発されていたことがあるが、そのうちの一方 mojo GWT maven pluginは自身をレガシーと呼び、もう一方を使用することを推奨している。\n      旧記述 GWTおよびGXTについて。\n 都合上このページは最新版でないgwt2.7とgxt3.1.xの利用を前提に記載。最新バージョンでも基本は変わらないはず。\n   オフィシャルサイト   GWT Project\n  GXT3\n  GXT4\n   GXTのマニュアルのURLは頻繁に変わる…\n またSencha社は独自のMavenリポジトリ https://maven.sencha.com/repo/webapp/browserepo.html を持っている(が、商用プロダクトを購入しないなら不要だろう)。\n   Maven archetype Mojo’s Maven Plugin for GWT – GWT Archetype\n mvn archetype:generate \\ -DarchetypeGroupId=org.codehaus.mojo \\ -DarchetypeArtifactId=gwt-maven-plugin \\ -DarchetypeVersion=2.7.0   gxtを組み込むにはhttps://docs.sencha.com/gxt/3.x/guides/getting_started/Getting_Started.html#getting_started--Getting_Started-_getting_started_general_configuration[gxtのマニュアル Getting started general configuration]参照。\n pom.xml にdependencyを追加すること(ちなみにGPL版の3.x最新バージョンは3.1.1なので例の通りのバージョン指定では駄目)、 [module名].gwt.xml にinheritを追加する。\n 最初からGXTが使えるarchetypeもあるようだが使用したことはない。\n   実行 SuperDevMode 昔は普通のDevModeというのがあり、これを本プラグインのドキュメントではClassicと呼んでいるが、既にdeprecatedな仕様であり気にする必要はない。 https://gwt-maven-plugin.github.io/gwt-maven-plugin/run-mojo.html\n mvn process-classes war:exploded gwt:run      ","description":"","id":75,"section":"docs","tags":null,"title":"GWT","uri":"https://yukihane.github.io/docs/gwt/gwt/"},{"content":"  安全な一時ファイルの作成と削除の方法 - 拡張 POSIX シェルスクリプト Advent Calendar 2013 - ダメ出し Blog\n   ","description":"","id":76,"section":"docs","tags":null,"title":"シェルプログラミング","uri":"https://yukihane.github.io/docs/shell-programming/"},{"content":"Ubuntu18.04で入力ソース切り替え(日本語/英語切り替え)を Shift+Spaceに変更する 設定画面からShift+Spaceに変更すると、逆方向の切り替えが同期してSpaceになってしまい使い物にならない。 次のコマンドで変更できる。\n gsettings set org.gnome.desktop.wm.keybindings switch-input-source \u0026#34;[\u0026#39;\u0026lt;Shift\u0026gt;space\u0026#39;]\u0026#34; gsettings set org.gnome.desktop.wm.keybindings switch-input-source-backward \u0026#34;[]\u0026#34;     ホームフォルダの「ダウンロード」ディレクトリ名などを英語に変更する LANG=C xdg-user-dirs-gtk-update     Ubuntu18.04で画面端にウィンドウを持っていっても勝手にリサイズされないようにする gsettings set org.gnome.mutter edge-tiling false     Ubuntu18.04へアップグレードしたらログイン画面がループする(Xが起動しない) 次のコマンドでパッケージの再インストールを行ったところ起動するようになった。\n X関連のパッケージをpurge。\n sudo apt-get purge nvidia-* ubuntu-desktop gdm3   再起動。\n sudo reboot   gdm3アンインストール時、gdmユーザが削除できない旨のメッセージが出ていたのでそれを削除。\n sudo userdel gdm   ubuntu-desktopインストール(gdm3もインストールされる)。\n sudo apt-get install ubuntu-deskitop   nvidia driver install\n sudo add-apt-repository ppa:graphics-drivers/ppa sudo apt-get install nvidia-driver-410     fontをインストールする Eclipse上の表示がおかしいので別のfontを用いることにした。 今回インストールしたのは Cikaフォント。\n  .ttf ファイルを /usr/local/share/fonts ディレクトリにコピーする\n  sudo fc-cache -fv コマンドを実行する\n     ","description":"","id":77,"section":"docs","tags":null,"title":"Ubuntuその他設定","uri":"https://yukihane.github.io/docs/ubuntu/ubuntu-misc/"},{"content":"プレゼンテーションツール。\n https://github.com/bk138/gromit-mpx\n sudo apt install cmake libgtk-3-dev libappindicator3-dev cmake -DCMAKE_INSTALL_PREFIX=$HOME/local make make install   ","description":"","id":78,"section":"docs","tags":null,"title":"gromit-mpx","uri":"https://yukihane.github.io/docs/ubuntu/gromit-mpx/"},{"content":"書きかけのページです。次のリンク先が参考になります。\n   https://qiita.com/giwagiwa/items/d2e447af5225c1ce9800\n   Ubuntu16.04上で、PlayOnLinxで管理されたWine環境でKindle for PCを動作させる手順です。\n Wine インストール PlayOnLinuxを動作させるのに先立ってWineが必要らしいのでインストールします。 なおこのWineはKindleを動作させるものではないので、最新安定版をインストールしておけば良いようです。 (後述しますが、Kindleを動作させるWineは相性問題で必ずしも最新版が良いとは限らないようです。)\n  古い記事では ppa:wine/wine-builds を使用するよう書かれているが、これは既にdeprecatedです(リポジトリ追加時に警告も出る)。\n https://launchpad.net/~wine/+archive/ubuntu/wine-builds\n  !!! PLEASE NOTE THAT THIS REPOSITORY IS DEPRECATED !!!\n For more information, please see:\n  `https://www.winehq.org/pipermail/wine-devel/2017-March/117104.html[`https://www.winehq.org/pipermail/wine-devel/2017-March/117104.html]\n The following commands can be used to add the new repository:\n  wget `https://dl.winehq.org/wine-builds/Release.key[`https://dl.winehq.org/wine-builds/Release.key]  sudo apt-key add Release.key  sudo apt-add-repository ‘`https://dl.winehq.org/wine-builds/ubuntu/’`\n   というわけで、ここに書かれているとおり、代わりに新しいリポジトリを用います。 …と、以前はそれでよかったのですが、2018年末、ここから更に公開鍵が変わったようなので、次のコマンドを実行する必要があります(参考)。\n wget -nc https://dl.winehq.org/wine-builds/winehq.key sudo apt-key add winehq.key   リポジトリを追加します。Ubuntuのバージョンごとに異なりますのでhttps://wiki.winehq.org/Ubuntu[リンク先]を参照してください。下は18.04の例です。\n sudo apt-add-repository \u0026#39;deb https://dl.winehq.org/wine-builds/ubuntu/ bionic main\u0026#39;   リポジトリを追加したら、次のコマンドでWineのstable版をインストールします。\n sudo apt-get install --install-recommends winehq-stable     PlayOnLinux インストール Ubuntuのリポジトリにも playonlinux は存在するが、オフィシャルサイトにある方がバージョンが新しかったのでそちらを用いることにします。\n   https://www.playonlinux.com/en/download.html\n   に書かれているとおりにインストール。`playonlinux_xenial.list`の部分はバージョンによって異なるので適宜読み替えます。\n wget -q \u0026#34;http://deb.playonlinux.com/public.gpg\u0026#34; -O- | sudo apt-key add - sudo wget http://deb.playonlinux.com/playonlinux_xenial.list -O /etc/apt/sources.list.d/playonlinux.list sudo apt-get update sudo apt-get install playonlinux   なお、このページに以下の通り書かれているのが確認できるはず。実際にwineをインストールせずにplayonlinuxを起動するとwineが必要という警告ダイアログが出ます。\n  Ubuntu Precise (and superior) users : You must install the package wine:i386 to get PlayOnLinux working\n     インストールするWineとKindleのバージョンの選定 冒頭でも少し触れましたが、WineとKindle for PCは最新版のほうが良いとは限らず、相性があるようです。 次のページに動作検証結果が書かれています。\n   https://appdb.winehq.org/objectManager.php?sClass=application\u0026amp;iId=10597\n   Latest Rating の項目が Platinum か Gold になっているものを選んでおけばよいかと思います。 今回はPlatinumとされている Kindle for PCのバージョン 1.17.x , Wine のバージョン 2.15 を選ぶこととしました。\n   Kindle for PC(.co.jp対応版) ダウンロード Kindle for PCについて、PlayOnLinuxからダウンロードはできるものは.co.jpアカウントでログイン出来ないようですので、別途入手します。 参考にした こちらのページでは このサイトから入手していました。\n   PlayOnLinxにKindle環境を構築 PlayOnLinux起動 playonlinux コマンドで起動できます。\n  Kindleを動作させるWineのインストール ツール \u0026gt; Wineのバージョンを管理 メニューを選択し、前述の通り決定したバージョン 2.15 をインストールします。\n  Kindle for PC のインストール ファイル \u0026gt; インストール メニューを選択します。(本来ならここでインストール可能なアプリ一覧が表示されるようですが、私が今回インストールしたバージョンでは読み込み中表示のまま止まっています)\n 画面下部の\u0026#34;リストにないプログラムをインストールする\u0026#34;を選択します。\n \u0026#34;Install a program in a new virtual drive\u0026#34;を選択します。\n 好きな名前を入力します。(私は for_kindle と入力しました)\n \u0026#34;Use another version of Wine\u0026#34; と \u0026#34;Configure Wine\u0026#34; にチェックを入れます。\n Kindle for PCを動作させるWineのバージョンである 2.15 を選択します。\n \u0026#34;32bits windows installation\u0026#34; を選択します。\n MonoインストールとGeckoインストールを促されますが、両方キャンセルします。\n \u0026#34;アプリケーション\u0026#34;タブの \u0026#34;Windowsバージョン\u0026#34; を Windows 8.1 に設定します。\n install file の選択に置いて、先にダウンロードしておいた Kindle for PCのインストーラexeを指定します。\n  文字化けの解消 ここまでの設定でKindleは起動できるようになります。 が、起動してみると分かる通りメニューの日本語が豆腐表示になっています。 これを解消します。\n   参考: LubuntuにplayonlinuxでKindleをインストール - Jiyu na Blog\n   今回は Cicaフォント(Cica-Regular.ttf)を利用しました。他のフォントを利用する場合は適宜読み替えてください。\n フォントを配備 ~/PlayOnLinux’s virtual drives/for_kindle/drive_c/windows/Fonts にフォントファイル Cica-Regular.ttf を置きます。\n  レジストリファイル作成 ~/Documents/kindle_font.reg というファイル名で次の内容を保存します。 エンコーディングはShift JISとします。(なお、改行コードは今回LFで行いましたが、これで問題ありませんでした。)\n REGEDIT4 [HKEY_CURRENT_USER\\Software\\Wine\\Fonts\\Replacements] \u0026#34;Andale Mono\u0026#34;=\u0026#34;Cica\u0026#34; \u0026#34;Arial Unicode MS\u0026#34;=\u0026#34;Cica\u0026#34; \u0026#34;Batang\u0026#34;=\u0026#34;Cica\u0026#34; \u0026#34;Dotum\u0026#34;=\u0026#34;Cica\u0026#34; \u0026#34;MS Gothic\u0026#34;=\u0026#34;Cica\u0026#34; \u0026#34;MS Mincho\u0026#34;=\u0026#34;Cica\u0026#34; \u0026#34;MS PGothic\u0026#34;=\u0026#34;Cica\u0026#34; \u0026#34;MS PMincho\u0026#34;=\u0026#34;Cica\u0026#34; \u0026#34;MS UI Gothic\u0026#34;=\u0026#34;Cica\u0026#34; \u0026#34;Tahoma\u0026#34;=\u0026#34;Cica\u0026#34; \u0026#34;ＭＳ ゴシック\u0026#34;=\u0026#34;Cica\u0026#34; \u0026#34;ＭＳ 明朝\u0026#34;=\u0026#34;Cica\u0026#34; \u0026#34;ＭＳ Ｐゴシック\u0026#34;=\u0026#34;Cica\u0026#34; \u0026#34;ＭＳ Ｐ明朝\u0026#34;=\u0026#34;Cica\u0026#34;   PlayOnLinuxのランチャー画面でKindleアイコンを右クリックし、コンテキストメニューからレジストリエディタを起動します。\n レジストリエディタのメニューから「レジストリのインポート」を選択し、上記で作成したファイルを選択するとフォント置換設定がインポートされ、上の設定の通りCicaフォントで表示されるようになります。\n     ","description":"","id":79,"section":"docs","tags":null,"title":"UbuntuでKindle for PCを使う","uri":"https://yukihane.github.io/docs/ubuntu/kindle-for-pc/"},{"content":"Ubuntu16.04 の頃には特に問題なくハイバネートできていたがそれ以降のバージョンでうまくいかない/設定方法がわからない、という記事をよく見かけます。 自分もその一人ですが、今回やり方がわかったのでメモしておきます。\n 18.04時点で、obsolatedとなった昔の方法を含めいくつかやり方があるようですが、ここで記載するのはuswsusp(s2disk)を用いる方法です。\n 参考リンク   Ubuntu 18.04 can’t resume after hibernate - Ask Ubuntu\n  全体の流れの説明\n     サスペンドとハイバネート\n  Arch Linux Wiki\n     Ubuntu 18.04 can’t resume after hibernate - Ask Ubuntu\n  uswsusp の利用方法\n     How do I increase the size of swapfile without removing it in the terminal? - Ask Ubuntu\n  スワップファイルサイズ変更の参考手順\n     KernelBootParameters\n  Ubuntu Wiki\n  ブートローダでカーネルパラメータを渡す設定方法\n           note   pm-utils(pm-hibernate含む)(Arch Linux Wiki による解説)を用いる解説もまだ見かけるが、 obsoletedな方法である。pm-utilsパッケージはもはやメンテナンスされていない。\n  ハイバネートを行う際にはスワップ領域にディスクイメージを対比させるようだが、スワップ領域がパーティションである場合とファイルである場合がある。それぞれ容量の拡張方法が異なることに注意。\n  Ubuntu17.04以降(?)でスワップファイルになったようだが、それ以前のバージョンからアップグレードした場合にはスワップパーティションを利用しているかもしれない。\n        設定手順 カーネルがサポートしているかの確認 cat /sys/power/state   コマンドを実行して、結果に disk が含まれているかを確認する。 例:\n $ cat /sys/power/state freeze mem disk   disk が含まれていない場合、BIOSの設定でSecure Bootが有効になっていれば無効にする、という対策がよく書かれている。 自分の場合、Secure Bootは無効であったが、休止モードの利用も無効になっていた。休止モード利用を有効に設定すると disk が現れた。\n  スワップ領域の容量確認と拡張 cat /proc/swaps コマンド(あるいは swapon -s コマンドでも同様の結果を得られる)で現状を確認。\n $ cat /proc/swaps Filename Type Size Used Priority /swapfile file 2097148 890488 -2   /swapfile という約2GBのファイルをスワップ領域として利用しているのが確認できる。(これがUbuntu18.04のデフォルトのはず。以下これを前提としてスワップ領域を拡張する。スワップパーティションを利用していた場合、別の手順となるため、他の解説ページを参照のこと。)\n 必要なサイズは、 公式FAQによると\n  For more modern systems (\u0026gt;1GB), your swap space should be at a minimum be equal to your physical memory (RAM) size \u0026#34;if you use hibernation\u0026#34;, otherwise you need a minimum of round(sqrt(RAM)) and a maximum of twice the amount of RAM.\n   ということなので、物理メモリ16GBの場合は16GB〜32GB程度、ということだろうか。今回32GBに増やすことにした。\n sudo swapoff /swapfile sudo fallocate -l 32G /swapfile sudo chmod 600 /swapfile sudo mkswap /swapfile sudo swapon /swapfile   冒頭に記載した`cat /proc/swaps`で変更を確認できる。\n また、次のコマンドでこのスワップファイルのUUIDを参照できる。\n $ sudo findmnt -no SOURCE,UUID -T /swapfile /dev/nvme0n1p3 02cf8bf4-7690-4cf8-9aa3-c58c8fcc7ff0    uswsusp のインストールとセットアップ インストール sudo apt install uswsusp    セットアップ /etc/uswsusp.conf を作成する。(インストール時に作成されていたが、一応再作成することにした)\n sudo dpkg-reconfigure -pmedium uswsusp   このとき、次のようなメッセージが表示されたが、はいを選択して継続するのが正解のようだ。(※ いいえも選択し直してみたが何が変わったのかわからなかったが。)\n uswsusp の設定ファイルで指定されているスワップファイル、あるいはスワップパーティションが有効になっていません。 多くの場合、これはユーザ空間でのソフトウェアサスペンドが期待通りに動作しないことを意味しています。他のスワップ領域を選ぶ必要があります。 しかし、いくつか稀なケースとして、この設定通りになることもあります。 利用可能なスワップ領域がありませんが、続行しますか?     \u0026#34;レジュームに利用するスワップ領域\u0026#34; は、上で述べた sudo findmnt -no SOURCE,UUID -T /swapfile で表示されたUUIDのものを選択するようだ。\n  自分の場合は /dev/disk/by-uuid/02cf8bf4-7690-4cf8-9aa3-c58c8fcc7ff0 (もう一つ表示されていた選択肢 /swapfile だと駄目なのかはわからない)\n     暗号化はしないことにした。\n  別の解説の手順で /etc/initramfs-tools/conf.d/resume ファイルを作成するように書かれていたので先にそれを試していたのdが、このファイルがあると正しくスワップ領域を認識できなかった。削除してやり直すと上手く行った。\n     カーネルパラメータ resume 設定 /etc/default/grub ファイルの、\n GRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;quiet splash\u0026#34;   の行を次のように編集した:\n GRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;quiet splash resume=02cf8bf4-7690-4cf8-9aa3-c58c8fcc7ff0\u0026#34;   ここで設定しているUUIDはこれまでに見てきた /swapfile のもの。 設定を反映するために次のコマンドを実行:\n sudo update-grub   (※ 参照した解説では`resume_offset`も設定すべきと書かれていたが、無くても上手く行った)\n  ハイバネートを試しレジュームできることを確認 (再起動してからの方が良いのか？不明)\n sudo s2disk   を実行。再起動後resumeできた。 なお失敗する場合は単に電源OFFの挙動になってしまうので、途中作業のものは全て保存してから試すべきだろう。\n    追加の設定 systemd hibernate の更新 今回のs2diskを利用する方法で設定を上書きする。\n sudo systemctl edit systemd-hibernate.service   でエディタを開き、次の内容を記述して保存。\n [Service] ExecStart= ExecStart=/usr/sbin/s2disk ExecStartPost=/bin/run-parts -a post /lib/systemd/system-sleep   これにより、 /etc/systemd/system/systemd-hibernate.service.d/override.conf ファイルが生成される。\n 編集の確認 sudo systemctl hibernate   を実行してハイバネートとresumeが機能することを確認する。\n   アイドル時スリープ(suspend)でなく休止(hibernate)にする gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type \u0026#39;hibernate\u0026#39;      ","description":"","id":80,"section":"docs","tags":null,"title":"Ubuntu18.04 ハイバネート(休止)","uri":"https://yukihane.github.io/docs/ubuntu/hibernate/"},{"content":"元ネタ:\n   古い Eclipse の起動時に UnsatisfiedLinkError が発生する - スタック・オーバーフロー\n   いにしえのJava世界では、Win32APIにアクセスするためにSWTを利用していたそうです(リンク先のエントリは2005年のもの。私がJava始めるまえの話だ…)。\n 冒頭リンク先で触れられている org.eclipse.swt.internal.win32.OS.FindWindow というメソッドもそういったもののひとつで、 FindWindow を呼び出すのに昔は利用されていたようです。\n しかし、このSWTのメソッドは2018年に削除されており、もはや現代では利用することはできません。下記のissue/commitで削除されています。\n   Bug 531097 - [Win32] Remove support for Windows versions older than Vista\n  コード差分\n      現代では、Win32APIを利用したい場合の定番は JNA(Wikipedia)であり、私は利用したことがありませんが、 FindWindow も確かに存在していますのでこちらを使えば良いのではないでしょうか。\n ","description":"","id":81,"section":"blog","tags":["java"],"title":"SWTのFindWindowはもはや存在しない","uri":"https://yukihane.github.io/blog/202007/26/swt-findwindowi-is-deprecated/"},{"content":"はじめに Spring Initializrを使ってGradle形式でプロジェクトを作成した場合、どうやってSTS(Eclipse)へインポートするのか逡巡しました。\n 公式では Buildship 推しのように見えるのですが、Buildshipを使うとannotation processorの設定がまるっと落ちてしまいEclipse上で改めて手動設定が必要になってしまいます。\n 結局、上記リンク先でも示唆されている通り、 com.diffplug.eclipse.apt プラグインを利用するのが最も無難なように思われます。(なお、 net.ltgt.apt-eclipse を薦めている記事などが存在しますが、これはもはやdeprecatedで、代わりにforkしてメンテが続けられているのが com.diffplug.eclipse.apt らしいです)\n   手順 Spring Initializr で作成した build.gradle を開き、冒頭の plugins セクションに eclipse と com.diffplug.eclipse.apt を追加します。\n plugins { id \u0026#39;org.springframework.boot\u0026#39; version \u0026#39;2.3.2.RELEASE\u0026#39; id \u0026#39;io.spring.dependency-management\u0026#39; version \u0026#39;1.0.9.RELEASE\u0026#39; id \u0026#39;java\u0026#39; id \u0026#39;eclipse\u0026#39; id \u0026#39;com.diffplug.eclipse.apt\u0026#39; version \u0026#39;3.23.0\u0026#39; }   次に下記コマンドを実行し、Eclipseのプロジェクト構成ファイル群を生成します。\n gradle build cleanEclipse eclipse   eclipse プラグインは、実行した時点で存在しないディレクトリは無視するようになっているようです。そのため上記では一旦 build を行って自動生成ディレクトリなどを確実に作成するようにしています。\n そして、Eclipseでインポートします。このとき選択するのは Existing Projects into Workspace です。Existing Gradle Projectではないことに注意してください(こちらを選ぶとBuildshipでインポートされ、annotation processorの設定が行われません)。\n Gradleの設定を変更した場合は、 gradle cleanEclipse eclipse コマンドを実行し直し、インポートし直せばよいかと思います。\n なお、Gradleが種t力するディレクトリ(/build)と、Eclipseが出力するディレクトリ(/bin, .apt_generated など)が異なるのは敢えてそうなっているようです。 Maven を利用し続けてきた身からすると違和感がありますが、問題が起きたときの切り分けのしやすさ的にはこちらの方が良いですよね。\n   サンプルコード MapStructを利用し、アノテーションプロセッサにオプションを渡すサンプルです。\n   https://github.com/yukihane/hello-java/tree/master/spring/gradle-eclipse-example\n     ","description":"","id":82,"section":"blog","tags":["spring-boot","eclipse","gradle"],"title":"GradleでSpring Bootプロジェクトを作成してSTS(Eclipse)でインポートする手順","uri":"https://yukihane.github.io/blog/202007/26/spring-boot-gradle-eclipse/"},{"content":"1枚のNVIDIA GPUと、CPUの統合グラフィクス(iGPU)の2つのGPUにそれぞれモニタを接続してデュアルディスプレイ環境をセットアップする手順。\n 環境   Ubuntu 16.04\n  GTX 650Ti\n  Intel Core i5 3570/ HD2500 (Ivy Bridge)\n  設定前は /etc/X11/xorg.conf ファイルは存在していなかった[1]\n  デュアルブートしているWindows10では従来からデュアルモニタで稼働していた[2]\n     参考   NVIDIAとIntelでマルチディスプレイ - 暇つぶし文@謎\n  How to run both Intel and Nvidia graphics card driver on dual monitor setup? - Ask Ubuntu\n  Chapter 32. Offloading Graphics Display with RandR 1.4 - NVIDIA Accelerated Linux Graphics Driver README and Installation Guide\n     手順 古いNVIDIAドライバのアンインストールと新しいNVIDIAドライバのインストール Ubuntu18.04 で実行したもの。 本節については次のページを参考にした:\n   UbuntuにNvidia GPUのDriver + CUDAをInstallする(GTX1080対応版)\n   古いドライバ削除 sudo apt-get --purge remove nvidia-* sudo apt-get --purge remove cuda-* sudo apt-get --purge remove libnvidia-*   なお自分の環境ではCUDA関係はインストールしていなかったので2行目は意味がなかった。\n  Proprietary GPU Drivers PPA の登録 sudo add-apt-repository ppa:graphics-drivers/ppa sudo apt-get update    NVIDIAドライバインストール apt-cache search nvidia   で`nvidia`を名前に含むパッケージ一覧が検索できるので、ついている数値の一番大きい(一番最新の)ものをインストールする。 今回は410だった。\n sudo apt-get install nvidia-driver-410   従来は nvidia-nnn という名前だったが最近のものは nvidia-driver-nnn という命名になっているようだ。\n 再起動して次のコマンドでGPUが認識されていることを確認:\n nvidia-smi     /etc/X11/xorg.conf 作成 PCI BusID を調べる `lspci`コマンドで調べられる:\n lspci | grep NVIDIA | grep -v Audio | sed -e \u0026#34;s/^0*\\(.\\+\\):0*\\(.\\+\\)\\.\\(.\\)\\ .*$/PCI:\\1:\\2:\\3/\u0026#34;   あるいは次のコマンドでも可:\n nvidia-xconfig --query-gpu-info   自分の環境では`PCI:1:0:0`であった。\n  /etc/X11/xorg.conf 記述 /etc/X11/xorg.conf ファイルを新規作成し、次をペーストする[3]:\n Section \u0026#34;ServerLayout\u0026#34; Identifier \u0026#34;layout\u0026#34; Screen 0 \u0026#34;nvidia\u0026#34; Inactive \u0026#34;intel\u0026#34; EndSection Section \u0026#34;Device\u0026#34; Identifier \u0026#34;nvidia\u0026#34; Driver \u0026#34;nvidia\u0026#34; BusID \u0026#34;\u0026lt;BusID for NVIDIA device here\u0026gt;\u0026#34; EndSection Section \u0026#34;Screen\u0026#34; Identifier \u0026#34;nvidia\u0026#34; Device \u0026#34;nvidia\u0026#34; # Uncomment this line if your computer has no display devices connected to # the NVIDIA GPU. Leave it commented if you have display devices # connected to the NVIDIA GPU that you would like to use. #Option \u0026#34;UseDisplayDevice\u0026#34; \u0026#34;none\u0026#34; EndSection Section \u0026#34;Device\u0026#34; Identifier \u0026#34;intel\u0026#34; Driver \u0026#34;modesetting\u0026#34; EndSection Section \u0026#34;Screen\u0026#34; Identifier \u0026#34;intel\u0026#34; Device \u0026#34;intel\u0026#34; EndSection   上記のうち、\n  BusID \u0026#34;\u0026lt;BusID for NVIDIA device here\u0026gt;\u0026#34;   の箇所に調べておいたBusIDを記載する。つまり次のように書き換える:\n  BusID \u0026#34;PCI:1:0:0\u0026#34;     ~/.xsessionrc 作成 今回`~/.xsessionrc`は存在していなかったので新規作成した。 次のコマンドを追記する:\n xrandr --setprovideroutputsource modesetting NVIDIA-0 xrandr --auto   `NVIDIA-0`というのは、おそらく次のコマンドで表示されるnameだろう:\n xrandr --listproviders   あとはXを再起動し、Ubuntuのシステム設定の画面でディスプレイ設定を行えば完了。\n    手順(390の頃の古い手順; 2018/01ごろ記述) 古いNVIDIAドライバのアンインストールと新しいNVIDIAドライバのインストール 本節については次のページを参考にした:\n   UbuntuにNvidia GPUのDriver + CUDAをInstallする(GTX1080対応版)\n   古いドライバ削除 sudo apt-get --purge remove nvidia-* sudo apt-get --purge remove cuda-*   なお自分の環境ではCUDA関係はインストールしていなかったので2行目は意味がなかった。\n  Proprietary GPU Drivers PPA の登録 sudo add-apt-repository ppa:graphics-drivers/ppa sudo apt-get update    NVIDIAドライバインストール apt-cache search nvidia   で`nvidia`を名前に含むパッケージ一覧が検索できるので、`nvidia-nnn`の`nnn`が一番大きいもの(つまり最新のドライバ)をインストールする。 今回は390だった。\n sudo apt-get install nvidia-390   再起動して次のコマンドでGPUが認識されていることを確認:\n nvidia-smi     `/etc/X11/xorg.conf`作成 PCI BusID を調べる `lspci`コマンドで調べられる:\n lspci | grep NVIDIA | grep -v Audio | sed -e \u0026#34;s/^0*\\(.\\+\\):0*\\(.\\+\\)\\.\\(.\\)\\ .*$/PCI:\\1:\\2:\\3/\u0026#34;   あるいは次のコマンドでも可:\n nvidia-xconfig --query-gpu-info   自分の環境では`PCI:1:0:0`であった。\n  /etc/X11/xorg.conf 記述 `/etc/X11/xorg.conf`ファイルを新規作成し、次をペーストする[4]:\n Section \u0026#34;ServerLayout\u0026#34; Identifier \u0026#34;layout\u0026#34; Screen 0 \u0026#34;nvidia\u0026#34; Inactive \u0026#34;intel\u0026#34; EndSection Section \u0026#34;Device\u0026#34; Identifier \u0026#34;nvidia\u0026#34; Driver \u0026#34;nvidia\u0026#34; BusID \u0026#34;\u0026lt;BusID for NVIDIA device here\u0026gt;\u0026#34; EndSection Section \u0026#34;Screen\u0026#34; Identifier \u0026#34;nvidia\u0026#34; Device \u0026#34;nvidia\u0026#34; # Uncomment this line if your computer has no display devices connected to # the NVIDIA GPU. Leave it commented if you have display devices # connected to the NVIDIA GPU that you would like to use. #Option \u0026#34;UseDisplayDevice\u0026#34; \u0026#34;none\u0026#34; EndSection Section \u0026#34;Device\u0026#34; Identifier \u0026#34;intel\u0026#34; Driver \u0026#34;modesetting\u0026#34; EndSection Section \u0026#34;Screen\u0026#34; Identifier \u0026#34;intel\u0026#34; Device \u0026#34;intel\u0026#34; EndSection   上記のうち、\n  BusID \u0026#34;\u0026lt;BusID for NVIDIA device here\u0026gt;\u0026#34;   の箇所に調べておいたBusIDを記載する。つまり次のように書き換える:\n  BusID \u0026#34;PCI:1:0:0\u0026#34;     ~/.xsessionrc 作成 今回`~/.xsessionrc`は存在していなかったので新規作成した。 次のコマンドを追記する:\n xrandr --setprovideroutputsource modesetting NVIDIA-0 xrandr --auto   `NVIDIA-0`というのは、おそらく次のコマンドで表示されるnameだろう:\n xrandr --listproviders   あとはXを再起動し、Ubuntuのシステム設定の画面でディスプレイ設定を行えば完了。\n     1. 存在していなかったので今回は新規作成しているが、存在している場合はうまくマージする必要があるのかも知れない  2. dGPUとiGPUを両方使うにはBIOSの設定でそのような設定が必要だが、今回は既にそのような設定は行われていた、ということ。一般的には、今回記載した設定以外にも必要な設定があるかも知れないということ。  3. 参考に記載した次のURL先の設定そのまま http://us.download.nvidia.com/XFree86/Linux-x86/319.12/README/randr14.html  4. 参考に記載した次のURL先の設定そのまま http://us.download.nvidia.com/XFree86/Linux-x86/319.12/README/randr14.html   ","description":"","id":83,"section":"docs","tags":null,"title":"UbuntuでdGPU/iGPUのデュアルモニタ設定","uri":"https://yukihane.github.io/docs/ubuntu/dual-monitor/"},{"content":"参考リンク   Ubuntu 18.04: SMBクライアントのcifs-utilsをインストールする - Narrow Escape\n  Ubuntu18.04でcifs mountが失敗する場合 - Qiita\n     設定 マウントポイントを作成する。\n sudo mkdir /mnt/nas   クレデンシャルファイル作成。 `/etc/samba/credentials`ファイルを作成し次を記述。\n username=xxxx password=yyyyy   その後パーミッションを編集。\n sudo chmod 600 /etc/samba/credentials   /etc/fstab に次を追記。\n //nas.local/backup /mnt/nas cifs vers=1.0,credentials=/etc/samba/credentials,_netdev,x-systemd.automount 0 0   マウント。\n sudo mount -a     ","description":"","id":84,"section":"docs","tags":null,"title":"NASを自動マウント","uri":"https://yukihane.github.io/docs/ubuntu/nas/"},{"content":"CentOS7について。\n firewall 許可するポートを追加:\n sudo firewall-cmd --list-all sudo firewall-cmd --permanent --add-port=8080/tcp sudo firewall-cmd --reload   firewallを停止し無効化する:\n sudo systemctl stop firewalld.service sudo systemctl disable firewalld.service     ","description":"","id":85,"section":"docs","tags":null,"title":"CentOS 7","uri":"https://yukihane.github.io/docs/linux/centos7/"},{"content":"ログインシェル変更 さくらレンタルサーバのデフォルトログインシェルは`/bin/csh`なのでLinuxユーザにはちょっと馴染みがない…\n /etc/shells に利用可能なシェル一覧がある。\n /bin/sh /bin/csh /bin/tcsh /usr/local/bin/zsh /usr/local/bin/rzsh /usr/bin/passwd /usr/local/bin/bash /usr/local/bin/rbash   chsh -s newshell で新しいシェルに変更できる。間違えるとログインできなくなるので注意。\n 今回は zsh を使ってみるので chsh -s /usr/local/bin/zsh\n .zshrc は こちら で紹介されている https://gist.github.com/mollifier/4979906 を採用。\n 追加で さくらの共有サーバーでシェルを zsh に変更してから、zsh: permission denied: /var/mail/youraccount と怒られないようにする - make world の設定も行う。\n % vi ~/.zshrc export MAILCHECK=0 % source ~/.zshrc     Ubuntuのbash(dash)には BASH_SOURCE はない Bad substitution などと言われてしまう。\n 5.2 BBash Reference Manual: Bash Variables:\n  BASH_SOURCE\n :: An array variable whose members are the source filenames where the corresponding shell function names in the FUNCNAME array variable are defined. The shell function $\\{FUNCNAME[$i]} is defined in the file $\\{BASH_SOURCE[$i]} and called from $\\{BASH_SOURCE[$i+1]}\n   この BASH_SOURCE は sh (dash)にはない模様。 /bin/bash hoge.sh というように、明示的に`bash`を指定してやれば良い。\n   bash - SCRIPT_PATH=\u0026#34;${BASH_SOURCE[0]}\u0026#34; Bad substitution - Stack Overflow\n     フォント インストール /usr/share/fonts, あるいは ~/.fonts に ttc, `ttf`ファイルを置けばよい。\n  フォント一覧 fc-list      ハードディスク関係 参考: Linux機に接続されているHDDを把握する方法 - kanonjiの日記\n 実行コマンド:\n dmesg | grep -B 5 sd   結果抜粋:\n [ 2.492857] scsi 0:0:0:0: Direct-Access ATA INTEL SSDSC2CT24 335s PQ: 0 ANSI: 5 [ 2.493181] sd 0:0:0:0: Attached scsi generic sg0 type 0 [ 2.493421] sd 0:0:0:0: [sda] 468862128 512-byte logical blocks: (240 GB/224 GiB) [ 2.493461] sd 0:0:0:0: [sda] Write Protect is off [ 2.493463] sd 0:0:0:0: [sda] Mode Sense: 00 3a 00 00 [ 2.493478] scsi 1:0:0:0: Direct-Access ATA Hitachi HDP72505 A50E PQ: 0 ANSI: 5 [ 2.493548] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn\u0026#39;t support DPO or FUA [ 2.493704] sd 1:0:0:0: Attached scsi generic sg1 type 0 [ 2.493757] sd 1:0:0:0: [sdb] 976773168 512-byte logical blocks: (500 GB/466 GiB) [ 2.493766] sd 1:0:0:0: [sdb] Write Protect is off [ 2.493767] sd 1:0:0:0: [sdb] Mode Sense: 00 3a 00 00 [ 2.493781] sd 1:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn\u0026#39;t support DPO or FUA [ 2.493805] scsi 2:0:0:0: Direct-Access ATA SAMSUNG HD154UI 1118 PQ: 0 ANSI: 5 [ 2.493899] sd 2:0:0:0: Attached scsi generic sg2 type 0 [ 2.493951] sd 2:0:0:0: [sdc] 2930277168 512-byte logical blocks: (1.50 TB/1.36 TiB) [ 2.493959] sd 2:0:0:0: [sdc] Write Protect is off [ 2.493960] sd 2:0:0:0: [sdc] Mode Sense: 00 3a 00 00 [ 2.493987] sd 2:0:0:0: [sdc] Write cache: enabled, read cache: enabled, doesn\u0026#39;t support DPO or FUA [ 2.494557] sda: sda1 sda2 sda3 sda4 sda5 sda6 sda7 sda8 [ 2.494846] sd 0:0:0:0: [sda] Attached SCSI disk [ 2.541827] sdb: sdb1 sdb2 [ 2.542526] sd 1:0:0:0: [sdb] Attached SCSI disk -- [ 3.210440] usb 6-3: New USB device found, idVendor=2833, idProduct=0211 [ 3.210444] usb 6-3: New USB device strings: Mfr=1, Product=2, SerialNumber=3 [ 3.210446] usb 6-3: Product: Rift Sensor [ 3.210448] usb 6-3: Manufacturer: Oculus VR [ 3.210450] usb 6-3: SerialNumber: WMTD305P400QJ1 [ 3.262858] sdc: sdc1 sdc2 [ 3.263624] sd 2:0:0:0: [sdc] Attached SCSI disk   fdisk結果;\n $ sudo /sbin/fdisk -l /dev/sda ディスク /dev/sda: 223.6 GiB, 240057409536 バイト, 468862128 セクタ 単位: セクタ (1 * 512 = 512 バイト) セクタサイズ (論理 / 物理): 512 バイト / 512 バイト I/O サイズ (最小 / 推奨): 512 バイト / 512 バイト ディスクラベルのタイプ: gpt ディスク識別子: AA735739-B642-4B39-BC7C-C584A2B33C11 デバイス 開始位置 最後から セクタ サイズ タイプ /dev/sda1 2048 616447 614400 300M Windows リカバリ環境 /dev/sda2 616448 821247 204800 100M EFI システム /dev/sda3 821248 1083391 262144 128M Microsoft 予約領域 /dev/sda4 1083392 230960116 229876725 109.6G Microsoft 基本データ /dev/sda5 230961152 232564735 1603584 783M Windows リカバリ環境 /dev/sda6 233504768 234426367 921600 450M Windows リカバリ環境 /dev/sda7 234426368 435130367 200704000 95.7G Microsoft 基本データ /dev/sda8 435130368 468860927 33730560 16.1G Linux スワップ   $ sudo /sbin/fdisk -l /dev/sda ディスク /dev/sda: 223.6 GiB, 240057409536 バイト, 468862128 セクタ 単位: セクタ (1 * 512 = 512 バイト) セクタサイズ (論理 / 物理): 512 バイト / 512 バイト I/O サイズ (最小 / 推奨): 512 バイト / 512 バイト ディスクラベルのタイプ: gpt ディスク識別子: AA735739-B642-4B39-BC7C-C584A2B33C11 デバイス 開始位置 最後から セクタ サイズ タイプ /dev/sda1 2048 616447 614400 300M Windows リカバリ環境 /dev/sda2 616448 821247 204800 100M EFI システム /dev/sda3 821248 1083391 262144 128M Microsoft 予約領域 /dev/sda4 1083392 230960116 229876725 109.6G Microsoft 基本データ /dev/sda5 230961152 232564735 1603584 783M Windows リカバリ環境 /dev/sda6 233504768 234426367 921600 450M Windows リカバリ環境 /dev/sda7 234426368 435130367 200704000 95.7G Microsoft 基本データ /dev/sda8 435130368 468860927 33730560 16.1G Linux スワップ   $ sudo /sbin/fdisk -l /dev/sdb ディスク /dev/sdb: 465.8 GiB, 500107862016 バイト, 976773168 セクタ 単位: セクタ (1 * 512 = 512 バイト) セクタサイズ (論理 / 物理): 512 バイト / 512 バイト I/O サイズ (最小 / 推奨): 512 バイト / 512 バイト ディスクラベルのタイプ: gpt ディスク識別子: 6A2BFF42-09CF-485C-9A10-83FAA1AE568E デバイス 開始位置 最後から セクタ サイズ タイプ /dev/sdb1 34 262177 262144 128M Microsoft 予約領域 /dev/sdb2 264192 976771071 976506880 465.7G Microsoft 基本データ   $ sudo /sbin/fdisk -l /dev/sdc ディスク /dev/sdc: 1.4 TiB, 1500301910016 バイト, 2930277168 セクタ 単位: セクタ (1 * 512 = 512 バイト) セクタサイズ (論理 / 物理): 512 バイト / 512 バイト I/O サイズ (最小 / 推奨): 512 バイト / 512 バイト ディスクラベルのタイプ: gpt ディスク識別子: 6A20E8DF-1F2F-4607-ABC6-D00C0A5EE17E デバイス 開始位置 最後から セクタ サイズ タイプ /dev/sdc1 2048 1465139199 1465137152 698.6G Microsoft 基本データ /dev/sdc2 1465139200 2930276351 1465137152 698.6G Microsoft 基本データ     コマンドなど CRLF → LF 変換  find . -type f | xargs sed -i -e \u0026#39;s/^M//g\u0026#39;   sed はgnu版sed。 ^M は、 C-v C-m で入力できる。 Macだと`nkf`を使う例がよく検索でヒットするが、円マークなど、想定していない箇所の文字コードも変わってしまった。\n    ","description":"","id":86,"section":"docs","tags":null,"title":"Unix","uri":"https://yukihane.github.io/docs/linux/unix/"},{"content":"参考   Angular2によるモダンWeb開発 TypeScriptを使った基本プログラミング\n  データダウンロードページ\n        用語 コンポーネント(component) HTMLを出力する。3つの要素で構成されている。\n   処理定義\n  HTMLテンプレート\n  CSS\n   処理定義は実際にクラス内でメソッド定義しているが、HTMLテンプレートやCSSはデコレータで記述しているので、処理定義と他2つはちょっと色あいが異なる？\n  サービス(service) アプリの共通処理を行う。\n  デコレータ(decorator) TypeScriptの機能。 Javaでいうところのアノテーション？\n    Appendix: 問題 nvmを使うとbashの起動が遅い Angularのためにもろもろのセットアップを行ったらterminalの起動が遅くなった。\n ~/.bashrc, ~/.profile 双方の冒頭に\n set -x   を、最後尾に\n set +x   を追加する[1]とデバッグ出力が行われるようになるのでどこに時間がかかっているか特定できる。\n 結果として`npm config --loglevel=warn get prefix`という`~/.nvm/nvm.sh`内で実行している処理が遅いことがわかった。\n NVM getting very slow on startup in Bash · Issue #1277 · creationix/nvmというIssueが登録されていた。 NVM の nvm.sh を遅延ロードしてシェルの起動を高速化する - Qiitaという記事もある。\n     1. command line - Shell very slow to load - Ubuntu 14.04 - Ask Ubuntu   ","description":"","id":87,"section":"docs","tags":null,"title":"Angular","uri":"https://yukihane.github.io/docs/frontend/angular/"},{"content":"RestyGwtを使用してWildFlyへクロスドメインのリクエストを投げたい場合の設定。\n 下記のURLあたりを参考に。\n   jboss - CORS: AngularJS Resteasy 3 + Wildfly - Stack Overflow\n  jax rs - How to enable Cross domain requests on JAX-RS web services? - Stack Overflow\n   RestyGwtはデフォルトで`X-HTTP-Method-Override`ヘッダが付くのでこれも許容するようにしなければならなかった。(なお、https://github.com/resty-gwt/resty-gwt/issues/245#ref-pullrequest-103108519[設定で付与しないこともできる]らしい)\n 最終的には、`Access-Control-Allow-Origin`と`Access-Control-Allow-Headers`だけを適切に許容設定すれば良さそう。\n \u0026lt;subsystem xmlns=\u0026#34;urn:jboss:domain:undertow:3.1\u0026#34;\u0026gt; \u0026lt;buffer-cache name=\u0026#34;default\u0026#34;/\u0026gt; \u0026lt;server name=\u0026#34;default-server\u0026#34;\u0026gt; \u0026lt;http-listener name=\u0026#34;default\u0026#34; socket-binding=\u0026#34;http\u0026#34; redirect-socket=\u0026#34;https\u0026#34; enable-http2=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;https-listener name=\u0026#34;https\u0026#34; socket-binding=\u0026#34;https\u0026#34; security-realm=\u0026#34;ApplicationRealm\u0026#34; enable-http2=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;host name=\u0026#34;default-host\u0026#34; alias=\u0026#34;localhost\u0026#34;\u0026gt; \u0026lt;location name=\u0026#34;/\u0026#34; handler=\u0026#34;welcome-content\u0026#34;/\u0026gt; \u0026lt;location name=\u0026#34;/swagger\u0026#34; handler=\u0026#34;swagger\u0026#34;/\u0026gt; \u0026lt;filter-ref name=\u0026#34;server-header\u0026#34;/\u0026gt; \u0026lt;filter-ref name=\u0026#34;x-powered-by-header\u0026#34;/\u0026gt; \u0026lt;filter-ref name=\u0026#34;Access-Control-Allow-Origin\u0026#34;/\u0026gt; \u0026lt;filter-ref name=\u0026#34;Access-Control-Allow-Headers\u0026#34;/\u0026gt; \u0026lt;!-- \u0026lt;filter-ref name=\u0026#34;Access-Control-Allow-Methods\u0026#34;/\u0026gt; \u0026lt;filter-ref name=\u0026#34;Access-Control-Allow-Credentials\u0026#34;/\u0026gt; \u0026lt;filter-ref name=\u0026#34;Access-Control-Max-Age\u0026#34;/\u0026gt; --\u0026gt; \u0026lt;/host\u0026gt; \u0026lt;/server\u0026gt; \u0026lt;servlet-container name=\u0026#34;default\u0026#34;\u0026gt; \u0026lt;jsp-config/\u0026gt; \u0026lt;websockets/\u0026gt; \u0026lt;/servlet-container\u0026gt; \u0026lt;handlers\u0026gt; \u0026lt;file name=\u0026#34;welcome-content\u0026#34; path=\u0026#34;${jboss.home.dir}/welcome-content\u0026#34;/\u0026gt; \u0026lt;file name=\u0026#34;swagger\u0026#34; path=\u0026#34;${jboss.home.dir}/swagger\u0026#34;/\u0026gt; \u0026lt;/handlers\u0026gt; \u0026lt;filters\u0026gt; \u0026lt;response-header name=\u0026#34;server-header\u0026#34; header-name=\u0026#34;Server\u0026#34; header-value=\u0026#34;WildFly/10\u0026#34;/\u0026gt; \u0026lt;response-header name=\u0026#34;x-powered-by-header\u0026#34; header-name=\u0026#34;X-Powered-By\u0026#34; header-value=\u0026#34;Undertow/1\u0026#34;/\u0026gt; \u0026lt;response-header name=\u0026#34;Access-Control-Allow-Origin\u0026#34; header-name=\u0026#34;Access-Control-Allow-Origin\u0026#34; header-value=\u0026#34;*\u0026#34;/\u0026gt; \u0026lt;response-header name=\u0026#34;Access-Control-Allow-Methods\u0026#34; header-name=\u0026#34;Access-Control-Allow-Methods\u0026#34; header-value=\u0026#34;GET, POST, OPTIONS, PUT, DELETE\u0026#34;/\u0026gt; \u0026lt;response-header name=\u0026#34;Access-Control-Allow-Headers\u0026#34; header-name=\u0026#34;Access-Control-Allow-Headers\u0026#34; header-value=\u0026#34;accept, authorization, content-type, x-requested-with, X-HTTP-Method-Override\u0026#34;/\u0026gt; \u0026lt;response-header name=\u0026#34;Access-Control-Allow-Credentials\u0026#34; header-name=\u0026#34;Access-Control-Allow-Credentials\u0026#34; header-value=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;response-header name=\u0026#34;Access-Control-Max-Age\u0026#34; header-name=\u0026#34;Access-Control-Max-Age\u0026#34; header-value=\u0026#34;1\u0026#34;/\u0026gt; \u0026lt;/filters\u0026gt; \u0026lt;/subsystem\u0026gt;   また、サーバ側では別途preflight request向けにOPTIONSを受け付けられるようにしなければならないらしい。\n   Cross Site Requests With GWT, RestyGWT and HTML5 CORS - DZone Web Dev\n   ","description":"","id":88,"section":"docs","tags":null,"title":"CORS","uri":"https://yukihane.github.io/docs/wildfly/cors/"},{"content":"WildFlyにはRestEasyが組み込まれているのでそれを前提に。\n   公式Wiki\n   Swagger セットアップ pom.xml `swagger-jaxrs`を依存関係に追加する。\n \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.swagger\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;swagger-jaxrs\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.5.13\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;   参考: Adding the dependencies to your application Jersyの場合は専用の別ライブラリがある。\n  web.xml 自動でJAX-RSのリソースプロバイダをスキャンするために、`web.xml`に次を追記する。\n \u0026lt;context-param\u0026gt; \u0026lt;param-name\u0026gt;resteasy.scan\u0026lt;/param-name\u0026gt; \u0026lt;param-value\u0026gt;true\u0026lt;/param-value\u0026gt; \u0026lt;/context-param\u0026gt;   参考: Hooking up Swagger-Core in your Application - Automatic scanning and registration 上記のほか、手動追加など他の選択肢も有る。\n  コード `Application`継承クラスのコンストラクタに次を記載する。\n BeanConfig beanConfig = new BeanConfig(); beanConfig.setVersion(\u0026#34;0.1.0\u0026#34;); beanConfig.setSchemes(new String[] { \u0026#34;http\u0026#34; }); beanConfig.setHost(\u0026#34;localhost:8080\u0026#34;); beanConfig.setBasePath(\u0026#34;/hello-wildfly-rest/rest\u0026#34;); beanConfig.setResourcePackage(\u0026#34;jp.himeji_cs.hello_wildfly_rest.rest\u0026#34;); beanConfig.setScan(true); beanConfig.setPrettyPrint(true);   参考: Configure and Initialize Swagger - Using Swagger’s BeanConfig - Using the Application class これ以外の設定方法も記載が有る。\n    Swagger-UI セットアップ  WildFlyのホームディレクトリ(以下、$JBOSS_HOME)直下に`swagger`というディレクトリを作成し、https://github.com/swagger-api/swagger-ui[swagger-ui]の`dist`以下をコピーする。\n   # `$JBOSS_HOME/standalone/configuration/standalone.xml`を開き、undertow設定箇所で上記のディレクトリを公開する設定を行う。\n  \u0026lt;subsystem xmlns=\u0026#34;urn:jboss:domain:undertow:3.1\u0026#34;\u0026gt; \u0026lt;server name=\u0026#34;default-server\u0026#34;\u0026gt; \u0026lt;host name=\u0026#34;default-host\u0026#34; alias=\u0026#34;localhost\u0026#34;\u0026gt; \u0026lt;location name=\u0026#34;/\u0026#34; handler=\u0026#34;welcome-content\u0026#34;/\u0026gt; \u0026lt;location name=\u0026#34;/swagger\u0026#34; handler=\u0026#34;swagger\u0026#34;/\u0026gt; \u0026lt;/host\u0026gt; \u0026lt;/server\u0026gt; \u0026lt;handlers\u0026gt; \u0026lt;file name=\u0026#34;welcome-content\u0026#34; path=\u0026#34;${jboss.home.dir}/welcome-content\u0026#34;/\u0026gt; \u0026lt;file name=\u0026#34;swagger\u0026#34; path=\u0026#34;${jboss.home.dir}/swagger\u0026#34;/\u0026gt; \u0026lt;/handlers\u0026gt;   (上記の、 swagger という文字列が現れている行(2行)を追加。)\n これで、 http://localhost:8080/swagger/ へアクセスするとSwagger-UIが利用できる。\n   アノテーション https://github.com/swagger-api/swagger-core/wiki/annotations\n   ","description":"","id":89,"section":"docs","tags":null,"title":"Swagger","uri":"https://yukihane.github.io/docs/wildfly/swagger/"},{"content":"https://github.com/yukihane/hello-rest-environment の hello-wildfly-rest にサンプルコードを置いている。\n WildFly設定 standalone/configuration/standalone.xml   Security subsystem configuration - WildFly 10 - Project Documentation Editor\n  Authentication Modules - WildFly 10 - Project Documentation Editor\n     Wildfly 8でJAAS - hatenob\n   standalone/configuration/standalone.xml の security サブシステム設定部分にsecurity-domainを追加:\n \u0026lt;subsystem xmlns=\u0026#34;urn:jboss:domain:security:1.2\u0026#34;\u0026gt; \u0026lt;security-domains\u0026gt; \u0026lt;security-domain name=\u0026#34;own-domain\u0026#34; cache-type=\u0026#34;default\u0026#34;\u0026gt; \u0026lt;authentication\u0026gt; \u0026lt;login-module code=\u0026#34;Database\u0026#34; flag=\u0026#34;required\u0026#34;\u0026gt; \u0026lt;module-option name=\u0026#34;dsJndiName\u0026#34; value=\u0026#34;java:jboss/datasources/hello-wildfly-restDS\u0026#34;/\u0026gt; \u0026lt;module-option name=\u0026#34;principalsQuery\u0026#34; value=\u0026#34;select email from Member where name = ?\u0026#34;/\u0026gt; \u0026lt;module-option name=\u0026#34;rolesQuery\u0026#34; value=\u0026#34;select \u0026#39;user\u0026#39;, \u0026#39;Roles\u0026#39; from Member where name = ?\u0026#34;/\u0026gt; \u0026lt;/login-module\u0026gt; \u0026lt;/authentication\u0026gt; \u0026lt;/security-domain\u0026gt; (後略)   login-module の code や module-option については前述のリンク先に説明がある。\n `rolesQuery`についてはクエリの1項目目がロール、2項目目がロールグループだそうだが、2項目目はhttps://docs.jboss.org/author/display/WFLY10/Authentication+Modules[`Roles`固定でないといけない]らしい。\n また、ここでは認証(authentication)だけ行いたく、認可(authorization)はアプリケーション独自で行う想定なので、1項目目も`user`固定としている。\n   WARで利用する jboss-web.xml WEB-INF ディレクトリ以下に jboss-web.xml ファイルを作成し、次の内容を記載する:\n \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;jboss-web\u0026gt; \u0026lt;security-domain\u0026gt;own-domain\u0026lt;/security-domain\u0026gt; \u0026lt;/jboss-web\u0026gt;    web.xml \u0026lt;web-app\u0026gt; (前略) \u0026lt;security-constraint\u0026gt; \u0026lt;display-name\u0026gt;None Authorized Resource\u0026lt;/display-name\u0026gt; \u0026lt;web-resource-collection\u0026gt; \u0026lt;web-resource-name\u0026gt;non-protected-page\u0026lt;/web-resource-name\u0026gt; \u0026lt;description\u0026gt;認証不要リソース\u0026lt;/description\u0026gt; \u0026lt;url-pattern\u0026gt;/rest/ejb/*\u0026lt;/url-pattern\u0026gt; \u0026lt;url-pattern\u0026gt;/rest/login/*\u0026lt;/url-pattern\u0026gt; \u0026lt;url-pattern\u0026gt;/rest/swagger.json\u0026lt;/url-pattern\u0026gt; \u0026lt;/web-resource-collection\u0026gt; \u0026lt;/security-constraint\u0026gt; \u0026lt;security-constraint\u0026gt; \u0026lt;display-name\u0026gt;Authorized Resource\u0026lt;/display-name\u0026gt; \u0026lt;web-resource-collection\u0026gt; \u0026lt;web-resource-name\u0026gt;protected-page\u0026lt;/web-resource-name\u0026gt; \u0026lt;description\u0026gt;ログイン認証後に表示されるリソース\u0026lt;/description\u0026gt; \u0026lt;url-pattern\u0026gt;/*\u0026lt;/url-pattern\u0026gt; \u0026lt;/web-resource-collection\u0026gt; \u0026lt;auth-constraint\u0026gt; \u0026lt;description\u0026gt;認証完了したユーザが参照できるリソース\u0026lt;/description\u0026gt; \u0026lt;role-name\u0026gt;user\u0026lt;/role-name\u0026gt; \u0026lt;/auth-constraint\u0026gt; \u0026lt;/security-constraint\u0026gt; \u0026lt;login-config\u0026gt; \u0026lt;auth-method\u0026gt;FORM\u0026lt;/auth-method\u0026gt; \u0026lt;realm-name\u0026gt;own-domain\u0026lt;/realm-name\u0026gt; \u0026lt;form-login-config\u0026gt; \u0026lt;form-login-page\u0026gt;/rest/login/\u0026lt;/form-login-page\u0026gt; \u0026lt;form-error-page\u0026gt;/rest/login/\u0026lt;/form-error-page\u0026gt; \u0026lt;/form-login-config\u0026gt; \u0026lt;/login-config\u0026gt; \u0026lt;security-role\u0026gt; \u0026lt;role-name\u0026gt;user\u0026lt;/role-name\u0026gt; \u0026lt;/security-role\u0026gt; \u0026lt;/web-app\u0026gt;      EJB で利用する jboss-ejb3.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;jboss:ejb-jar xmlns:jboss=\u0026#34;http://www.jboss.com/xml/ns/javaee\u0026#34; xmlns=\u0026#34;http://java.sun.com/xml/ns/javaee\u0026#34; xmlns:s=\u0026#34;urn:security\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://www.jboss.com/xml/ns/javaee http://www.jboss.org/j2ee/schema/jboss-ejb3-2_0.xsd http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/ejb-jar_3_1.xsd\u0026#34; version=\u0026#34;3.1\u0026#34; impl-version=\u0026#34;2.0\u0026#34;\u0026gt; \u0026lt;assembly-descriptor\u0026gt; \u0026lt;s:security\u0026gt; \u0026lt;ejb-name\u0026gt;*\u0026lt;/ejb-name\u0026gt; \u0026lt;s:security-domain\u0026gt;own-domain\u0026lt;/s:security-domain\u0026gt; \u0026lt;/s:security\u0026gt; \u0026lt;method-permission\u0026gt; \u0026lt;unchecked /\u0026gt; \u0026lt;method\u0026gt; \u0026lt;ejb-name\u0026gt;MyNonSecureEjb\u0026lt;/ejb-name\u0026gt; \u0026lt;method-name\u0026gt;getText\u0026lt;/method-name\u0026gt; \u0026lt;/method\u0026gt; \u0026lt;/method-permission\u0026gt; \u0026lt;method-permission\u0026gt; \u0026lt;unchecked /\u0026gt; \u0026lt;method\u0026gt; \u0026lt;ejb-name\u0026gt;MemberRegistration\u0026lt;/ejb-name\u0026gt; \u0026lt;method-name\u0026gt;register\u0026lt;/method-name\u0026gt; \u0026lt;/method\u0026gt; \u0026lt;/method-permission\u0026gt; \u0026lt;method-permission\u0026gt; \u0026lt;role-name\u0026gt;user\u0026lt;/role-name\u0026gt; \u0026lt;method\u0026gt; \u0026lt;ejb-name\u0026gt;*\u0026lt;/ejb-name\u0026gt; \u0026lt;method-name\u0026gt;*\u0026lt;/method-name\u0026gt; \u0026lt;/method\u0026gt; \u0026lt;/method-permission\u0026gt; \u0026lt;/assembly-descriptor\u0026gt; \u0026lt;/jboss:ejb-jar\u0026gt;   認証不要にしたいものは ejb-name , method-name を * にせず明示した上で \u0026lt;unchecked /\u0026gt; とする必要があった。 例えば method-name を * にしてしまうと想定通り動かない( user ロール権限が必要になった)。\n    ","description":"","id":90,"section":"docs","tags":null,"title":"JAAS","uri":"https://yukihane.github.io/docs/wildfly/jaas/"},{"content":"Security-Realm と Security-Domain   EAP6：http://www.natswell.com/techcolumn/2013/08/22/eap6%EF%BC%9A%E3%81%9D%E3%81%AE6-%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3%E3%83%AC%E3%83%AB%E3%83%A0%E3%81%A8%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3%E3%83%89%E3%83%A1/[その6 – セキュリティレルムとセキュリティドメイン – ナッツウェル 技術研究室]\n  remote ejb invocation で単一の認証方式(JAAS)を用いたい - Security Realms, Security Domains, and remote EJB invocation | JBoss Developer\n     ","description":"","id":91,"section":"docs","tags":null,"title":"Wildfly Security","uri":"https://yukihane.github.io/docs/wildfly/wildfly-security/"},{"content":"自身の勉強中にまとめているページなので誤っている可能性も大きいです。\n 簡単に実行できる環境が欲しい Webブラウザ上で実行結果が確認できます:\n https://play.rust-lang.org/\n   変数束縛の方が知りたい その変数の存在しないフィールドアクセスなどを行ってコンパイルエラーを起こさせるのが簡単そう。\n   How do I print the type of a variable in Rust? - Stack Overflow\n     to_string() と to_owned() どちらを使うのが正しいのか どちらでもよい。\n   \u0026amp;str を String に変換する4つの方法 - Qiita\n  How do I convert a \u0026amp;str to a String in Rust?\n     crate_type とは？   Rust の crate_type をまとめてみた - Qiita\n  Linkage - The Rust Reference\n     トレイト(trait)とは？  トレイト(trait)とは任意の型となりうる`Self`に対して定義されたメソッドの集合のことです。\n     http://rust-lang-ja.org/rust-by-example/trait.html\n     \u0026#34;?\u0026#34;とは？ `Result`に対するエラー伝播のためのショートカット(糖衣構文)。 `Ok`なら内容を取得し、`Err`ならその`Err`でリターンする。 戻り値が`Result`であるような関数内で使用できる。\n ありがちなのは、main`関数の中で使用しようとしてコンパイルエラーになること。 (`main`は戻り値が()`であり、上の条件を満たさないので使用できない)\n 参考: Recoverable Errors with Result - The Rust Programming Language\n   ","description":"","id":92,"section":"docs","tags":null,"title":"Rust 勝手に FAQ","uri":"https://yukihane.github.io/docs/rust/rust-faq/"},{"content":"リンク   Rust Playground\n  https://imoz.jp/note/rust-functions.html[Rustは何が新しいのか（基本的な言語機能の紹介）\n  いもす研 (imos laboratory)]\n     プログラミング言語Rust\n  原版にはhttps://doc.rust-lang.org/book/first-edition/[1st Edition], 2nd Editionがあるが、そのどちらとも違う模様(和訳されているのは1stの古いバージョンか？)\n     Rust by Example\n     学習順序  プログラミング言語Rust 3.1数当てゲームまでを実行。\n  Rust by Exampleのhttp://rust-lang-ja.org/rust-by-example/hello.html[1Hello World]を少し読むも、先にテスト方法を見ておいた方がよいかと考える。\n  プログラミング言語Rust 5.2 テストを実行。\n  新用語: アトリビュート([test], [cfg(test)]), モジュール\n     4.25 クレートとモジュール\n  クレート(crate): 他の言語における「ライブラリ」や「パッケージ」(Javaでいうところのpackageではないと思う)\n  モジュール: Javaのpackageのようなもの。ただし階層(ディレクトリ)ごとに可視性を設定できる模様\n     4.27 アトリビュート\n  Javaのアノテーションのようなものか。ただしおそらくコンパイル時に解釈されるもののみ。\n  (少なくとも現時点では)アトリビュートの自作はできない。言語仕様で決められているものがすべて。\n     冒頭リンク Rustは何が新しいのかを流し読み。わからないこともいくつかあるがとりあえず流す。\n  `\u0026#34;hoge\u0026#34;.into()`の`into`とは？ (「into() の返り値は result の型に依存するので、推論には用いられません。」というコメントがあるが…？)\n  ジェネリクスの`\u0026amp;\u0026#39;a`？(「\u0026#39;a は寿命を表し、orig と返り値は同じ寿命であることを表します。」というコメントがあるが…？)\n     Rust by Exampleを再開。\n  3.1構造体\n  デストラクト単に「分解する」の意味の模様。デストラクタなどの言語仕様的な単語ではない。http://rust-lang-ja.org/rust-by-example/flow_control/match/destructuring.html[7.5.1 デストラクト]に説明がある。なお原文では destructure/destructuring であり、destructではない。\n  ユニット: 原文ではユニット構造体(unit structs)。単に「ユニット」と呼ぶとほかの何かと混同してしまうのではないか。\n  「構造体の定義とインスタンスの作成を同時に行う」は原文では「struct instantiation is an expression too」となっており全く意味が違う。\n     3.2.3 テストケース: 連結リスト\n  Box: 「Rustにおいて、すべての値はデフォルトでスタックに割り当てられます。Boxを作成することで、値をボックス化、すなわちヒープ上に割り当てることができます。ボックスとは正確にはヒープ上におかれたTの値へのスマートポインタです。」http://rust-lang-ja.org/rust-by-example/std/box.html[17.1 Box, スタックとヒープ] より。\n  やろうとしていることはわかるが各要素が理解できない。後で見直す。\n     変数をアンダーバーから始めると未使用でも警告が出ない。\n  型キャストの仕様は独特だが、必要な時に見直せばよいか。 5 型キャスティング\n        未解決の疑問点など   メソッドのオーバロードはない？\n  http://rust-lang-ja.org/rust-by-example/fn/methods.html とかを見ると名前を変えている。\n  https://www.reddit.com/r/rust/comments/2umcxv/wait_rust_doesnt_have_function_overloading/\n      Rustでオーバーロードが存在すると引数でmoveするのかborrowするのか紛らわしくなるのでそれを嫌っている可能性も？\n   「メソッド」という呼称はなくなった？\n  http://rust-lang-ja.org/rust-by-example/generics/impl.html のタイトルは「メソッド」だが、英語版では https://rustbyexample.com/generics/impl.html \u0026#34;Implementation\u0026#34;(実装)になっている。\n        ","description":"","id":93,"section":"docs","tags":null,"title":"Rust学習メモ","uri":"https://yukihane.github.io/docs/rust/rust-memo/"},{"content":"https://github.com/White-Oak/qml-rust\n インストール リポジトリをcloneし、そのディレクトリに移動します。\n git clone `https://github.com/White-Oak/qml-rust.git[`https://github.com/White-Oak/qml-rust.git] cd qml-rust\n サブモジュールを取得します。\n git submodule init git submodule update\n build.rs をMinGW向けに編集します。 cfg!(windows) という箇所(2箇所)を false に置換します。\n diff --git a/build.rs b/build.rs index 9371841f..a5043701 100644 --- a/build.rs +++ b/build.rs @@ -11,7 +11,7 @@ fn build_dos(cmake_cfg: \u0026amp;mut cmake::Config) { println!(\u0026#34;cargo:rustc-link-search=native={}\u0026#34;, dst.join(\u0026#34;lib\u0026#34;).display()); - if cfg!(windows) { + if false { println!(\u0026#34;cargo:rustc-link-search=native={}\u0026#34;, dst.join(\u0026#34;build\u0026#34;).join(\u0026#34;lib\u0026#34;).join(\u0026#34;Release\u0026#34;).display()); } else { println!(\u0026#34;cargo:rustc-link-search=native={}\u0026#34;, dst.join(\u0026#34;build\u0026#34;).join(\u0026#34;lib\u0026#34;).display()); @@ -75,7 +75,7 @@ fn find_qt5(_: \u0026amp;mut cmake::Config) { } } - if cfg!(windows) { + if false { let mut qt5_lib_path = PathBuf::new(); qt5_lib_path.push(env::var(\u0026#34;QTDIR\u0026#34;).unwrap_or(String::from(\u0026#34;C:\\\\Qt\\\\5.7\\\\msvc2015_64\u0026#34;)));   exampleを実行してみます。\n cargo run --example properties\n   ","description":"","id":94,"section":"docs","tags":null,"title":"QML-rust","uri":"https://yukihane.github.io/docs/rust/qml-rust/"},{"content":"RustでデバッグするためのGDBと、Qtコンパイル用環境をMSYS2上でセットアップします。\n インストール オフィシャルページ http://www.msys2.org/ から64bit用インストーラをダウンロードし、書かれている手順に沿って進めるだけです。\n   PATH 設定 `C:\\msys64\\mingw64\\bin`を`PATH`に追加しておきます。 (Eclipseからgdbが実行できるようにするためにはこの設定が必要です。)\n なお、優先度は低く(つまり、PATHの最後に追記する)しておいた方が良いかと思います。\n   各種パッケージのインストール デバッガ, コンパイラ pacman -S base-devel mingw-w64-x86_64-toolchain\n  Qt pacman -S mingw-w64-x86_64-qt-creator mingw-w64-x86_64-cmake\n スタティックリンク版が必要なら\n pacman -S mingw-w64-x86_64-qt5-static\n 参考:\n   https://wiki.qt.io/MSYS2#Obtain_Pre-Built_Qt_.26_QtCreator_binary_files_and_Use_instantly_without_Building.2FCompiling[MSYS2\n  Qt Wiki]\n     MinGW-64-bit - Qt Wiki\n      ","description":"","id":95,"section":"docs","tags":null,"title":"MSYS2インストール","uri":"https://yukihane.github.io/docs/rust/msys2/"},{"content":"Windows インストール WinodowsにRustとEclipseベースIDEをインストールする手順。\n 資料   Rustのインストール およびここからたどれる https://github.com/rust-lang-nursery/rustup.rs/blob/master/README.md#working-with-rust-on-windows[rustup\n  Working with Rust on Windows]\n     IDE(Eclipseベース): RustDT Installationおよびここからたどれる User Guide - Configuration\n    事前知識 Windows に関する特記事項 上記のリンク中に説明があるが、Windows版はMSVC ABI と GNU ABIどちらか向けにビルドできる模様(なお、おそらくインストール後でもターゲットはhttps://github.com/rust-lang-nursery/rustup.rs/blob/master/README.md#working-with-rust-on-windows[`rustup`コマンドで変更(追加?)可能]だと思われる)。\n MSVCは必須ではない模様で、おそらく学習用途であればGNU ABIだけでも良いのではないか。\n MSVC ABI を利用するにはhttps://www.visualstudio.com/ja/downloads/[Build Tools for Visual Studio 2017]か、Visual Studio本体(VSを使用する場合、1.19より前のバージョンではhttp://hiratara.hatenadiary.jp/entry/2017/03/28/222553[少し別途対応が要るらしい])のインストールが必要。\n  IDE/デバッガの種類 Rust and IDEs · The Rust Forge にIDEの一覧がある。\n 現状、GDBデバッガ(つまりGNU ABI向け)対応しているのは本ページで説明しているEclipseプラグイン(RustDT)のみの模様。\n 本ページ記載時MSVC ABI向けデバッガは無いと思い込んでいたが、Visual StudioもしくはVisual Studio Codeで実現できる模様。\n   Using Rust in Windows\n  Debug Rust on Windows with Visual Studio Code and the MSVC Debugger\n     手順 事前準備 MSVC ABI をターゲットにしたいのならhttps://www.visualstudio.com/ja/downloads/[Build Tools for Visual Studio 2017]をダウンロードしてインストールしておく。\n GNU ABI だけでよいのなら不要。本格開発でなく勉強目的なら不要だろう。 この場合、インストール時に(もちろん後からでも編集可能だが)、default host triple を `x86_64-pc-windows-msvc`から`x86_64-pc-windows-gnu`に変更しておく。\n なお、インストールせずに次に記載している rustup‑init.exe を実行した場合、次の通りBuild Toolsインストールを促される。\n  Rust Visual C++ prerequisites\n Rust requires the Microsoft C++ build tools for Visual Studio 2013 or later, but they don’t seem to be installed.\n The easiest way to acquire the build tools is by installing Microsoft Visual C Build Tools 2015 which provides just the Visual C build tools:\n  `http://landinghub.visualstudio.com/visual-cpp-build-tools[`http://landinghub.visualstudio.com/visual-cpp-build-tools]\n Alternately, you can install Visual Studio 2015 or Visual Studio 2013 and during install select the \u0026#34;C++ tools\u0026#34;:\n  `https://www.visualstudio.com/downloads/[`https://www.visualstudio.com/downloads/]\n Install the C++ build tools before proceeding.\n If you will be targetting the GNU ABI or otherwise know what you are doing then it is fine to continue installation without the build tools, but otherwise, install the C++ build tools before proceeding.\n Continue? (Y/n)\n    Rustインストール https://www.rust-lang.org/ja-JP/install.html から`rustup‑init.exe`をダウンロードし実行する。これだけでコンパイルはできるようになる。\n ここまでの手順通りインストールを進めるとMSVC ABIがデフォルトになっているためGDBデバッガでデバッグできない。GNU ABIをデフォルトに設定しなおす。(Build Toolsをインストールしていない場合はGNU ABIがデフォルトになっていると思われるので本コマンド実行は不要なはず) \u0026lt;syntaxhighlight lang=\u0026#34;bash\u0026gt; rustup install stable-x86_64-pc-windows-gnu rustup set default-host x86_64-pc-windows-gnu\n あるいは、あらかじめ`rustup‑init.exe`実行時のインストールオプションで`default host triple`を`x86_64-pc-windows-gnu`に変更したうえでインストールを行う。\n 後はIDEのための設定。\n   次のコマンドを実行する(参考):\n   rustup component add rust-src    IDEインストール Oracle JDKをインストールする。\n Eclipseアーカイブダウンロードページ \u0026gt; 最新バージョン \u0026gt; Platform Runtime Binary セクションの該当OSバイナリ をダウンロードして展開する。\n Eclipseを起動し、Help \u0026gt; Install New Software \u0026gt; Add で https://rustdt.github.io/releases/ を追加する。\n RustDT にチェックを入れてインストールする。その際、\u0026#34;Contact all update sites during install to find required software\u0026#34;にもチェックを入れておくこと(依存モジュールも同時にインストールされるようになる)。\n インストール完了後、Eclipse再起動を促されるので再起動する。\n Window \u0026gt; Preference メニューを開き、 Rust を選択する。このダイアログ入力欄に次のように値を設定する。\n     項目名 入力値     Directory\n %USERPROFILE%\\.rustup\\toolchains\\stable-x86_64-pc-windows-gnu\n   Rust \u0026#39;src\u0026#39; Directory\n %USERPROFILE%\\.rustup\\toolchains\\stable-x86_64-pc-windows-gnu\\lib\\rustlib\\src\\rust\\src\n    ＊ `%USERPROFILE%`は実際にはホームディレクトリを指定する。\n Racer, Rainicorn parse_describe, rustfmtはそれぞれDownloadボタンで自動設定できる(コンパイル挟むのでそれなりに時間がかかる)。実行すると、自動で次のようにpathが設定される。\n     項目名 入力値     Racer\n %USERPROFILE%\\.cargo\\RustDT\\bin\\racer.exe\n   Rainicorn parse_describe\n %USERPROFILE%\\.cargo\\RustDT\\bin\\parse_describe.exe\n   rustfmt\n %USERPROFILE%\\.cargo\\RustDT\\bin\\rustfmt.exe\n     デバッガ(GDB)及びコンパイラインストール デバッガ(GDB)をセットアップします。 また、次のページに書かれていることに従って、コンパイラ(GCC)もインストールしておいた方が良いのかもしれません。\n   Rust Win GNU ABI で実際何か作る時は MinGW-w64 の gcc にパスを通しておくのが実質必須と言うお話 - 日曜プログラミング\n   これらはMSYS2を用いてセットアップします。MSYS2インストールを参照してください。\n なお、GDB(とGCC)だけでよいのであれば、http://tdm-gcc.tdragon.net/download[TDM-GCC]が容量も小さいのでこちらの方が良いかもしれません。 ただし、ここではこの後Qtのビルドも行いたいので、MSYS2を選んでいます(複数のパッケージ導入はMSYS2上で管理する方が簡単)。\n     プロジェクト作成/実行 注意点 現状、RustDTのメニューからプロジェクトを生成した場合、テストファイルは1つも生成されないが、この状態だと Run や Debug で \u0026#34;Executable file doesnt exist\u0026#34;, \u0026#34;Program file doesnt exist\u0026#34;などと言われてしまう。\n 対処法は `tests/dummy.rs`に空ファイルを生成すること。テストコードが1つもない場合上の事象になってしまうようだ(参考。なお他にもボタンを押したときの実行コマンドラインを変更するといったワークアラウンドもある模様 )。\n  プロジェクトインポート 新規プロジェクト作成と同様の手順(New \u0026gt; Project \u0026gt; Rust \u0026gt; Rust Cargo Project)で進め、LocationでCargo.tomlを置いているディレクトリを指定すればよい。 通常のプロジェクトインポート(Importメニュー)とは異なるので注意。\n    ","description":"","id":96,"section":"docs","tags":null,"title":"Rust環境セットアップ","uri":"https://yukihane.github.io/docs/rust/rust-setup/"},{"content":"Windows(Windows10) Windows10でUSキーボード設定を行う Windowsメニュー \u0026gt; 設定(ギアのアイコン) \u0026gt; 時刻と言語 \u0026gt; 地域と言語 \u0026gt; 日本語 \u0026gt; オプション \u0026gt; レイアウトを変更する\n でキーボードレイアウトを変更できる。\n 参考: Windows10日本語版で英語配列キーボードを使用する - Qiita\n  日本語/英語 入力切り替え設定  タスクバー右下のIMEアイコンを右クリックし プロパティ \u0026gt; 詳細設定 を開く\n  「編集操作」の「変更」を選択する\n  `Ctrl+SPACE`の箇所に `IME-オン/オフ`を設定する\n   参考: Windows10を英語配列キーボードで使っている人向け日本語入力切り替えの設定方法 - 三流SEの技術LOG\n    Barocco キーマップ変更(マクロ設定) オフィシャルマニュアルは次のページより:\n   ノーマル版(英語配列)\n  RBG版(英語配列)\n   次のページは、マニュアルには書かれていない、経験で分かったことも書かれているので一読の価値あり。\n   Baroccoキーボード設定 (for Mac) - Qiita\n  ぼくのBAROCCO MD600キー配置 - Qiita\n   工場出荷状態に戻す FN + R を長押しで、LED2が白色で点滅。5秒後、選択中のレイヤーが工場出荷状態に戻ります。\n  CapsLockをCtrlキーにする(通常のキーの設定変更方法)  FN + \u0026lt; キーを押しLayer1に移動する。\n  FN + 右Ctrl キーを押しプログラミングモードに入る。\n  プログラムしたいキーである 左CapsLock キーを押す\n  プログラム内容を入力する。すなわちここでは 左Ctrl キーを押す。\n  PN キーを押しプログラム入力を完了する。\n  FN + 右Ctrl キーを押しプログラミングモードを終了する。\n    左CtrlキーをFNキーにする FNキー(及びPNキー)の変更はほかのキーとは異なり少し特殊な模様。詳細はマニュアル参照。\n  FN + 左Shift キーを約3秒押し続ける。LED3が赤色で点滅する。\n  いったん手を放し、再び変更するキーである FN キーを押す。\n  変更先のキーである 左Ctrl キーを押す。\n   FNキー(PNキーも)は1つのキーしか設定できないらしい。\n    自分の変更内容   CapsLockをCtrlにする\n  左CtrlをFNキーにする\n  矢印キーをviの挙動と同様にする\n  hを左、jを下、kを上。(lはそのまま右)\n     uをページダウン、iをページアップ、yをホーム、oをエンドに設定する\n  右スペースバーをEscに設定する\n     ","description":"","id":97,"section":"docs","tags":null,"title":"Mistel Barocco","uri":"https://yukihane.github.io/docs/mistel-barocco/"},{"content":"いわゆるオレオレフレームワークについて。\n パターンについて   (Java Servletコンテナを利用した)オレオレフレームワークパターン\n  オレオレフレームワークパターンの正体: Front Controller Pattern\n   上記のリンク先にまとめたが、Servletコンテナ上で動く、Front Controllerパターンで実装されたものがほとんではないか。\n これには、StrutsやSpringなど、メジャーなフレームワークも含まれる。\n   フレームワーク Nablarch TIS社製OSS。 Nablarch 所感 参照。\n  r2framework リクルート社内向けだと思われる。求人サイトにはこの名称が登場しているが、実際どんなものかわかるような情報は無い。\n   メモ: r2framework\n      ","description":"","id":98,"section":"docs","tags":null,"title":"Minor Framework","uri":"https://yukihane.github.io/docs/java/minor-framework/"},{"content":"一覧 GitHubのstarが多い順に並べている。\n  Dozer\n  MapStruct\n  Orika\n  Selma\n   上記以外: https://www.javacodegeeks.com/2013/10/java-object-to-object-mapper.html\n   Dozerが最もメジャーであると思われるものの、開発が停滞している(※ 2017/04 頃から再開されつつあるようにも見える)。\n  Dozerは他と比較しパフォーマンスが劣後している模様。\n     比較記事など   Java mapping: Selma vs MapStruct - Stack Overflow\n     ","description":"","id":99,"section":"docs","tags":null,"title":"Object to Object Mapper","uri":"https://yukihane.github.io/docs/java/object-to-object-mapper/"},{"content":"http://commons.apache.org/proper/commons-daemon/procrun.html\n prunsrv, procrun とか、呼び方は色々？(厳密には指しているものが違うと思うが…)\n ","description":"","id":100,"section":"docs","tags":null,"title":"Commons Daemon","uri":"https://yukihane.github.io/docs/java/commons-daemon/"},{"content":"https://docs.oracle.com/javaee/6/tutorial/doc/gjivm.html\n // CriteriaBuilder を使用したクエリ構築 // ここでは メールアドレス hello@example.co.jp を持つ Member の検索を行います // CriteriaBuilder インスタンスを生成します. final CriteriaBuilder cb = em.getCriteriaBuilder(); // CriteriaQuery インスタンスを生成します. // ここで引数に指定するのは, クエリ実行結果として期待する型です. final CriteriaQuery\u0026lt;Member\u0026gt; cq = cb.createQuery(Member.class); // FROM句で指定する情報相当のものをセットします. // クエリルートインスタンスが生成されます. final Root\u0026lt;Member\u0026gt; member = cq.from(Member.class); // where で条件を設定します. // フィールドの指定にはMetamodel(エンティティ名にアンダーバーを付与したもの)が使えます. // where member.mailaddress = \u0026#39;hello@example.co.jp\u0026#39; // と指定したようなイメージです cq.where(cb.equal(member.get(Member_.mailAddress), \u0026#34;hello@example.co.jp\u0026#34;)); // クライテリアクエリが完成したら, そのインスタンスからクエリを生成します. final TypedQuery\u0026lt;Member\u0026gt; q = em.createQuery(cq); // ただ1つの結果となることを期待するクエリであれば // getSingleResult メソッドを実行し結果を取得します. final Member res = q.getSingleResult();   // CriteriaBuilder を使用したクエリ構築 その2 // リレーションシップが関係するクエリ. // Division \u0026#34;DIV\u0026#34; に所属する Member を取得する例. final CriteriaBuilder cb = em.getCriteriaBuilder(); final CriteriaQuery\u0026lt;Member\u0026gt; cq = cb.createQuery(Member.class); final Root\u0026lt;Member\u0026gt; member = cq.from(Member.class); // リレーションシップをたどるにはjoinメソッドを使用します. final Join\u0026lt;Member, Division\u0026gt; division = member.join(Member_.division); // 関連先のエンティティの条件指定も, 前回と同様です. cq.where(cb.equal(division.get(Division_.name), \u0026#34;DIV\u0026#34;)); final TypedQuery\u0026lt;Member\u0026gt; q = em.createQuery(cq); // 複数件取得できる可能性があるのでgetResultListを用います. final List\u0026lt;Member\u0026gt; res = q.getResultList();   ","description":"","id":101,"section":"docs","tags":null,"title":"JPA Criteria Query","uri":"https://yukihane.github.io/docs/java/jpa-criteria-query/"},{"content":"通常は リポジトリマネージャ(Sonatypeの Nexusなど)を使うのが便利で良いが、レンタルサーバではJavaを動作させられなかったりするため、Apache httpdとscpで実現する方式を記載。\n 参考: http://maven.apache.org/plugins/maven-deploy-plugin/examples/deploy-ssh-external.html\n  $M2_HOME/conf/settings.xmlを`~/.m2/`ディレクトリに無ければコピーする。\n   # `servers`タグの下に`server`タグを作成し、上記ページのようにサーバ情報を記述する。今回記述したのは`id`と`username`のみでよかった。(公開鍵認証)\n \u0026lt;servers\u0026gt; \u0026lt;server\u0026gt; \u0026lt;id\u0026gt;default\u0026lt;/id\u0026gt; \u0026lt;username\u0026gt;myname\u0026lt;/username\u0026gt; \u0026lt;/server\u0026gt; \u0026lt;/servers\u0026gt;    deployするモジュールの`pom.xml`を編集する。これも上記ページに記載がある。`distributionManagement`にデプロイ先のリポジトリ情報を書き、`extension`で`wagon-ssh-external`を記述。\n  `mvn deploy`コマンドでデプロイできる。\n   ","description":"","id":102,"section":"docs","tags":null,"title":"Maven Repository","uri":"https://yukihane.github.io/docs/java/maven-repository/"},{"content":"参考リンク Webサイト   Project Jigsaw: Quick Start Guide - OpenJDKのページ\n  Java 9のモジュール機能「Project Jigsaw」の基本を紹介 (1/2)：CodeZine（コードジン）\n  Java 9 - Jigsaw - Apache Maven - Apache Software Foundation - MavenプラグインのJava9対応状況\n    書籍   Java 9 Modularity - Oreilly\n  The Java Module System - Manning\n      自分が行った学習手順   前述OpenJDKサイトのQuick Startのページを見て概要をつかむ。\n  最初は Services 節くらいまで読めば良いように思う(実際のところ The linker (jlink)など使用する機会はそう無いのでは)。\n     Mavenでの利用方法がわからなかったので書籍http://amzn.to/2CLmjCm[Java 9 Modularity]の11章を流し読みする。従来と使用方法は変わらないようだった。\n  コードはhttps://github.com/java9-modularity/examples/tree/master/chapter11[こちら]にある。これだけ見ても概ね理解できるはず。\n        module-info.java 内で使用するキーワード JLS 7.7 Module Declarations (HTML版, PDF Jigsaw差分表記版)より。\n 既に次のページに日本語解説があったのでそちらも参照のこと。\n   Java9 Project Jigsawのモジュールがわからないので調べた - Qiita\n  http://www.torutk.com/projects/swe/wiki/Java%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0#%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E5%AE%9A%E7%BE%A9%E3%83%95%E3%82%A1%E3%82%A4%E3%83%ABmodule-infojava%E3%81%AE%E4%BB%95%E6%A7%98[Javaモジュールシステム\n  ソフトウェアエンジニアリング - Torutk]\n      ModuleDeclaration: {Annotation} [open] module Identifier {. Identifier} { {ModuleDirective} }     `open`を指定していない場合(ノーマルモジュールの場合)、コンパイル時、実行時ともに明示的にexportされたパッケージのみ参照を許可する。`open`を指定した場合(オープンモジュールの場合)、コンパイル時には明示的にexportされたパッケージのみ参照を許可する(この点はノーマルモジュールと同様)。実行時は、ノーマルモジュールと異なり、全パッケージの参照を許可する。\n  `open`はリフレクションによるアクセスを想定した仕様の模様。詳細はJLS 7.7節参照。\n  後述の`opens`モジュールディレクティブはパッケージごとの指定だが、オープンモジュールにすれば全パッケージが対象になる、ということのようだ。\n      ModuleDirective: requires {RequiresModifier} ModuleName ; exports PackageName [to ModuleName {, ModuleName}] ; opens PackageName [to ModuleName {, ModuleName}] ; uses TypeName ; provides TypeName with TypeName {, TypeName} ;     モジュールディレクティブについては次節にまとめた。\n   RequiresModifier: (one of) transitive static     後述の`requires`モジュールディレクティブ説明の中で言及。\n   モジュールディレクティブ requires   依存先(自身が参照しているモジュール)を指定するディレクティブ。\n  `java.base`は自動で設定されるので明記してはいけない。\n  transitive: 自身をrequireしたモジュールは、`requires transitive`で指定しておいたモジュールもrequireしたことになる。つまり、`requires transitive`で指定したモジュールも暗黙的に使用可能になる。\n  static: `requires static`は、コンパイル時には必要だが実行時には必ずしも必要でないモジュールに対して記述する。\n  書籍「Java 9 Modularity」5.6.1節 \u0026#34;Compile-Time Dependencies\u0026#34; では、コンパイル時のアノテーションプロセッシング(のみ)に必要なモジュールを指定するような例が書かれていた。\n       exports, opens   `exports`にはコンパイル時及び実行時にアクセスを許可するパッケージを記述する。\n  `opens`には実行時にアクセスを許可するパッケージを記述する。コンパイル時には許可しないのが`exports`と異なる。\n  前述の`open`によるオープンモジュール指定の、パッケージ個別指定版のようなものか。\n     exports, `opens`ともに`to`で特定のモジュールに対してのみアクセスを許可するような設定が可能。\n    uses   `java.util.ServiceLoader`を用いてロード可能なサービスの記述に用いる。\n  こちらのサイトが詳しい: http://d.hatena.ne.jp/bitter_fox/20160720/1469042323[JigsawでSPIを使用する\n  きつねとJava！]\n     ServiceLoaderのJavaDocも参考になる。\n    provides [service] with [service provider]   サービスプロバイダの記述に用いる。\n  サービスプロバイダとは、`uses`節で記載した、サービスを継承/実装した具象クラス。\n  こちらについても`uses`節で記載したリンク先を読むべし。\n       ビルドツール等の対応 Maven Compiler Plugin   configuration で release (9のjavacコマンドで使用できるオプション。 参考) が利用できるようになっている。\n    Exec Maven Plugin java9に対応した modulepathの指定、実行クラスの指定ができるようになっている。\n    ","description":"","id":103,"section":"docs","tags":null,"title":"Jigsaw","uri":"https://yukihane.github.io/docs/java/jigsaw/"},{"content":"Bazelとは ビルドシステム。Ant, Mavenなどと同系統。 ビルド対象はJavaに限らない。\n Google社内のJava/JavaScript境界辺りを開発している人たちが使っている形跡がある。 具体的には、GWT, J2CL, Closure Tools。\n 比較されるその他のプロダクトには次のようなものがあるらしい。\n   Bazel - Google社。社内で使用していたBlazeという名前のビルドシステムをオープンソース化したものらしい。\n  Buck - Facebook社。元々Blazeクローンとして作られたらしい？[1][2]\n  Pants Build System - Twitter社？\n     インストール   Installing Bazel on Ubuntu - Bazel\n   Ubuntu16.04で行う。後述の通りインストールしたBazelバージョンは0.9.0だが、このバージョンではJDK8対応までで、JDK9は未対応の模様。\n 本環境ではJDK9とJDK8をインストール済みで、デフォルトはJDK9を使うようにしている。\n echo \u0026#34;deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8\u0026#34; | sudo tee /etc/apt/sources.list.d/bazel.list curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add - sudo apt-get update \u0026amp;\u0026amp; sudo apt-get install bazel   1行目は`sources.list`の設定。書式については`man sources.list`コマンドで読める。\n なお http://storage.googleapis.com/bazel-apt にアクセスしてみたが1.9向けは存在しない模様なのでサンプルの通りjdk1.8としている。\n インストールが終了したら実行してみる。\n bazel version   JDK9環境では`WARNING`が多数出た。ちなみにJDK8で試すと警告は出ない。\n WARNING: An illegal reflective access operation has occurred WARNING: Illegal reflective access by com.google.protobuf.UnsafeUtil (file:/home/yuki/.cache/bazel/_bazel_yuki/install/754ae0b065b3dfe883541ff567ae8b5e/_embedded_binaries/A-server.jar) to field java.nio.Buffer.address WARNING: Please consider reporting this to the maintainers of com.google.protobuf.UnsafeUtil WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations WARNING: All illegal access operations will be denied in a future release Build label: 0.9.0 Build target: bazel-out/k8-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar Build time: Tue Dec 19 09:31:58 2017 (1513675918) Build timestamp: 1513675918 Build timestamp as int: 1513675918   お試しビルド Get the sample project にサンプルプロジェクトが用意されていたのでそれをそのまま用いることにする。\n git clone https://github.com/bazelbuild/examples/ cd java-tutorial   ビルドしてみる。\n bazel build //:ProjectRunner   エラーが出てビルド失敗する。\n INFO: Analysed target //:ProjectRunner (0 packages loaded). INFO: Found 1 target... ERROR: missing input file \u0026#39;@local_jdk//:jre/lib/rt.jar\u0026#39; ERROR: /home/yuki/programs/hello-bazel/examples/java-tutorial/BUILD:1:1: //:ProjectRunner: missing input file \u0026#39;@local_jdk//:jre/lib/rt.jar\u0026#39; Target //:ProjectRunner failed to build Use --verbose_failures to see the command lines of failed build steps. ERROR: /home/yuki/programs/hello-bazel/examples/java-tutorial/BUILD:1:1 1 input file(s) do not exist INFO: Elapsed time: 0.325s, Critical Path: 0.04s FAILED: Build did NOT complete successfully   どうやらBazelは初回起動時にサーバを起動し、以後そのサーバ経由で色々と処理を行っているように見える(処理高速化のための仕組みだろう)。\n このサーバはJDK8が前提になっているようなので、サーバ起動(=初回コマンド実行)はJDK8を用いなければならないようだ。\n 一旦サーバをシャットダウンし、JDK8環境でサーバを起動する。\n bazel shutdown (JDK8にパスを通す) bazel version   この状態で、JDK9で再度ビルドコマンドを実行してみる。\n bazel build //:ProjectRunner   正常にビルドが完了した模様。\n INFO: Analysed target //:ProjectRunner (13 packages loaded). INFO: Found 1 target... Target //:ProjectRunner up-to-date: bazel-bin/ProjectRunner.jar bazel-bin/ProjectRunner INFO: Elapsed time: 3.934s, Critical Path: 0.29s INFO: Build completed successfully, 4 total actions   bazel-bin/ProjectRunner.jar`が生成されているので念のため `javap -v`コマンドで.class`ファイルのバージョンを見てみる。\n  minor version: 0 major version: 52   Java8バージョンのバイナリだった。サーバを動かしたJDKを使用しているのだろう(考えてみればそうなるのが自然か)。 結論として、JDK9にはまだ対応していないのだろう。\n   Java 9 should be supported · Issue #3410 · bazelbuild/bazel\n       1. https://blog.ltgt.net/in-quest-of-the-ultimate-build-tool/  2. http://anemone.dodgson.org/2015/06/11/cover-songs/   ","description":"","id":104,"section":"docs","tags":null,"title":"Bazel","uri":"https://yukihane.github.io/docs/java/bazel/"},{"content":"Mavenで差分コンパイルできない 常に\n  [INFO] Changes detected - recompiling the module!\n   というメッセージが出て全コンパイルが行われる事象。\n   http://stackoverflow.com/a/19653164/4506703\n  http://stackoverflow.com/a/17948010/4506703\n   false を設定することで、本来この機能に期待されている 賢い インクリメンタルコンパイルが行われなくなる。 (この賢いインクリメンタルコンパイル機能がバグっているため、全ファイル変更されたと見なされているのが現状。)\n 上記設定をfalseにすると、代わりに 通常の インクリメンタルコンパイルが行われる。 この結果、大半の場合にはfalseにした方がコンパイル時間は短縮される。\n ただし、後者の 通常の インクリメンタルコンパイルは、ファイル間の依存関係などを考慮しない(、のだと思われる)。 そのため、おそらく、変更したファイルのみが再コンパイル対象となり、例えば他ファイルが使用しているインタフェースが変わった場合、使用側は再コンパイルされないため実行時エラーになる(と思われる)。\n   常に再コンパイルが走るよりはまし。上記のような場合には手動でcleanすればよい。\n  CI環境ではcleanからビルドを始めるので影響はない。\n     lombok install   http://qiita.com/satty3104/items/42fc67a7e9fca0f807a9\n   `java -jar lombok.jar`だとMacのEclipse Neonにインストールできなかった。手動インストールが必要。\n lombok.jarを所定の場所に配置:\n mv lombok.jar Eclipse.app/Contents/MacOS/   Eclipse.app/Contents/Eclipse/eclipse.ini`に-vmargs`セクションがあるので、そこにの行を追記:\n -Xbootclasspath/a:lombok.jar -javaagent:lombok.jar     Maven POM Javaバージョン指定 \u0026lt;maven.compiler.target\u0026gt;11\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;maven.compiler.source\u0026gt;11\u0026lt;/maven.compiler.source\u0026gt;    formatter formatter-maven-pluginを利用する。\n  \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;net.revelc.code.formatter\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;formatter-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.8.1\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;compilerCompliance\u0026gt;${java.version}\u0026lt;/compilerCompliance\u0026gt; \u0026lt;compilerSource\u0026gt;${java.version}\u0026lt;/compilerSource\u0026gt; \u0026lt;compilerTargetPlatform\u0026gt;${java.version}\u0026lt;/compilerTargetPlatform\u0026gt; \u0026lt;configFile\u0026gt;https://raw.githubusercontent.com/yukihane/prefs/master/eclipse/java-format-setting.xml\u0026lt;/configFile\u0026gt; \u0026lt;lineEnding\u0026gt;LF\u0026lt;/lineEnding\u0026gt; \u0026lt;skipCssFormatting\u0026gt;true\u0026lt;/skipCssFormatting\u0026gt; \u0026lt;skipHtmlFormatting\u0026gt;true\u0026lt;/skipHtmlFormatting\u0026gt; \u0026lt;skipJavaFormatting\u0026gt;false\u0026lt;/skipJavaFormatting\u0026gt; \u0026lt;skipJsFormatting\u0026gt;true\u0026lt;/skipJsFormatting\u0026gt; \u0026lt;skipJsonFormatting\u0026gt;true\u0026lt;/skipJsonFormatting\u0026gt; \u0026lt;skipXmlFormatting\u0026gt;false\u0026lt;/skipXmlFormatting\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;format\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt;    Apache POI   http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.apache.poi%22\n  https://poi.apache.org/overview.html\n   xlsxファイルを操作したい場合は`poi-ooxml`を追加すれば残りの必要なものは依存関係で自動で入る。\n \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.poi\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;poi-ooxml\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.16-beta2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;    slf4j   http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.slf4j%22\n  https://www.slf4j.org/manual.html#projectDep\n  https://www.slf4j.org/faq.html#maven2\n   \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.slf4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;slf4j-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.7.23\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.slf4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;slf4j-simple\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.7.23\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;    lombok   http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.projectlombok%22\n  https://projectlombok.org/mavenrepo/\n   \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.16.14\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;      ","description":"","id":105,"section":"docs","tags":null,"title":"Java","uri":"https://yukihane.github.io/docs/java/java/"},{"content":"CTIソリューション CTIとは Computer Telephony Integration の略。\n コールセンターで利用するシステムのこと？\n   ","description":"","id":106,"section":"docs","tags":null,"title":"用語集","uri":"https://yukihane.github.io/docs/biz/term/"},{"content":"フリーランスで働く上での契約についての知識。\n 契約形態   請負契約と準委任契約、どっちで契約すればいいの？〜請負契約・準委任契約・労働者派遣契約の違い〜\n    「請負契約」「準委任契約」「労働者派遣契約」の知識を、主に発注側の視点から解説します。\n    民法では(中略)業務委託契約というものは存在しません。業務委託契約とは、請負契約と準委任契約をひっくるめた実務上の呼称なのです。\n    一般的には次の三つのうち、どれかの契約を結びます。その三つとは、成果物の完成を約束する請負契約、業務の処理を依頼する準委任契約、エンジニアなどの人材を供給してもらう派遣契約、です。\n    委任契約＝準委任契約です。\n     精算 精算/精算幅 標準勤務時間。この時間内の勤務であれば契約金額が全額支払われる。 140-180(140時間以上160時間以下)や 140-200(140時間以上200時間)とったように表記される。\n ちなみに、標準的には1日8時間 x 20日 で1月の時間を計算するので160時間。±1時間/日で 140-180という数字が出るのだろう。 これを標準として考えると、140-200の契約は、最大20時間分損をしているということになる。 (残業が発生しないのなら変わらないが、そういう契約を提示している時点で残業発生する可能性が高いともみなせる)\n 140-180表記の場合、140時間を下回ると控除、180時間を超過すると`超過`が発生する。 働かなかった分は減額され、働き過ぎた分は増額されるということ。\n 計算方法も契約によっていくつか方式がある。次の節に示す。\n  控除/超過分の計算 計算方式は上下割あるいは中間割で提示されるだろう。先に言っておくと中間割の方が公平。\n 例えば80万円/月、精算幅140-180の契約で、130時間働いたとすると10時間の控除が発生する(要するに、契約した時間より働いた時間が10時間少なかったので割り引かれる)。\n このとき、上下割だと、\n 80万円/140時間 = 5,714円/時間   で時給換算され、計5万7千140円が控除される(割り引かれる)[1]。\n 逆に10時間超過の場合は\n 80万円/180時間 = 4,444円/時間   で時給換算される。\n 中間割の場合は、控除も超過も140-180の中間である160時間で時給換算される。\n 80万円/160時間 = 5,000円/時間   参考: ※SESのスキル見合いや精算幅/上下割/中間割とは？【徹底解説】\n     1. 端数についてどうするかも契約による   ","description":"","id":107,"section":"docs","tags":null,"title":"フリーランス契約","uri":"https://yukihane.github.io/docs/biz/contract/"},{"content":"初めて青色申告、はやめにやっておくこと   確定申告に使うサービスの初期セットアップ\n  自分は当初http://www.yayoi-kk.co.jp/products/aoiro/index.html[やよいの青色申告]を使っていてその後https://www.freee.co.jp/[freee]に乗り換え。\n  今からならWebサービスの方が良いでしょう。パッケージソフトのライセンス管理とか、Windowsでしか動かないとかは今やどうかと。(ちなみにやよいの青色申告もhttp://www.yayoi-kk.co.jp/products/aoiro_ol/index.html[オンライン版]がある模様。\n  それ以外だと Money Forwardの MFクラウド確定申告が有名なのかな？\n     定期的な支払いを口座引落カード引き落としなどにしておく\n  記録に残るようにしておかないと領収書を補完するのが非常に面倒\n  自動引き落としにしておくと、上記のサービスと自動連携できる\n     銀行通帳記帳を合算しない申請(以下はみずほ銀行の場合)\n  通帳の取引明細は、確定申告の際のチェック用にあると非常に助かる。\n  通常だと、「一定の件数、期間を超える取引（未記帳取引）は、取引ごとの明細を通帳に記入せず、まとめての記帳となります。(未記帳分合算)」ということで、こまめに記帳しないと明細が記録されなくなる。(参考)\n  窓口で「取引明細証明書」を取り寄せれば明細は分かる。ただし即座発行は不可能で日数がかかる。\n     窓口で申請すれば、通帳に「未記帳分合算」をせずに取引を全部記帳するようにできた。\n  ただ、例えば住信SBIネット銀行だとネットで明細7年間分みられるなど、基本スペックがそもそも違う。今から始めるならそういう銀行にしておく方が良いかも。\n     クレジットカード明細の紙での送付\n  三井住友VISAカードを利用しているが、オンライン明細だと数ヶ月しか残っていないので保存するのを忘れると失われてしまう。\n  と思ったら今はhttps://www.smbc-card.com/mem/oshiharai/wm_mail_top.jsp[15ヶ月前まで見られる]ようになっていた。Web明細に戻そう…\n        12月届く書類をちゃんとしまっておく 確定申告するのに用いる書類のうち、年末に届くものがいくつかあります。 確定申告(2月-3月)までにしばらく間が開くので、よくどこに言ったか忘れてしまう。 ちゃんと保管しておきましょう。\n 確定申告書と一緒に提出する必要があります。\n   社会保険料(国民年金保険料)控除証明書\n  生命保険料控除証明書\n   国民健康保険に関しては、添付する書類はないですが、収めた金額を記入する必要があります(自動引き落としにしておくと通帳等で確認できます)。 なお、国民健康保険料通知書に書かれている年間の支払い料金は、確定申告の期間とは異なるので注意が必要です。 (確定申告に記載するのは1-12月で払った合計、通知書に書かれているのは6月からの1年分。)\n   シーズン到来 自分が今シーズン行った作業メモ。 前述の通り、freeeを利用しているのでそれが前提となります。\n 別に確定申告期間でなくとも、事前にやっておけば良いことも多いと思いますが…\n Amazon履歴PDF化、印刷 freeeに登録されている取引と突合チェック用。自分の場合個人用と事業用で分けていないのでどちら用のものか判別する必要があります。\n https://www.amazon.co.jp/gp/css/order-history/ から。対象年で絞り込んで印刷。一応前後も確認しておく。\n Amazonの履歴を1ページごとにPDF化していくと大量になるのでまとめて連結して保存、印刷することにしています。\n PDF連結には https://www.cube-soft.jp/cubepdfutility/ を使用したはず(WINアプリ)。\n 履歴をスクレイピングするスクリプトも有るようですし、自分用に作ろうかとも思っていますが頓挫中。\n   【アマゾン注文履歴フィルタ】確定申告にも便利かも？！ Kindle 等のデジタルコンテンツの領収書をまとめて表示する拡張機能／アドオン／ユーザースクリプト\n  https://forest.watch.impress.co.jp/docs/review/1106752.html\n       クレジットカード履歴PDF化、印刷    ","description":"","id":108,"section":"docs","tags":null,"title":"確定申告","uri":"https://yukihane.github.io/docs/biz/report/"},{"content":"売掛金   未決済の取引を登録する・消し込む(売掛金・買掛金など) – freee ヘルプセンター\n     ","description":"","id":109,"section":"docs","tags":null,"title":"freee","uri":"https://yukihane.github.io/docs/biz/freee/"},{"content":"Kubernetesとは？   Kubernetes とは(Red Hat社サイト)\n    Linux コンテナを実行しているホストをまとめてクラスタ化できるということです。Kubernetes はこれらのクラスタを容易に、そして効率的に管理するために役立ちます。\n     試してみる/動かしてみる オフィシャルドキュメントにMinikubeで試して見る方法が書かれているのでこれに従う。\n チュートリアルの内容はこちらに日本語で解説されている:\n   Kubernetesに入門したい\n     ","description":"","id":110,"section":"docs","tags":null,"title":"Kubernetes","uri":"https://yukihane.github.io/docs/devops/kubernetes/"},{"content":"取り敢えず実行したい docker run -it --rm centos:7 /bin/bash     ","description":"","id":111,"section":"docs","tags":null,"title":"Docker","uri":"https://yukihane.github.io/docs/devops/docker/"},{"content":"AsciiDoc形式でblogを書くためにHugoをセットアップする。 Hugo自体はGo言語製、またAsciiDocの処理にはAsciidoctorが必要で、こちらはRuby製。 これらの環境をローカルで行いたくないのでDockerコンテナ上で実行させることにする。\n klakeggさん？のイメージを用いることにする。\n   dockerhub\n   quickstart 公式サイトの Quick Start 節を実行してみる。\n Step 1: Install Hugo 次の設定を`.bashrc`に設定する。ダブルクオートでなく、シングルクオートで囲うこと。\n # https://github.com/klakegg/docker-hugo alias hugo=\u0026#39;docker run --rm -it -u $(id -u $USER) -v $(pwd):/src -v $(pwd)/output:/target klakegg/hugo:0.62.2-ext-asciidoctor\u0026#39; alias hugo-server=\u0026#39;docker run --rm -it -u $(id -u $USER) -v $(pwd):/src -v $(pwd)/output:/target klakegg/hugo:0.62.2-ext-asciidoctor server\u0026#39;   これで、`hugo`をタイプすればDockerコンテナの中でhugoコマンドが実行される。\n  Step 2: Create a New Site hugo new site quickstart   を実行すると、カレントディレクトリに`quickstart`, `output`ディレクトリができる。\n `output`は不要なので削除する(alias設定したコマンド上、カレントディレクトリに、本来不要でも、常にできてしまう):\n rmdir output   Step 3 以降は特に違いがなかったので省略。\n    初期設定 参考リンク   Configure Hugo - config.toml の設定内容\n  Front Matter - postのヘッダに書く内容\n      ","description":"","id":112,"section":"docs","tags":null,"title":"hugo","uri":"https://yukihane.github.io/docs/apps/hugo/"},{"content":"設定   開いたタブをそのままにする\n   { \u0026#34;workbench.editor.enablePreview\u0026#34;: false }     ","description":"","id":113,"section":"docs","tags":null,"title":"VS Code","uri":"https://yukihane.github.io/docs/apps/vscode/"},{"content":"リンク 基本情報   オフィシャルサイト\n  オフィシャルのDL版\n     Steam\n   メモ:\n   ストア版(非Steam版)ではインストールできるのは1台(RPGツクールMVのみ2台)らしい(オフィシャルFAQ)。だとすると、複数の環境で開発する場合にはSteam版の方が良いのかもしれない。\n  …と思いきや、 ストア版はSteamキーが付属しているのでストアで買えばSteam版として使用できるらしい。\n     Steam版には Live2D が付属していないエディションがある。\n  ラノゲツクールとラノゲツクールMVは別物。\n    チュートリアルなど初心者向け情報   Tutorials :: Visual Novel Maker General Discussion - チュートリアルビデオリンク集(英語)\n      初期設定/序盤知識 日本語 Tools \u0026gt; Preferences \u0026gt; Application \u0026gt; General の Language\n 設定が終わったら再起動。 なお、https://tkool.jp/support/faq/lngmv/lngmv_faq[オフィシャルのFAQ]によると、すぐに再起動するのでなく、終了後10秒ほど待ってから起動すると良いらしい。\n  マニュアル ヘルプメニューから開けるが、一瞬どう見ればいいのかわからない。\n 左端のナビゲーションの中の Table of Contents をクリックしてメニューを出した後、そのメニューの中の▲をクリックすれば全体の目次が表示される。\n \n    ","description":"","id":114,"section":"docs","tags":null,"title":"ラノゲメーカーMV","uri":"https://yukihane.github.io/docs/apps/visual-novel-maker/"},{"content":"録画フォーマット OBS Studioでオーディオをマルチトラックで録画する場合にはmkvを使うのがよさそう。 ただしそのままではDavinci Resolveが認識できないのでffmpegで変換を行う。\n  ffmpeg -i \u0026lt;入力ファイル\u0026gt;.mkv -c copy -map 0 output.mov   実際には次のようなシェルスクリプトを使ってgit-bashのbashで実行している:\n #!/bin/bash # https://stackoverflow.com/a/8200370/4506703 set -eu for i in *.mkv; do name=$(echo \u0026#34;$i\u0026#34; | cut -d\u0026#39;.\u0026#39; -f1) output=$name.mov if [ ! -f \u0026#34;$output\u0026#34; ]; then echo \u0026#34;PROCESSING $i\u0026#34; ffmpeg -i \u0026#34;$i\u0026#34; -c copy -map 0 \u0026#34;$output\u0026#34; else echo \u0026#34;skip $i, processd file exists\u0026#34; fi done     HowTo 字幕を挿入する 本当の字幕機能もあるが、いわゆるゲーム実況での字幕はこの機能では十分ではないはず。\n エフェクトライブラリ \u0026gt; ツールボックス \u0026gt; タイトル \u0026gt; テキスト から挿入できるものが欲しかったもののはず。\n  瞬間的なピーク音を低減する 参考: https://www.youtube.com/watch?v=E8Q2MhGw3wk\u0026amp;t=3m10s\n インスペクタ \u0026gt; オーディオ \u0026gt; クリップのボリューム で特定の区間のボリュームを調整できる。\n    ","description":"","id":115,"section":"docs","tags":null,"title":"Davinci Resolve","uri":"https://yukihane.github.io/docs/apps/davinci-resolve/"},{"content":"インストールする機能拡張   octotree\n  Quick Javascript Switcher\n  uBlock Origin\n     検索エンジン設定     検索エンジン キーワード URL     alc\n alc\n https://eow.alc.co.jp/search?q=%s\n   Maven Central\n mvn\n https://search.maven.org/search?q=%s\n      ","description":"","id":116,"section":"docs","tags":null,"title":"Google Chrome","uri":"https://yukihane.github.io/docs/apps/google-chrome/"},{"content":"リンク   パッケージ化とインストール - Mozilla | MDN\n  アドオンを投稿する - Mozilla | MDN\n  Developer Hub :: Add-ons for Firefox\n        ","description":"","id":117,"section":"docs","tags":null,"title":"Firefox Webextension","uri":"https://yukihane.github.io/docs/frontend/firefox-webextension/"},{"content":"初歩的な疑問/TIPSなど htmlの書き下しを簡単に行う Emmetというプラグイン？がある。 VSCodeには標準で入っていた。 使い方はググろう。\n ユーザ設定で次のように追記すればよい？\n { \u0026#34;emmet.includeLanguages\u0026#34;: { \u0026#34;vue-html\u0026#34;: \u0026#34;html\u0026#34;, \u0026#34;vue\u0026#34;: \u0026#34;html\u0026#34; } }   https://github.com/Microsoft/vscode/issues/22585 によると emmet.syntaxProfiles で設定するように書かれているが、双方どのような意味の設定なのかわかっていない…\n  JavaScript framework によく出てくるrouterとは？ URLを対応する実装と紐づける処理のこと？ URLが指定された際に、何を表示するかを決定するロジック。\n    Howto 共通メニュー(共通ヘッダ)を作成する 参考:\n   【Vue.js】Vue.jsで共通ヘッダーを作る【header】 - The sky is the limit\n      ","description":"","id":118,"section":"docs","tags":null,"title":"vue.js","uri":"https://yukihane.github.io/docs/frontend/vue/"},{"content":"言語仕様 JavaScriptの「オブジェクト」   JavaScriptのオブジェクトは、カッコ {…​} で表される。\n  JavaScriptのオブジェクトは「プロパティ」の集合 [1]。\n  プロパティは、「データプロパティ」と「アクセサプロパティ」の2種類がある [2]。\n  データプロパティは、よく見かける key : value の形のもの。\n  アクセサプロパティは get , set キーワードを使うgetter/setterのこと？\n  プロパティ属性(Property Attributes) [3]というものがある。\n    プロパティ属性 https://javascript.g.hatena.ne.jp/edvakf/20091117/1258442026\n ES3 互換のオブジェクト定義。\n var obj = { x : 1 };   これが以下と等価となる。\n var obj = Object.create(Object.prototype, { x : { value : 1, writable : true, // x の値が変更できる enumerable : true, // for (var k in obj) で x を辿ることができる configurable : true // 下に説明 }} )    メソッド定義の簡略構文 https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Functions_and_function_scope/Method_definitions\n var obj = { foo() {}, bar() {} };   上のような構文はデータプロパティの形式( キー : バリュー )でないのでアクセサプロパティか？と思うが違う。 単に下のものを簡略した書式であり、データプロパティ。\n var obj = { foo: function() {}, bar: function() {} }; [source,js]      Webブラウザ Windows8.1にはEdgeはインストールできない(IE11まで) MS Edgeをインストールできるのは現時点ではWindows10のみ。\n Windows8.1の延長サポート期限は 2023年1月10日 であり、このOSにインストールできるMS製ブラウザは IE11 だけ。\n   各Windows OSで利用できるIEのバージョンを知る：Tech TIPS - ＠IT\n  ご存じですか? OS にはサポート期限があります! - Microsoft atLife\n      HTML HTMLは他のHTMLをインクルードできない (Webページの設計を行いたかったのでHTML解説書籍を見て回ったが参考になる記述が全く見つからなかった。 なぜならばHTMLにそのような機能がなかったからだ、という話。)\n 例えば複数のページ(htmlファイル)に共通ヘッダ(、共通フッタ、共通メニュー、等)を表示させたい場合、 普通に考えればヘッダ部を別ファイルに書き、各ページではそのファイルをインクルードすれば良いが、そのような仕組みはHTML自体は持っていないと考えてよい(iframeを使えば実現可能だが、今回提示したような用途には向いていないようだ。あくまで「元々分離されたもの」を埋め込むのに使うべき？例えばSNSシェアボタンなど)。\n そのようにしたい場合、現在ではおおむね2種類の方法のどちらかで解決している。\n   サーバサイドインクルード(SSI; Server-Side Include)\n  WebサーバがあらかじめHTMLを結合した上でクライアントへ送信する。つまりWebサーバの機能。\n  Webフレームワークが提供しているテンプレートエンジンの機能もサーバサイドという意味ではこちらか。\n     JavaScriptでリクエストを投げ、その結果を結合する。\n   ただし、将来的には上記の話は正しくない。 HTML Imports という仕様が実装されればHTML自体がインクルード機能を持つようになるらしい(…という話だったが、実装は取りやめになる方向？)。 現状はChromeのみ実装の模様(参考)。\n   HTML Imports: ウェブのための #include - HTML5 Rocks\n    WebComponents界隈の用語について WebComponents HTML仕様の一部。(※おそらくこれは正しい表現ではない)\n ブラウザ上で動作するUI(GUI)について、コンポーネント化できるようにする仕様の集合体。 HTML importsもWebComponentsの一部。\n  webcomponents.js WebComponentsを様々なブラウザ(これらはそれぞれ実装が異なる)で動作するようにするライブラリの名前。 単なる1ライブラリの名前に仕様名を冠するのはどうなの…？まぎらわしい。 ただ提供ドメイン(webcomponents.org)から想像するに、実質上のWebComponents標準ライブラリなのだろう。\n ちなみにこういったブラウザ間の差異を吸収してどのブラウザでも同じような機能をできるようにする実装のことをJS界隈ではpolyfillと呼ぶ。\n  polymer 歴史的な前後関係を置いておくと、一言で言えば webcomponents.js のラッパー＋便利機能が付いたライブラリ。\n Googleの方が書かれた解説がわかりやすい(ただし古いので無くなったものもあるようだ)。 文中のplatform.jsが現在のwebcomponents.js。\n Polymer と Web Components - steps to phantasien\n     JavaScript \u0026lt;プロダクト名\u0026gt;.js(例えばVue.jsとか) の .js の意味 単にJavaScript向けプロダクトという意味の符牒。別に1ファイルから成るとかいう意味ではない。\n Java向けプロダクトである Log4J や Twitter4J の \u0026#39;\u0026#39;\u0026#39;4J\u0026#39;\u0026#39;\u0026#39; と同じ意味合い。\n    WebComponents / Polymer Polymer Elements の名前 旧来 core-xxx と呼んでいたものはv1かv2で iron-xxx という名前に変わった。\n  Polymer2.0はtype-extensionをサポートしない   https://www.polymer-project.org/2.0/docs/about_20#type-extension\n   https://www.youtube.com/watch?v=qzh56Ja1eaw\u0026amp;t=3h46m35s で説明していた頃(v0.x)には存在していたようだが、現在はない。 ここで説明している\n \u0026lt;input type=\u0026#34;text\u0026#34; is=\u0026#34;core-input\u0026#34; value=\u0026#34;{{text}}\u0026#34;\u0026gt;   は、\n \u0026lt;iron-input\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;{{text}}\u0026#34;\u0026gt; \u0026lt;/iron-input\u0026gt;   と書くようだ [4]。\n    Bower   https://bower.io/blog/\n   Bower自身がコミュニティからもはやdeprecatedとみなされている。 新規プロジェクトで仕様すべきでは無さそう。\n bower install bower install PolymerElements/iron-list   としたときの引数 PolymerElements/iron-list はgithub.comのリポジトリ名の模様。 例えばこの例の場合だと https://github.com/PolymerElements/iron-list 。\n     1. https://www.ecma-international.org/ecma-262/6.0/#sec-object-type  2. http://numb86-tech.hatenablog.com/entry/2016/06/04/152912  3. https://www.ecma-international.org/ecma-262/6.0/#sec-property-attributes  4. https://www.webcomponents.org/element/PolymerElements/iron-input   ","description":"","id":119,"section":"docs","tags":null,"title":"フロントエンド基礎知識","uri":"https://yukihane.github.io/docs/frontend/js-fundamentals/"},{"content":"〜がしたい Basic認証 -u オプション。\n curl -u user:password http://example.com    HTTPステータスコード表示 -i オプションで出力にHTTPヘッダ情報を含められる。\n curl -i http://example.com      ","description":"","id":120,"section":"docs","tags":null,"title":"curl","uri":"https://yukihane.github.io/docs/apps/curl/"},{"content":"1文字目にJavaとは異なり大文字を使う場所 実は書く際にはIDEが補完してくれるのでさほど違和感は無く始められました。\n 問題はコード・リーディング時。予想以上に「戦闘大文字だからクラス名か…(実際はメソッド名)」などと判断してしまっていることに気づかされます。\n   メソッド名\n  publicフィールド\n  public以外のフィールドは小文字\n  メソッド/フィールドとも、publicの先頭は大文字、privateの先頭は小文字？(それ以外は？)\n     namespace\n  Javaで言うところのpackage\n     定数\n  Javaは全部大文字。 CONST_VALUE 的な。この書き方はC#ではマクロ使用時にのみ用いる。\n      外部リンク: JavaとC#の命名規約まとめ （JavaプログラマーがC#でプログラムを書いて引っかかったところ　その３） - 地平線に行く\n   ","description":"","id":121,"section":"docs","tags":null,"title":"JavaプログラマのためのC#","uri":"https://yukihane.github.io/docs/csharp/"},{"content":"TypeScript ReturnType Redux reducer の 戻り値型として初出。\n 関数型を簡単に？定義するための構文だろうか。\n   公式サイトリンク\n      JavaScript 角カッコ [] の戻り値   分割代入\n   関数の戻り値が配列で、それを分割代入する書式。 配列の分割代入。\n 波カッコ {} は オブジェクトの分割代入。\n    ","description":"","id":122,"section":"docs","tags":null,"title":"JS覚え書き","uri":"https://yukihane.github.io/docs/frontend/js-memo/"},{"content":"プラグインインストール   Lombok\n  MapStruct\n     annotation processor 有効化   https://www.jetbrains.com/help/idea/annotation-processors-support.html\n     ","description":"","id":123,"section":"docs","tags":null,"title":"IntellJ IDEA","uri":"https://yukihane.github.io/docs/intellij-idea/"},{"content":"はじめに Spring Boot で Spring Security OAuth 2.0 Login / Client を利用する手順をまとめます。\n また、認可サーバ(IdP)にはローカルで立てたKeycloakを用いますのでそちらのセットアップ手順も記載します。\n 補足事項: Keycloakは クライアントライブラリも提供しており(Spring系のもので言うと、Spring Securityを利用しないもの、Spring Securityを利用するもの、の2種があるようです。詳細は 実装サンプルにあります)、Keycloakを利用するのであればそちらを使うのが良さそうです。 ただし、今回は、最終的にKeycloakをIdPとして使うわけではなく、仮に利用しているだけなので、それらは用いず、Spring Securityの汎用機能 Spring Security OAuth 2.0 Client を利用します。\n   Keycloakセットアップ 参考: Getting Started \u0026gt; Keycloak on OpenJDK\n ダウンロードと展開 https://www.keycloak.org/downloads からスタンドアロンサーバをダウンロードして展開します(これはWildFlyベースのサーバのようです)。本エントリ記載時点では https://downloads.jboss.org/keycloak/10.0.2/keycloak-10.0.2.tar.gz です。\n  Keycloak起動 続いて、Keycloakを起動します(この起動方法がまさにWildFlyですね)。\n ./bin/standalone.sh -Djboss.socket.binding.port-offset=1    admin ユーザ作成 adminユーザ未作成状態で http://localhost:8081/auth/ へアクセスすると、adminユーザのユーザ名とパスワード入力を促されます。\n ここではユーザ名、パスワードとも admin とすることにします。\n     Username\n admin\n   Password\n admin\n    Create ボタンを押すと上記で入力したadminユーザが作成されます。\n Administration Console リンクを押して次の画面に進みます。\n  realm作成 Administration Console を開くと、左上に \u0026#34;Master\u0026#34; というプルダウンメニューのようなものがあると思います。\n ここにマウスカーソルを合わせると \u0026#34;Add realm\u0026#34; というボタンが表れるのでそれを押します。そうすると http://localhost:8081/auth/admin/master/console/#/create/realm へ遷移します。\n Nameに myrealm と入力ｋし、 Create ボタンを押します。\n     Name\n myrealm\n    作成が完了すると Administration Console 画面に戻ります。 このとき、左上のrealm名画先ほど作成した \u0026#34;Myrealm\u0026#34; になっていると思います。\n 続いてこの画面からユーザを作成します。\n  ユーザ作成 画面左のメニュー Users を選択し、 \u0026#34;Add user\u0026#34; ボタンを押します。\n Usernameに myuser を、それ以外の項目も適当に埋め \u0026#34;Save\u0026#34; ボタンを押します。\n     Username\n myuser\n   Email\n myuser@example.com\n   First Name\n my-firstname\n   Last Name\n my-lastname\n    ユーザ作成が完了したら、続いてパスワード設定を行います。 画面上部の \u0026#34;Credentials\u0026#34; タブをクリックして開き、パスワードを設定します。ここではユーザ名と同じ myuser としました。 また、\u0026#34;Temporary\u0026#34;を OFF にしておきます(ONだと初回ログイン時パスワード変更を求められます)。\n     Password\n myuser\n   Password Confirmation\n myuser\n   Temporary\n OFF\n    そして、 \u0026#34;Set Password\u0026#34; ボタンを押しパスワード設定完了です。\n  クライアント登録 ここでいう \u0026#34;クライアント\u0026#34; というのはOAuth2.0でいうところの認可クライアント、OIDCでいうところのRPです。\n 画面左のメニュー Clients をクリックします。\n 続いて画面右の Createボタンを押します。\n この画面で次のように入力して、 \u0026#34;Save\u0026#34; ボタンを押します。\n     Client ID\n myclient\n   Client Protocol\n openid-connect (デフォルトのまま)\n   Root URL\n (空のままでOK)\n    クライアント作成が完了したら続いてこのクライアント設定画面で 次の通り設定変更し \u0026#34;Save\u0026#34; ボタンを押します。\n ( myspring というのは、後でSpring Bootに設定する registration-id です。詳細は Spring Security リファレンスを \u0026#34;/login/oauth2/code\u0026#34; で検索してみてください)\n     Access Type\n confidential\n   Valid Redirect URL\n http://localhost:8080/login/oauth2/code/myspring\n    上記の通り Access Type を confidential に設定すると、この画面上部に \u0026#34;Credentials\u0026#34; タブが表示されます。 このタブで client-secret を確認できます。\n これで認可サーバであるKeycloak側の設定は終了です。\n 続いて、この認可サーバを利用するクライアントをSpring Bootで作っていきます。\n    クライアント(Spring Boot)設定 コードはこちらになります。\n   https://github.com/yukihane/hello-java/tree/master/spring/oidc-example\n   はじめに、で記載した通り、 Spring Securityの機能を利用します。\n Spring Boot では、 https://start.spring.io/ で \u0026#34;OAuth 2.0 Client\u0026#34; を選ぶことで追加される spring-boot-starter-oauth2-client を用いることになります。\n 余談ですが(\u0026amp;結構何回も書いてきていますが)、 spring-security-auth2 と、今回利用する spring-security-oauth2-client は名前が似ているだけで別系統のライブラリです(そして前者はdeprecatedです)。\n spring-boot-starter-oauth2-client 依存関係追加 Spring Boot で auto-configuration を効かせてOAuth 2.0 Login/Clientを利用するには spring-boot-starter-oauth2-client を用います。\n pom.xml  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-oauth2-client\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt;    security config 設定 Spring Security OAuth 2.0 Client の auto-configuration で記載した通り、 OAuth2WebSecurityConfiguration で次のような自動設定が為されていますので、 特に何も行う必要はありません 。\n (参考)OAuth2WebSecurityConfiguration.java class OAuth2WebSecurityConfiguration { @Bean @ConditionalOnMissingBean OAuth2AuthorizedClientService authorizedClientService(ClientRegistrationRepository clientRegistrationRepository) { return new InMemoryOAuth2AuthorizedClientService(clientRegistrationRepository); } @Bean @ConditionalOnMissingBean OAuth2AuthorizedClientRepository authorizedClientRepository(OAuth2AuthorizedClientService authorizedClientService) { return new AuthenticatedPrincipalOAuth2AuthorizedClientRepository(authorizedClientService); } @Configuration(proxyBeanMethods = false) @ConditionalOnMissingBean(WebSecurityConfigurerAdapter.class) static class OAuth2WebSecurityConfigurerAdapter extends WebSecurityConfigurerAdapter { @Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests((requests) -\u0026gt; requests.anyRequest().authenticated()); http.oauth2Login(Customizer.withDefaults()); http.oauth2Client(); } } }    プロパティ application.yml spring: security: oauth2: client: provider: mykeycloak: # https://www.keycloak.org/docs/latest/securing_apps/index.html#endpoints-2 # http://localhost:8081/auth/realms/myrealm/.well-known/openid-configuration issuer-uri: http://localhost:8081/auth/realms/myrealm # https://www.keycloak.org/docs/11.0/securing_apps/index.html user-name-attribute: preferred_username registration: myspring: authorization-grant-type: authorization_code # 上で定義しているprovider名 provider: mykeycloak # keycloakに登録したidと対応するsecret # http://localhost:8081/auth/admin/master/console/#/realms/myrealm/clients client-id: myclient client-secret: e3b8886b-5b6e-49a7-91c2-c28caadf0a2b     client-secret は、実際にはKeycloakの設定画面で表示されているもので差し替える必要があります。\n  いくつかのサンプルと見ているとエンドポイント(authorization-uri など)をそれぞれ設定していましたが、 issuer-uri だけ設定すれば後はそこから自動設定できるようです。\n  user-name-attribute は、リファレンスの \u0026#34;principal-attibute\u0026#34; からそれっぽいものを選びました。\n    コントローラを作成してアクセスしてみる 適当にコントローラを作成して http://localhost:8080/ へアクセスしてみます。\n Keycloakのログイン画面へリダイレクトされるので、事前に作成したユーザのid, password(myuser, myuser)を入力すれば、コントローラが結果を返してくれます。\n    ","description":"","id":124,"section":"blog","tags":["spring-boot","spring-security","oauth","oidc"],"title":"KeycloakをIdPにしてSpring Security OAuth 2.0 Login/Client を試してみる","uri":"https://yukihane.github.io/blog/202007/21/hello-oidc-with-keycloak/"},{"content":"現在、新しいプロジェクトに参画してGitのブランチ戦略を考えています。\n 何回かブランチ戦略を考え、そして運用してきたのですが、思うところを書いてみます。\n まず、ブランチ戦略検討時、しばしば思うのが、\n   経験に差があるため、何が問題(となりやすい)なのかが共有できない\n   ということです。 Gitのブランチングは、比較的共通言語化(successful git branching model(git flow) だとか、 github flowだとか)しているにも関わらず、実際にこれらに従って開発したことがある人の割合が想像以上に低いです。\n   git flowは難しいだとか変な予備知識を仕入れてしまって、ブランチ戦略を考える人が余計なオリジナリティを出してしまう現場が多い\n  そももそもまともにブランチ戦略を考えないまま運用している\n   みたいなことなんだろうな…と考えます。\n 私が いつも Gitブランチを運用していて難しいと感じることは、git flowが複雑だとかそんな些細な問題ではなく、\n   長寿命になってしまうブランチの取り扱い\n   です。また、付随して、\n   git flowの図で言うところの develop ブランチを複数本用意しなければ行けない状況\n   が発生することです。\n 寿命が長くなるということは即ち本流にマージできるタイミングを調整しなければいけない事情が発生している、ということです。\n (そしてそういう事情が発生しないプロジェクトは今まで経験したことがないです。 (もしこんな問題がないのなら、それこそgithub flowで十分だと思います。))\n マージできるタイミングを伺う必要が出てくると、\n   いざマージしようとしたときにconflictが発生した\n  マージしようとしているfeatureブランチを切ったタイミングより前のタイミングに対してのdevelopブランチに対してマージする必要が出た\n  (当初想定していたバージョンより前のバージョンでリリースすることになった、というような場合に発生する)\n      みたいな問題が発生し、この解決に時間を取られてしまいます/作業時にミスが混入してしまいます。\n ブランチ戦略を考える上で解決すべき事項はこれらである、というのが全然理解されないなあ、というのが今日の困りごとでした。\n まとめると、ブランチ戦略を策定する上で重要なことは、\n   ブランチ戦略にオリジナリティを出そうとするな\n  オリジナリティを出して良いのは既に全員がメジャーなブランチ戦略について理解している場合に限る\n     git flow の develop ブランチが複数できる問題について考えろ\n  もちろん可能なら1本で運用できるのが望ましいのだが\n      です。\n ","description":"","id":125,"section":"blog","tags":["git"],"title":"いつもGitブランチ運用でこまること、考慮すべきポイントのまとめ","uri":"https://yukihane.github.io/blog/202007/21/why-git-branching-is-difficult/"},{"content":"  OAuth2ClientAutoConfiguration\n   上記のクラスが Import しているもの(など):\n   OAuth2ClientRegistrationRepositoryConfiguration\n  ClientRegistrationRepository bean 定義。\n  OAuth2ClientProperties(spring.security.oauth2.client)プロパティから定義を取得して生成するインメモリレジストリを生成。\n        OAuth2WebSecurityConfiguration\n  OAuth2AuthorizedClientService bean 定義。\n  OAuth2AuthorizedClientRepository bean 定義。\n  WebSecurityConfigurerAdapter デフォルト実装。\n  全てのリクエストに authenticated を要求する。 oauth2Login, oauth2Client 有効化。\n         リファレンスリンク:\n   ClientRegistrationRepository\n  OAuth2AuthorizedClientRepository / OAuth2AuthorizedClientService\n  全般として: 12.2. OAuth 2.0 Client\n   ","description":"","id":126,"section":"blog","tags":["spring-boot","spring-security","oauth2"],"title":"Spring Security OAuth 2.0 Client の auto-configuration","uri":"https://yukihane.github.io/blog/202007/20/spring-security-oauth-2.0-client/"},{"content":"RestTemplateBuilder の Bean がsingleton-socpeかつちょっと変態的なインスタンス生成を行っていたので驚いた、というエントリを昔書きました:\n   RestTemplateBuilderに関する覚書\n   ところで、現時点で RestTemplate は既に maintenance mode なので、新規実装に用いるのは忍びないなあ、と思い、 WebClient を利用する前提で薦めることにしました。\n   利用するには spring-boot-starter-webflux を依存関係に追加する。(4.16.1. WebClient Runtime)\n  なお、Spring MVC と Spring WebFlux が同居する場合、デフォルトで Spring MVC が有効化されるhttps://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/reference/htmlsingle/#boot-features-web-environment[4.1.8. Web Environment])。\n     RestTemplateBuildr と異なり WebClient.Builder クラスは Spring Boot所属のクラスではない\n  WebClientAutoConfiguration によってインジェクトされる Builder は prototype-scope。\n   RestTemplateBuilder は singlton-scopeで何か設定を与える度にインスタンスを生成し直して…みたいな歪な感じになっていたのに対し、こちらは素直なものになっているようです。\n ","description":"","id":127,"section":"blog","tags":["spring-boot"],"title":"`WebClient` の 覚書","uri":"https://yukihane.github.io/blog/202007/20/webclientbuilder/"},{"content":"次のQiitaのコメントを見て、そうなんだ、となりました:\n   Auth TokenをlocalStorageに入れようが、cookieに入れようがどっちもXSS危険性には無防備（同ドメイン内なら …​）\n   根拠を探してみたところ、同じくQiitaの記事\n   君はできるかな？Cookie ＆ Same Origin Policyセキュリティークイズ4問\n   の出典として RFC6265 HTTP State Management Mechanismが挙げられており、そちらのドキュメントの冒頭にバッチリ書いてありました:\n  (前略)Similarly, cookies for a given host are shared across all the ports on that host, even though the usual \u0026#34;same-origin policy\u0026#34; used by web browsers isolates content retrieved via different ports.\n  — 1. Introduction    Cookies do not provide isolation by port. If a cookie is readable by a service running on one port, the cookie is also readable by a service running on another port of the same server. If a cookie is writable by a service on one port, the cookie is also writable by a service running on another port of the same server. For this reason, servers SHOULD NOT both run mutually distrusting services on different ports of the same host and use cookies to store security- sensitive information.\n  — 8.5. Weak Confidentiality   ちなみに後続の文章ではスキーマ(http とか)が違っても送信されるよ、と書いてありまして、そういやその問題を抑制する方策のひとつとして secure があるのだな、と。\n 逆に言えば、 secure 属性みたいなのが必要ってことはcookiesはsame-origin-policyに従っているわけではないのだな、という推測が可能ですね。\n ","description":"","id":128,"section":"blog","tags":null,"title":"クッキーの挙動は Same Origin Policy に従う…わけではない","uri":"https://yukihane.github.io/blog/202007/19/cookies-and-same-origin-policy/"},{"content":"私は普段全く git pull は使わず、 git fetch で賄ってきたのですが、今日たまたま git pull を行ったところ、いつの頃からか次のようなメッセージが出るようになっていることに気づきました:\n  warning: Pulling without specifying how to reconcile divergent branches is discouraged. You can squelch this message by running one of the following commands sometime before your next pull:\n git config pull.rebase false # merge (the default strategy) git config pull.rebase true # rebase git config pull.ff only # fast-forward only   You can replace \u0026#34;git config\u0026#34; with \u0026#34;git config --global\u0026#34; to set a default preference for all repositories. You can also pass --rebase, --no-rebase, or --ff-only on the command line to override the configured default per invocation.\n   この中で推奨されている設定のうち、私のお薦めは\n git config --global pull.ff only   です。\n これは、 git pull を行ったとき fast-forward でマージできる状況でなければマージを行わず、 fetch だけに留める、というオプションです。ローカルブランチは何も変更されません。\n fast-forwardされなかった旨のメッセージが出るので、fetchしたリモートリポジトリをどう取り込むかは改めて考えることができます。\n デフォルトだと merge なのか fast-forward なのか実行時に判明するので、 fast-forward されると思ってたのに merge になってしまって… というような事態が発生するので git pull は面倒、という意識が出来上がってしまい、冒頭の通り pull は使わなくなっていました。\n ","description":"","id":129,"section":"blog","tags":["git"],"title":"`git config pull.ff only` を設定しておこう","uri":"https://yukihane.github.io/blog/202007/19/use-git-pull-ff-only/"},{"content":" 世の中に認可サーバー製品がたくさんあるので、Spring Securityではサポートしないことを決定しました\n  — Spring Security OAuth2はあと数年でサポート終了、その代替策 - Qiita   と書かれた記事がありますが、その後この計画は見直されています。\n   Announcing the Spring Authorization Server - Spring Blog\n   上記リンク先にある通り、experimentalとしてですが認可サーバのコードがリポジトリに上がっており、開発が進んでいます。\n   https://github.com/spring-projects-experimental/spring-authorization-server\n   ただ、現在時点では認可サーバをSpringを利用して構築できなくなった、というのはそのとおりで、何か別の代替策を講じる必要はあります。\n ","description":"","id":130,"section":"blog","tags":["spring-security","oauth"],"title":"Spring Security から認可サーバサポートが無くなる、というのは取り敢えず見直されています","uri":"https://yukihane.github.io/blog/202007/19/spring-security-authentication-server/"},{"content":"Kindle Unlimited でいくつかのSpring Framework/Spring Boot 本が読めることに気づきました。\n もし入門本として有用なものがあれば初心者の方に薦めていきたいなと考え、今回それらを呼んでみましたので感想を記録します。\n Spring Boot 2 入門: 基礎から実演まで Kindle版 / 原田 けいと, 竹田 甘地, Robert Segawa 購入する場合の価格は780円。\n   ○ 独自解釈(と捉えられそうな)の書き方は排除しようという意志が感じられる。ちゃんとオフィシャルの説明を根拠にして書こうとしている。\n  ☓ Hello, worldプログラムで`PostMapping`を使っている(そして正しくない使い方をしている)。 オフィシャル だとここは GetMapping 。\n  3.3.3節で GetMapping が登場するが、 RequestMapping との関係について特に言及がなく、唐突に感じる。( RequestMapping を使う必要が無かったのでは )\n  3.4.4節 で RequestMapping についてちゃんと説明しているので著者が分かっていないわけではなく、書き方(や説明順)の問題。\n     - MVCウェブフレームワークについての知識がゼロの人だと、唐突に説明なしで用語が登場して戸惑うかもしれない(例えば、人によっては「テンプレートエンジンって何？」「コントローラって何？」となるかもしれない)。ただそのレベルから本書で説明しろ、というのも酷だと思うので個人的には妥当だと思う。\n  - がっつりEclipse(STS)を前提としている。が、敢えてIntelliJとかVSCodeとか使ってる人なら読み替えるのは容易なはずだよね :) 個人的にもSTS前提とするのは妥当だと思う。\n  ☓ Springマジックをちゃんと説明するのは難しいので「こう書けばこうなります」的な説明になってしまうのは仕方がないのかな、と思う(例: コントローラのハンドラメソッドで return \u0026#34;index\u0026#34;; とすれば templates/index.html が呼ばれます)。ただ、なんでそうなるのか調べたい人に対して、オフィシャルへの導線があると良かった。\n  ○ オフィシャルリファレンスへのリンクが正しい。ちゃんと特定バージョン(今回の場合 2.3.0.RELEASE )へのリンクになっている。\n  ○ 最初からDevToolsについて言及している。この本がトップバッターなのでなんとも言えないんだけど、多分他の本はDevToolsには触れられていないんじゃないかな…？\n  ☓ 最初からThymeleafを使っているが、Thymeleafに対する説明が少し足りない感じを受ける。オフィシャルリファレンス( 3.0, Springインテグレーション)へのリンクくらいは有っても良いのでは。\n  ☓ 細かいですが、3.3.4節の記述「 @RequestParam(\u0026#34;message\u0026#34;) は、正式には name=\u0026#34;message\u0026#34; を省略したものです。」は不正確。正しくは(これはJavaの仕様) 「 value=\u0026#34;message\u0026#34; を省略したもの」。(ただしここでは name も value も同じ役割なので結果は同じ。)\n  ○ 表紙で「2.3対応」と謳っているだけでなく、ちゃんと内容も2.3での変更点が反映されている。具体的には 4.2.3節で validation が別扱いになったこと、5.3節で h2databese データベース自動命名のランダム化、について触れられている。\n  ○ これは個人的に参考になった点なのですが、Webjars を使ったことがないので役割や使い方を知れたのはすごく為になりました！\n  ☓ 4.3.3節 6.メッセージコンフィグの作成 で @Configuration, @Bean アノテーションが登場しますが、初学者にとって理解難易度が高いと思うので、もう少し説明が欲しい。書かれている説明だけだと絶対理解できない。せめてオフィシャルリファレンスへのリンクとか。\n  ○ Spring Data JPAをちゃんと評価している。日本の記事だと、某氏の影響からか、使いもせずにJPAディス(\u0026amp; MyBatisアゲ)のものが多い…\n  ただ、Spring Data JDBC を誤解しているような気がします。JPAほど複雑さを持ち込まずSpring Data JPAっぽい自動クエリ生成ができるライブラリ、みたいな立ち位置ですよねこれ。(Spring Data JDBC の \u0026#34;JDBC\u0026#34; は \u0026#34;非JPA\u0026#34; みたいなニュアンスの命名。歴史的にも Spring Data JDBC の方が新しい、はず。)\n     ☓ 本書で解説し切ることはできないのは当然なので、JPAもしくはHibernateリファレンスへのリンクが欲しい。\n  ○ コンストラクタインジェクションを前提としている。また、個人的に @RequiredArgsConstructor について触れられているのもポイント高し。\n  - 個人的には UserDetailsService 否定派( 参考)なので 8.3.3節でそれを使っているのは残念…ですが、まあ、オフィシャルの説明に沿うなら妥当な判断ですよね…\n  ☓ 8.3.3節 @Service の説明は @Component との違いについて、ステレオタイプという概念を交えて説明して欲しかった。\n  ☓ テスティングについての言及がない\n     ","description":"","id":131,"section":"blog","tags":["book","spring-boot"],"title":"Spring Bootブックレビュー Spring Boot 2 入門: 基礎から実演まで","uri":"https://yukihane.github.io/blog/202007/15/spring-boot-books-review/"},{"content":"Qiita に昔(2019年中頃)書いていた資料を転記し忘れていたので構成を見直してアップロードし直します。\n 2020年現在の状況はまた更新されています。次のURLを参照してください。\n   https://spring.io/blog/2019/11/14/spring-security-oauth-2-0-roadmap-update\n  認可サーバのサポートが無くなることが決定した(が、後にこの決定を見直すことも示唆されており、不透明)\n  spring-security-oauth2 の EOL が発表された(2021/5 頃)\n      背景と概要 Spring Boot最新版(2.1.6.RELEASE)でOAuth 2.0 対応のリソースサーバ兼認可サーバを実装する必要に迫られましたが、Spring的にOAuth 2.0 対応が過渡期なようでドキュメントを探したりするのに手間取りました。\n 本エントリは、ドキュメントの所在のメモと、自分の理解度の確認として冒頭に紹介した @kazuki43zoo さんのコードを Spring Boot 2.1.6.RELEASE へマイグレーションしてみたのでそれについてもメモするためのものです。\n   元ネタ\n  Spring Security OAuthで認可コードグラントフローを体感しよう -第２回：とりあえずアプリを作る編 - Qiita\n  https://github.com/kazuki43zoo/spring-security-oauth-demo\n     今回作成したソース\n  https://github.com/yukihane/spring-security-oauth-demo\n  差異の詳細は後述\n        Spring Boot2.1.6における OAuth 2.0 対応 リファレンス 30.3.3 Authorization Server では\n  Currently, Spring Security does not provide support for implementing an OAuth 2.0 Authorization Server. However, this functionality is available from the Spring Security OAuth project, which will eventually be superseded by Spring Security completely.\n  — Spring Boot 2.1.6.RELEASE リファレンス 30.3.3 Authorization Server   と若干引っかかる説明になっています。 これはどういうことかというと、この節のリンクの何クリックか先にあるドキュメント\n   OAuth 2.0 Features Matrix\n   を見ることで事情が理解できます。 (注: 現在は当時から改訂が入っています)\n   OAuth 2.0 は \u0026#34;Spring Security\u0026#34; で実現する方針で、Spring Boot 1.x の頃に利用していた \u0026#34;Spring Security OAuth\u0026#34;(spring-security-oauth*)はもはやメンテナンスモードである\n  とはいえ、Spring Securityにはまだ認可サーバサポートがない\n  (予定では \u0026#34;the end of 2018 or early 2019\u0026#34; に対応、だったようだが)\n      というわけで、現時点で認可サーバ実装を行おうとした場合には spring-security-oauth2 を利用することになります。\n リソースサーバやクライアントはSpring Securityのものが利用できるのかというと、不可能ではないが 何やら面倒そうな気配 がします。 何か問題が起きたときに解決できる気がしなかったので私は今回Spring Security版を採用するのはやめました。\n まとめると、Spring Bootでリソースサーバ兼認可サーバを作る場合、現時点ではSpring Boot 1.x の頃と同じ仕組みを利用するのが無難そう、という結論に至りました。\n   リファレンス   OAuth 2 Developers Guide - spring-security-oauth2\n  https://github.com/spring-projects/spring-security-oauth/tree/master/samples/oauth2\n  (Spring Bootだけでなく)Spring Frameworkのコードが理解できるのならこのサンプルコードは役に立ちそうな気がします。私は理解できません。\n  正常動作させるために プルリク#1674 をマージする必要がありました。\n        OAuth2 Autoconfig - spring-security-oauth2-boot の 2.1.6版\n  OAuth2 Boot - spring-security-oauth2-boot の current-SNAPSHOT版\n  Spring Boot and OAuth2 - 公式チュートリアル\n  https://github.com/spring-guides/tut-spring-boot-oauth2\n  ソーシャルログインしたいわけではないので自分にはあまり見どころが無かった\n      spring-security-oauth2-boot の 2.1.6版だけでなくcurrent-SNAPSHOT版も見ないと情報が出揃わない、というのが罠でした。\n   今回作成したコードについて   https://github.com/yukihane/spring-security-oauth-demo\n   冒頭で紹介した @kazuki43zoo さんのソースのforkです。 非互換性といくつか本質的でない変更を行っているのでそれについて記載しておきます。\n   クライアントにブラウザでアクセスした際の認証は OAuth 2.0 とは無関係かと考えたのでスキップするようにしています。 98db0dd\n  (追記)ワンショットのリクエストならそれで問題ないのですが、 refresh_token のフローを見てみたい場合などはクライアントがセッションを持っている必要がありました(ので後にもとに戻しています)。\n     grant_type: passwordが通りませんので「アクセストークンの取得」の動作確認ができません。\n  このへん やってないからかな、と思うのですがあまり興味がなかったのでちゃんとは見ていません。\n     元々 application.properties で設定されていたものがJava Configに移っています。リファレンスを真似たためです。 87ab08\n  Spring Data JDBCで実行時エラーになるのですが直し方がわからなかったので Spring Data JPA に移し替えました。 3faf6e\n  Javaバージョンを11に上げています。 c70a534\n     ","description":"","id":132,"section":"blog","tags":["spring-security","oauth","spring-boot"],"title":"Spring SecurityのOAuth2.0関連の歴史を調査し実装してみた","uri":"https://yukihane.github.io/blog/202007/15/history-of-spring-oauth2-libraries/"},{"content":"元々JBoss/WildFlyの流れで開発してきたのでずっとMavenを利用してきたのですが、今度のプロジェクトではGradleを使うことに決まったようで、新しい知識が必要となりました。\n 特にMavenで利用していたプラグインと同等のものがあるかどうかを調べる必要を感じたので調査しました。\n 結論としては、これまで利用してきた静的解析系のプラグインは同じようなものがあり、問題なさそう、という感触です。\n ただし、buildshipという、Eclipseに組み込まれている Gradle → Eclipse プロジェクト変換ツール(Mavenでいうところのm2eみたいなもの)の機能が不十分で、Gradle + Eclipse という組み合わせでは使わない方が良さそうです。 (Gradleを使いたいのならIntelliJなどを利用し、Eclipseが使いたいのならMavenを利用する)\n プラグイン formatter Mavenでは formatter-maven-plugin を利用していました。\n これは、Eclipseに組み込まれているフォーマッタをMavenプラグインとして利用できるようにしたもので、設定ファイルもEclipseのものを読み込め、IDEと設定を共通化できるのが強みです。 (IDEと外部フォーマッタの挙動が少しでも違っているとかなりストレスを感じますよね)\n GradleでEclipseのフォーマッタ設定を流用できそうなものとしては spotless というものがあるようです。\n  checkstyle Gradleオフィシャルプラグンとして存在している？\n   https://docs.gradle.org/current/userguide/plugin_reference.html#code_analysis\n  https://docs.gradle.org/current/userguide/checkstyle_plugin.html\n    pmd 同じくオフィシャル。\n   https://docs.gradle.org/current/userguide/pmd_plugin.html\n    spotbugs spotbugsコミュニティが提供しているみたいです。\n https://github.com/spotbugs/spotbugs-gradle-plugin\n  その他プラグイン 今まで利用したことがないが、今回の調査中に見つけた、有用そうなプラグイン。\n Error Prone Google製Spotbugs(?)。 Gradleプラグインは第三者が開発しているものを利用するようです。\n https://github.com/tbroyer/gradle-errorprone-plugin\n     アノテーションプロセッシング 気になっているのは処理する順番を明示的に設定できるのかどうかという点。 MavenでMapStructとLombokを併用する場合も問題になったが、Gradleではどうなのか。\n 結論としては、 ここ にあるような書き方で行けそうなんじゃないかな、と。\n dependencies { annotationProcessor \u0026#34;org.mapstruct:mapstruct-processor:${mapstructVersion}\u0026#34;, \u0026#34;org.projectlombok:lombok:${lombokVersion}\u0026#34; }   やってみたところ、コマンドラインからは上手く行っているように見えます。\n ただし、Eclipseで操作するとMapStructアノテーションプロセッシングが動作しません。おそらく以下のissueが関連しています。\n   Annotation Processor configuration from Gradle Eclipse Plugin #329 - eclipse/buildship\n   また、ビルド結果が build ディレクトリでなく bin ディレクトリに出力されたりと、統合具合が Maven(m2e)と比較して低い感じを受けました。\n lombok https://projectlombok.org/setup/gradle\n  MapStruct https://mapstruct.org/documentation/installation/#gradle\n    ","description":"","id":133,"section":"blog","tags":["java","gradle"],"title":"Gradleプラグイン/アノテーションプロセッシング調査","uri":"https://yukihane.github.io/blog/202007/15/research-gradle-plugins/"},{"content":"moment().isValid()での24時00分00秒の挙動について - スタック・オーバーフロー より。\n ISO 8601 の以前のspecでは、 0:00 も 24:00 も両方妥当な表記だったらしいです。 実際、\u0026#34;ISO8601 24:00\u0026#34; みたいなキーワードで検索するとそのように説明しているサイトも複数ヒットします。\n しかし、 Wikipedia の現在の記述によると、\n  Midnight is a special case and may be referred to as either \u0026#34;00:00\u0026#34; or \u0026#34;24:00\u0026#34;, except in ISO 8601-1:2019 where \u0026#34;24:00\u0026#34; is no longer permitted.\n  — ISO 8601 - Wikipedia   ということで、現在は 24:00 は駄目、ということだそうです。 ISO 8601-1:2019 という付番からして2019年に改訂されたのでしょうか。\n ","description":"","id":134,"section":"blog","tags":["programming","datetime"],"title":"ISO 8601では 24:00 は妥当だったが改訂によりNGになった","uri":"https://yukihane.github.io/blog/202007/14/iso-8601-2400-is-invalid/"},{"content":"…なんてことができたんですね。こんなコード:\n @RestController @Repository public interface VehicleInterface extends JpaRepository\u0026lt;vehicle, Long\u0026gt; { @Query(\u0026#34;select u from vehicle u where u.year = :year\u0026#34;) @RequestMapping(value = \u0026#34;/vehicles\u0026#34;, method = RequestMethod.GET) List\u0026lt;vehicle\u0026gt; findByYearEquals(@Param(\u0026#34;year\u0026#34;) Integer year); }   http://localhost:8080/vehicles?year=2010 的なURLでアクセスします。\n   サンプルコード\n  ネタ元\n   ","description":"","id":135,"section":"blog","tags":["spring-boot"],"title":"Spring Boot で Controller と Repositoryを同じクラスで併用する","uri":"https://yukihane.github.io/blog/202007/11/same-class-controller-and-repository/"},{"content":"https://start.spring.io/ で depencencies に Spring Web を追加して生成します。\n 生成された pom.xml に次の依存関係を追加します:\n pom.xml \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.tomcat.embed\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;tomcat-embed-jasper\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;!-- 必要に応じて --\u0026gt; \u0026lt;groupId\u0026gt;javax.servlet\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jstl\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt;   appliction.properties にﾂｲ着を追加します:\n application.properties spring.mvc.view.prefix=/WEB-INF/view/ spring.mvc.view.suffix=.jsp   src/main/webapp/WEB-INF/view/ の下に JSP ファイルを作成します。\n コントローラではThymeleaf利用時などと同様、 return \u0026#34;index\u0026#34;; とすることで index.jsp を返すようになります。\n 参考:\n   Spring Boot version 1 のころのサンプル pom.xml\n   出典:\n   Can you use jsp for your front end while your backend routes are restful in Spring Boot? - Stack Overflow\n  サンプルコード\n      ","description":"","id":136,"section":"blog","tags":["spring-boot","jsp"],"title":"Spring-BootでJSPを使う","uri":"https://yukihane.github.io/blog/202007/11/jsp-on-springboot/"},{"content":"特に実用性とかは考えていない。何となくやってみたというだけ。\n動かしたいやつ 1 2 3 4 5 6 7 8 9  @RestController @RequestMapping(\u0026#34;/\u0026#34;) public class MyController { @GetMapping(\u0026#34;/\u0026#34;) public String index() { return \u0026#34;hello\u0026#34;; } }   設定 1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-webmvc\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.tomcat.embed\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;tomcat-embed-core\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14  @Configuration @EnableWebMvc public class WebConfig { @Bean ServletWebServerFactory servletWebServerFactory() { return new TomcatServletWebServerFactory(8080); } @Bean DispatcherServlet dispatcherServlet() { return new DispatcherServlet(); } }   1 2 3 4 5 6  @ComponentScan public class MyApplication { public static void main(final String[] args) { SpringApplication.run(MyApplication.class, args); } }   ","description":"","id":137,"section":"blog","tags":["spring-boot","spring-mvc"],"title":"Spring Boot でなるべく依存関係を小さくしてWebMVCを使ってみる","uri":"https://yukihane.github.io/blog/202007/02/minimal-webmvc-with-springboot/"},{"content":"  Spring Expression Language (SpEL) with @Value: dollar vs. hash ($ vs. #)\n   より。\n ${…​} は単なるプロパティのプレースホルダ。\n #{…​} は Spring Expression Language(SpEL) の構文。\n プレースホルダは置き換えるだけだけれども、SpELはもっと複雑なこともできる(Javaのメソッドを呼び出したりとか)。\n ","description":"","id":138,"section":"blog","tags":["spring-boot"],"title":"${...}と#{...}の違い","uri":"https://yukihane.github.io/blog/202007/02/difference-between-doller-and-hash/"},{"content":"正確には jackson-databind 2.11.0 で。\n jackson 2.11 リリースノート Change default textual serialization of java.util.Date/Calendar to include colon in timezone offset #2643  このへん見ると分かるけど、Spring Boot 2.2 系列は jackson-databind 2.10.x が採用されていて、 2.3.0 で 2.11.0 が採用されている。\nコード:\n1 2 3 4  @GetMapping(\u0026#34;/\u0026#34;) public Date date() { return new Date(); }   結果(2.2.8):\n\u0026quot;2020-06-30T13:46:24.265+0000\u0026quot; 結果(2.3.1):\n\u0026quot;2020-06-30T13:47:09.532+00:00\u0026quot; 2.2.x 書式に戻したいならプロパティで:\nspring.jackson.date-format=yyyy-MM-dd'T'HH:mm:ss.SSSZ 書式はSimpleDateFormatのリファレンス参照。\nところで上記リファレンスを見ると 2.2.x で 2.3.x の書式にしようとする場合XXXが利用できそうに思われるが+00:00のときZと表現されてしまって同等にはならない。\njackson-databind 的には StdDateFormat#withColonInTimeZone()で設定して欲しいところだと思うが、Spring Boot から簡単に設定変更するパスはなさそう。\nいかがでしたか？\n","description":"","id":139,"section":"blog","tags":["jackson","spring-boot"],"title":"Spring 2.3.0 で時刻オフセットの書式コロン付き+09:00みたいに変わっとるやん","uri":"https://yukihane.github.io/blog/202006/30/json-datetime-format-changed-on-springboot-2.3/"},{"content":"前はここに書いた通り固定で jdbc:h2:mem:testdb という名前だったのにこれでアクセスできんようになってしもた。\n起動ログに\no.s.b.a.h2.H2ConsoleAutoConfiguration : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:30591993-9fe2-4068-a5e2-05b263e3495b' みたいに出るのでここで確認しよう。\nというか、素直にプロパティで\nspring.datasource.generate-unique-name=false 設定したほうが良いわ自分の場合。\nissue:\n Default spring.datasource.generate-unique-name to true  ","description":"","id":140,"section":"blog","tags":null,"title":"Spring Boot 2.3.0 から H2Database の名前 jdbc:h2:mem:testdb じゃなくなっとるやん(デフォルトでは)","uri":"https://yukihane.github.io/blog/202006/28/h2database-name-random-on-springboot-2.3/"},{"content":"追記: 2020-07-24にリリースされた2.3.2, 2.2.9 でこの問題は修正されました。ただし、2.1.16では未修正のままのようでした。\n Spring Bootは Spring Data Commons を利用して、Thymeleaf(など)からのリクエストからオブジェクトへ変換する際、Sprint Data JPAと連携して、IDからエンティティオブジェクトへマッピングする機能があります(3.2. Property population)。\n こんな機能があるなんて知りませんでした…。というのも、JPA Entityをそのままリクエストやレスポンスに使うことはなくて、いわゆるDTOへ変換したものを常に使っていたからでした。\n この機能、ソースを追いかけてみると ToEntityConverter が担っているようですが、Spring Boot 2.3.1, 2.2.8, 2.1.15(現時点での最新リリースバージョン)ではこのコンバータがコンテキストに登録されないというバグがあり、機能していません。\n 前述の通り、私自身はこの機能について存在自体を知らなかったので影響はないのですが、使っている人にとってはかなり影響が大きいのではないかと思います。\n 暫定対応としては、最新版のひとつ前のバージョン、つまり 2.3.0, 2.2.7, 2.1.5 を利用する、といったところでしょうか。\n 関連リンク:\n   Translation of URI segments and request parameters into aggregates broken (Spring Data Commons バグレポート)\n  HTML form submit not working with Spring Boot 2.3.1\n  Springboot JPAを使用しオブジェクト間の関連を設定。ブログにコメントが投稿できるようにしたい。\n   ","description":"","id":141,"section":"blog","tags":["spring-boot"],"title":"Spring MVCにはJPA EntityのIDからエンティティオブジェクトに変換する機能がある(が、2.3.1では機能しない)","uri":"https://yukihane.github.io/blog/202006/20/spring-boot-thymeleaf-converts-id-to-entity/"},{"content":"私も今回の質問(本文末参照)を見たとき少しの間勘違いしてしまったのですが、OAuth2.0のクライアントがどこで各リソースオーナーのトークンを管理しているかと言うと、アプリケーションコンテキストであって、ユーザのセッションコンテキストなわけが無いですよね…\n   OAuth2AuthorizedClientRepository / OAuth2AuthorizedClientService\n   クライアントからユーザがログアウトすると、たしかにそのセッションとOAuth2.0の認可情報のひも付きは解除されます。ただしそれはクライアントから認可情報が除去されることを意味しません。なぜなら、そもそもOAuth2.0は、ユーザがクライアントに対してログイン状態のときのみクライアントがリソースにアクセスできるようになる、というような性質のものではないからです。\n 関連リンク:\n   SpringBoot Oauth2でクライアント認証をする際、sessionが破棄と同時に認証サーバー側のトークンをrevokeする方法について\n   ","description":"","id":142,"section":"blog","tags":["spring-boot","spring-security","oauth"],"title":"Spring Security OAuth 2.0 Client(OAuth 2.0 Login)でトークンの管理をしているのはOAuth2AuthorizedClientService","uri":"https://yukihane.github.io/blog/202006/17/oauth2authorizedclientservice/"},{"content":"gradle bootRun --debug-jvm   というように、--debug-jvm オプションを付与すれば良いようです。 これで、デバッガ接続の待受状態で起動します。\n BootRun は JavaExec を継承していますが、この --debug-jvm は後者のリファレンスで言及されています。\n なおMavenでの方法は こちら 。\n 関連リンク:\n   IDEなしでKotlinで書いたSpring Bootをデバッグしたい - スタック・オーバーフロー\n   ","description":"","id":143,"section":"blog","tags":["spring-boot","gradle"],"title":"Spring BootのGradleでのデバッグ実行方法","uri":"https://yukihane.github.io/blog/202006/15/spring-boot-debugging/"},{"content":"やっぱり一発目の Spring Security やってみたで UserDetailsService 使うのは止めようず。So many UserDetailsService samples considered harmful for beginners.\nはじめに ちょっと待って！その UserDetails、本当に必要ですか？で書いたことの繰り返しなんですけども。\nSpring Security で認証機能やってみた系のエントリは高確率でUserDetailsService, UserDetails使って実装してると思うんだけど、そんなん使って実装してみても重要なところなんも理解できなかったでしょ？\n(暗黙のデフォルト設定がゴイゴイ入っているので、そのデフォルト設定の仕組みを理解しないことには肝心の認証機能について入っていけないでしょ？)\n自分は10. Authentication章の冒頭で列挙されているような要素を理解することがまず優先すべきことだと思ってる。もうちょっと絞て具体的に言うと\n AuthenticationProvider(及びそれを取りまとめる AuthenticationManager): 具体的に認証処理を実装するところ Filter: リクエストをフックして認証処理を行うようにする WebSecurityConfig: 上記のフィルタやら認証プロバイダやらを使うようにする設定  の 3 点を理解するのが最初の一歩目だと信じてるんですねこれ。\nところが(すっとこ)どっこい(しょ)、UserDetailsService使うと実際に認証処理を行うところであるAuthenticationProviderからしてどこにいっちゃってるのかわかんなくなる。\nいやいやさすがにそこ外したらいかんでしょ、というのが私が懸念するところです。\nなのでここでUserDetailsServiceを使わない「やってみた」記事をぶちかまそうというのが主旨です。\nちなみに、タイトルでは「一発目に使うのは止めよう」と言っていますが、個人的には二発目以降も別に要らんと思ってます。\nただ公式ドキュメントでえらい推されてるんで若干弱気(…と思って最新版のドキュメント見たらこの辺の記述無くなって、やや推し力は弱まっている感じも受けたけど(それでもまだドキュメント内を\u0026quot;userdetails\u0026quot;で検索すると 248 箇所もヒットするんだけどね))。\nUserDetailsService使えばこんな便利なんだぜ！みたいなことがあるのなら教えて欲しいんだぜ。\n更にちなむと、公式ドキュメント中で最も簡潔にUserDetailsServiceについて説明されているのは\u0026quot;What is a UserDetailsService and do I need one?\u0026ldquo;節。そんな長くないので全文引っ張ってくると:\n UserDetailsService is a DAO interface for loading data that is specific to a user account. It has no other function other to load that data for use by other components within the framework. It is not responsible for authenticating the user. Authenticating a user with a username/password combination is most commonly performed by the DaoAuthenticationProvider, which is injected with a UserDetailsService to allow it to load the password (and other data) for a user in order to compare it with the submitted value. Note that if you are using LDAP, this approach may not work.\n  If you want to customize the authentication process then you should implement AuthenticationProvider yourself. See this blog article for an example integrating Spring Security authentication with Google App Engine.\n というわけで、前述のUserDetailsServiceに隠されてしまったAuthenticationProvider実装というのはDaoAuthenticationProviderのことなんですけれども、UserDetailsService使って「やってみた」人、その点理解できてました？\nそして本記事の主旨としては、このドキュメントの文章を借りれば、\u0026ldquo;implement AuthenticationProvider yourself\u0026quot;をちゃんと「やってみた」しとこうよ、ということになるんだわさ。\nコードへのリンク https://github.com/yukihane/hello-java/tree/master/spring/springboot-auth-example-202006\n以降の文章中では、そのタイミングでの実装コードのハッシュも記しています。\n「やってみた」してみよう！ ところで、そもそも何を作ろうとしているの？ 以下のの blog で実装している機能(の途中まで)をパクらせてもらいます。\n Implementing JWT Authentication on Spring Boot APIs - Aauth0 Blog  (以降、こちらの blog エントリのことを「参考元」と呼称します。)\n次のような機能を提供する Web API を実装します:\n ユーザ登録 登録したユーザの認証(ログイン) ログインしたユーザのみが取得できるリソース提供  あんま参考元タイトルに\u0026quot;JWT\u0026quot;という単語が入ってますがそこはあんま関係ないです。AuthenticationProvider自作するためのネタになっているだけです。\nあと、参考元あるんやったらそっち見た方が良いんじゃないの？という疑問については:\n 参考元は UserDetailsService 使っているのに対しこちらは使っていない、というのが最も大きな違いです 参考元は一気にコードがドバっと出てくるので、実際に作る順番がわかりづらいかな、と思いました(のでこちらでは順番考えて説明しています) あとは、勘違いしそうな型の使い回しをなるべくやめたり、誤解しそうな箇所だと思う点について細かな修正を行っています  ベースプロジェクトの作成と基本設定追加 それじゃ早速やっていきましょう。\nベースプロジェクト作成 https://start.spring.io/ でベースを作成しよう。ちなみに Jav11 の想定で、今回利用する SpringBoot のバージョンはリリースされたてほやほやの 2.3.1 だ！(このサンプル書いてる途中にリリースされたよ！)\n利用する dependencies は次の通り:\n 使う使わないに関わらず取り敢えずぶち込んどけ系: DevTools, Lombok, Spring Configuration Processor スタンダードなウェブアプリ作るので: Spring Web Spring Security をやってみたするので当然: Spring Security DB にユーザ登録してそのデータで認証処理するので: Spring Data JPA, H2 Database  ベースプロジェクトの作成が終わったら、ダウンロード\u0026amp;展開してSpring Tools 4 for Eclipseを起動してプロジェクトをインポートしよう。\n続いて色々基本的な設定を加えていくよ。\n依存ライブラリの追加 参考元に書いてある通り、今回のサンプルでは次のライブラリが追加で必要なのでpom.xmlのdependenciesに追加します:\n1 2 3 4 5 6 7 8 9  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.xml.bind\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jaxb-api\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.auth0\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;java-jwt\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.10.3\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;   SQL ログ出力 インメモリ DB 使うのでホンマに DB に入ってんの？とか気になると思うので SQL をログ出力するようにしときます。\nlogging.level.org.hibernate.SQL=DEBUG logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE UserDetailsService の auto-configuration を無効化 今回の目玉、UserDetailsServiceを使わない、を確実にするためにUserDetailsServiceAutoConfigurationを disable します。デフォルトだと良い感じに設定されちゃってるので、使ってないつもりで使ってた、みたいなことが(SpringBoot あるある)。\n1 2 3 4 5 6 7 8 9  package com.example.springbootauthexample202006; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration; @SpringBootApplication(exclude = UserDetailsServiceAutoConfiguration.class) public class SpringbootAuthExample202006Application { ...   websecurityconfg の auto-configuration を無効化 この件です。未設定の状態だと Boot 君がよしなに設定してくれちゃうんで取り敢えず次の設定をぶち込んでおきます:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  package com.example.springbootauthexample202006.security; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; @Configuration public class MyWebSecurityConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(final HttpSecurity http) throws Exception { http.csrf().disable() .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS); } }   いや空設定ちゃうんかい！csrfとか何やねんそれ！というツッコミについては、今回のスコープから外れるのでパス。\n画面じゃない Web API なんでこれで良いんですぅ。\nここまでのコード: 31312e8c94530bb6f6272d0b9c6c9607a83939ec\nユーザエンティティの作成 さてベースを設定し終わったので実装に入りましょう。\n何から作るのが自然かと聞かれたときユーザのエンティティから作ると答えるのは別に変じゃなかろうもん。\nログイン ID とかパスワードを保持するところ、最初に欲しいよね？\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  package com.example.springbootauthexample202006.user; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.Id; import javax.persistence.Version; import lombok.Data; import lombok.NoArgsConstructor; @Entity @Data @NoArgsConstructor public class ApplicationUser { @Id @GeneratedValue private Long id; @Version private int version; @Column(nullable = false, unique = true) private String username; @Column(nullable = false) private String password; public ApplicationUser(final String username, final String password) { this.username = username; this.password = password; } }   はい。特筆すべきところが無い普通の JPA Entity クラスです。もうちょっとそれっぽく email とかの項目有っても良いんじゃないかとも一瞬考えましたが面倒なのでやめました。\nところでいきなり余談に入るんだけれど(なので読み飛ばして OK)、UserDetailsServiceを使う場合、UserDetailsは上記のようなユーザエンティティに実装すべきでしょうか？\n自分は、\n 一般的にはユーザエンティティはUserDetailsを実装する必要はない(し、実装しちゃうと理解の妨げになるので、少なくともやってみたコードでは実装すべきではない)  (UserDetailsって Authentication#getPrincipal() で取得できるようになる情報っしょ？principal = ユーザ なわけなくなくなくなくなくなくない？)    派なんだけれども、巷にあふれるやってみたコードでは実装しちゃってるコードがどちゃくそ多い。\n…書いてて気になってきたのでちょっと Qiita 内の記事で見てみよう…というわけで根気が途切れるまで新着順で検索してみた:\n ユーザエンティティにUserDetailsを implements する 派  SpringSecurity(securityConfig)によるログイン機能実装 spring boot security + DB 認証を試した時のポイント SpringBoot(Kotlin)と Freemarker でログインするサンプル作った SpringBoot + Spring Security で認証を行う   ユーザエンティティにUserDetailsを implements しない 派  Visual Studio Code による Spring5 MVC Web アプリ開発　Spring Security 使用編 1/3【準備編】 Spring-Security の新規登録とログイン（JPA） Spring Security で DB 認証\u0026amp;BCrypt でハッシュ化 Spring Security と Spring Boot で最小機能のデモアプリケーションを作成する SpringSecurity で認証機能を実装 ③   その他: UserDetailsにユーザエンティティを所有させる派  Spring Security データベースの認証 Spring Security ログイン認証の DB アクセス処理を実装 Spring boot で、パスワードをハッシュ化して会員登録 \u0026amp; Spring security を使って、ログイン機能実装。 SpringSecurity で認証作ってみた　その１フォーム認証 Spring Security データベースの認証 Spring Security with Spring Boot 2.0 で簡単な Rest API を実装する SpringSecurity で DB ログイン認証処理を実装してみた(MyBatis 使用)    (あんま時間かけて見てないので分類間違い御免)\n…どちゃくそ多いという程ではなかった。でも第 3 の派閥を見つけてしまったよ…\nちなみに公式リファレンスではUserDetailsについての指針は特に無いし、公式ガイド(1,2)のサンプルコード含めてもインメモリでUserDetailsオブジェクト作ってる例ばっかりでそれを実際にはどこからどうやって取得すべきなのかが推測できないものばっかり。うーんこ 💩 の。\nサインアップ機能(ユーザ登録機能) さあさ続きましてはさっきのApplicationUserの永続化でございます。\nまだ Spring Security 関係ないのでサクッと行きましょう。\nコントローラと、コントローラがつこてるApplicationUserリポジトリを実装。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  package com.example.springbootauthexample202006.user; import java.util.List; import lombok.Data; import lombok.RequiredArgsConstructor; import lombok.extern.slf4j.Slf4j; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(\u0026#34;/users\u0026#34;) @RequiredArgsConstructor @Slf4j public class UserController { @Data public static class UserForm { private String username; private String password; } private final ApplicationUserRepository applicationUserRepository; @PostMapping(\u0026#34;/sign-up\u0026#34;) public void signUp(@RequestBody final UserForm form) { final ApplicationUser user = new ApplicationUser( form.getUsername(), form.getPassword()); final ApplicationUser saved = applicationUserRepository.save(user); log.info(\u0026#34;User sign-upped: {}\u0026#34;, saved); } @GetMapping(\u0026#34;\u0026#34;) public List\u0026lt;ApplicationUser\u0026gt; users() { return applicationUserRepository.findAll(); } }   1 2 3 4 5 6 7 8  package com.example.springbootauthexample202006.user; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository; @Repository public interface ApplicationUserRepository extends JpaRepository\u0026lt;ApplicationUser, Long\u0026gt; { }   ここまでのコード: 916d7bed6d26787b73091725a662a39051130f04\nここまで実装できたら実際に動かしてみよう。curlを使って次を実行だ:\n1 2 3 4  curl -H \u0026#34;Content-Type: application/json\u0026#34; -X POST -d \u0026#39;{ \u0026#34;username\u0026#34;: \u0026#34;yamada\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;password\u0026#34; }\u0026#39; http://localhost:8080/users/sign-up   これでyamada君が登録された。ログにそれっぽい出力があるはずだ。あるいは、\n1  curl http://localhost:8080/users   で登録ユーザ一覧が見られる。\nパスワードのハッシュ化 (今回の流れで出すには少し細かい話なのかなと思ったのだけれど、)\n1  curl http://localhost:8080/users   を見て気づいたであろうか。そう！！誰も！！パスワードをハッシュ化していないのである！！\nというわけでハッシュ化しましょう。\n1 2 3 4 5 6 7 8 9 10 11 12 13  @PostMapping(\u0026#34;/sign-up\u0026#34;) public void signUp(@RequestBody final UserForm form) { final PasswordEncoder passwordEncoder = PasswordEncoderFactories.createDelegatingPasswordEncoder(); final ApplicationUser user = new ApplicationUser( form.getUsername(), passwordEncoder.encode(form.getPassword())); final ApplicationUser saved = applicationUserRepository.save(user); log.info(\u0026#34;User sign-upped: {}\u0026#34;, saved); }   ここまでのコード: ec6b8045d0b007c1c6dd3eb58b31bd8b117ee362\nもう一度上に書いたcurlコマンドを実行してみよう。今度は生パスワードでなくハッシュ化されたパスワードが DB に保存されたはずだ。\nちなみにこのPasswordEncoder、巷のやってみた記事では次のように Bean 化しているものが多い。\n1 2 3 4 5 6 7  @Configuration public class MyConfig { @Bean public PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } ...   だけどなァ、これをするとなァ、Spring Security のグローバルのデフォルト設定が置き換わっちまうんだよなァ。\nわかっててやってるなら良いんだけど、何の説明もなしにいきなり書くなら参考元のようにBCryptPasswordEncoderを Bean 化するのが無難じゃなかろかいな。\n1 2 3 4  @Bean public BCryptPasswordEncoder bCryptPasswordEncoder() { return new BCryptPasswordEncoder(); }   セキュリティ設定 ﾋｬﾊｯｰ!ついに Spring Security の時間だぜ！\n取り敢えず原則認証受けてないとアクセスできないように設定しよう。\nただし、上で実装したサインアップエンドポイントだけは例外だ。誰でもアクセスできなくちゃあならない。\n(さもなくば、服を買いに行くための服が無い状態だ。)\n1 2 3 4  http.authorizeRequests() .antMatchers(HttpMethod.POST, \u0026#34;/users/sign-up\u0026#34;) .permitAll() .anyRequest().authenticated();   ここもまあハマりポイントとかいろいろ有ったりすると思うんだけど涙をのんで今回は詳しい話をパス！\nここまでのコード: 2692a5c1fc141d412777d3e9126c6f4f99727d87\nさて上記セキュリティ設定が済んだらもう一度上のcurlコマンドを実行してみよう。\n1 2 3 4  curl -H \u0026#34;Content-Type: application/json\u0026#34; -X POST -d \u0026#39;{ \u0026#34;username\u0026#34;: \u0026#34;tanaka\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;password\u0026#34; }\u0026#39; http://localhost:8080/users/sign-up   ふむ、ユーザ登録は登録できているように見える。\n1  curl http://localhost:8080/users   ん？403に変わったぞ？となったら正解だ。自由にアクセスできないようにセキュリティ設定したんだからな！\n認証の実現 認証フィルタ さあそろそろヤマ場だ。\n認証フィルタは冒頭「はじめに」で書いた通りリクエストをフックして認証処理を行わせるところだ。\n今回、敢えて自作するサンプルを選んだわけだけれども、そういう場合でも 1 から作るみたいなことはあんまりないと思う。\n一番よくあるのは今回みたいに UsernamePasswordAuthenticationFilter を継承してカスタマイズする、みたいなものなんじゃなかろうか。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62  package com.example.springbootauthexample202006.security; import static com.auth0.jwt.algorithms.Algorithm.HMAC512; import com.auth0.jwt.JWT; import com.fasterxml.jackson.databind.ObjectMapper; import java.io.IOException; import java.util.Date; import javax.servlet.FilterChain; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.Authentication; import org.springframework.security.core.AuthenticationException; import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter; public class JWTAuthenticationFilter extends UsernamePasswordAuthenticationFilter { private static final String SECRET = \u0026#34;SecretKeyToGenJWTs\u0026#34;; private static final long EXPIRATION_TIME = 864_000_000; // 10 days  private static final String TOKEN_PREFIX = \u0026#34;Bearer \u0026#34;; private static final String HEADER_STRING = \u0026#34;Authorization\u0026#34;; private final ObjectMapper objectMpper = new ObjectMapper(); public JWTAuthenticationFilter(final AuthenticationManager authenticationManager) { super(); setAuthenticationManager(authenticationManager); } @Override public Authentication attemptAuthentication(final HttpServletRequest req, final HttpServletResponse res) throws AuthenticationException { try { final LoginForm form = objectMpper.readValue(req.getInputStream(), LoginForm.class); final UsernamePasswordAuthenticationToken creds = new UsernamePasswordAuthenticationToken( form.getUsername(), form.getPassword()); return getAuthenticationManager().authenticate(creds); } catch (final IOException e) { throw new RuntimeException(e); } } @Override protected void successfulAuthentication(final HttpServletRequest req, final HttpServletResponse res, final FilterChain chain, final Authentication auth) throws IOException, ServletException { final String token = JWT.create() .withSubject(auth .getName()) .withExpiresAt(new Date(System.currentTimeMillis() + EXPIRATION_TIME)) .sign(HMAC512(SECRET.getBytes())); res.addHeader(HEADER_STRING, TOKEN_PREFIX + token); } }   ここまでのコード: 2d84598819a0574f188b57c930a06c23ff7c2db7\n長い割に重要なポイントは 2 つだけなんだけど、\n getAuthenticationManager().authenticate(creds); としてるのが認証プロバイダ(※次節で実装)に認証処理を委譲しているところ。フィルタがやってるのはその認証プロバイダが認証を行うのに必要な情報の抽出。 (このコード上には現れていなくて、親クラスがやっていることなんだけれど、)このフィルタが適用される、つまり認証処理が行われるのは /login に対する POST 。  というわけで、次は委譲先、認証プロバイダの実装だ。\n認証プロバイダ 入力されたユーザ名とパスワードが DB データと一致してるか確認する、これが！これこそが！みんなの思い描く認証だ！\nUserDetailsSevice使ったときのモヤモヤが晴れるだろう！この素直な実装！\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  package com.example.springbootauthexample202006.security; import com.example.springbootauthexample202006.user.ApplicationUser; import com.example.springbootauthexample202006.user.ApplicationUserRepository; import java.util.Optional; import lombok.RequiredArgsConstructor; import org.springframework.security.authentication.AuthenticationProvider; import org.springframework.security.authentication.BadCredentialsException; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.Authentication; import org.springframework.security.core.AuthenticationException; import org.springframework.security.crypto.password.PasswordEncoder; @RequiredArgsConstructor public class ApplicationUserAuthenticationProvider implements AuthenticationProvider { private final PasswordEncoder passwordEncoder; private final ApplicationUserRepository applicationUserRepository; @Override public Authentication authenticate(final Authentication authentication) throws AuthenticationException { final UsernamePasswordAuthenticationToken auth = (UsernamePasswordAuthenticationToken) authentication; final String username = (String) auth.getPrincipal(); final String password = (String) auth.getCredentials(); final Optional\u0026lt;ApplicationUser\u0026gt; user = applicationUserRepository.findByUsername(username); final Optional\u0026lt;ApplicationUserAuthentication\u0026gt; result = user.map(u -\u0026gt; { if (passwordEncoder.matches(password, u.getPassword())) { return new ApplicationUserAuthentication(username); } else { return null; } }); return result.orElseThrow(() -\u0026gt; new BadCredentialsException(\u0026#34;illegal username or password\u0026#34;)); } @Override public boolean supports(final Class\u0026lt;?\u0026gt; authentication) { return UsernamePasswordAuthenticationToken.class.isAssignableFrom(authentication); } }   ここまでのコード: a9478f869c84248cb7dcddff8d192878e0388810\n認証処理の利用設定 さあ、認証の実装は行ったので、後はこの実装を使うように設定変更するだけだ。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  @Configuration @RequiredArgsConstructor public class MyWebSecurityConfig extends WebSecurityConfigurerAdapter { private final ApplicationUserRepository applicationUserRepository; @Override protected void configure(final HttpSecurity http) throws Exception { ... final PasswordEncoder passwordEncoder = PasswordEncoderFactories.createDelegatingPasswordEncoder(); final AuthenticationProvider provider = new ApplicationUserAuthenticationProvider(passwordEncoder, applicationUserRepository); final AuthenticationManager manager = new ProviderManager(Arrays.asList(provider)); http.addFilter(new JWTAuthenticationFilter(manager)); } }   ここまでのコード: 973f5f7a33b84ffbc2f9a069c0a9bd0b9393395c\nhttp.addFilter()で使用するフィルタを登録する、ってのがこのコードの本質。\nそしてフィルタが利用する認証プロバイダ(を管理する認証マネージャ)をコンストラクタで指定してるってわけ。イージーだね！\n当然だけどPasswordEncorderは sign-up でユーザ登録したときのものと同じものを使わないと検証できないよ！\nんで本題と関係ないけど Java わかってる感出すためにArrays.asList()じゃなくて Java9 で導入されたList.of()つこたろ、ってやったら流れるようにバグ踏んだ(#8689])ので皆もイキるときは気をつけよう。\nもいっこあんまり関係ない話をすると、Filter を Bean 化するとちょっと困ったことになったりもした。\n前述のPasswordEncoderもそうだけど、よくわからんけど他人のコードコピペして Bean 化しました！ってやると予期しない範囲まで波及してしまうという、これも Spring Boot あるあるだね！\n閑話休題。あとここで言っとくべきことは、フィルタの適用順って重要、ってことなんだけど、今回のサンプルではもう 1 個フィルタ追加するのでそんときに説明します。\nさあさあ！ついに認証処理を通るリクエストが投げられるようになりましたよ！サインアップしてログインしてみよう！\n1 2 3 4  curl -H \u0026#34;Content-Type: application/json\u0026#34; -X POST -d \u0026#39;{ \u0026#34;username\u0026#34;: \u0026#34;suzuki\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;password\u0026#34; }\u0026#39; http://localhost:8080/users/sign-up   1 2 3 4  curl -i -H \u0026#34;Content-Type: application/json\u0026#34; -X POST -d \u0026#39;{ \u0026#34;username\u0026#34;: \u0026#34;suzuki\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;password\u0026#34; }\u0026#39; http://localhost:8080/login   そうするとログイン成功してこんな感じのヘッダが付いて返ってくるはず。Bearer トークンてやつだね！\n(今回説明した事の本質からは逸れてるのであんまり触れないけど、これは JWTAuthenticationFilterが認証が正常に終了した後にsuccessfulAuthenticationで生成してるので気になる人はそこを見てね！)\nAuthorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzdXp1a2kiLCJleHAiOjE1OTI4OTM3MDN9.ul4oibmjgOMZPoyqu6NqMENIRmoQ92Ht8WsDFr9UupsUo_FeJH4pCwzAa8RP3XNPojYxaJjjq6u91HKJuraz1g 次はこのトークンを使えば保護されたリソースへアクセスできる、ようにする実装だ。\n認可フィルタの実装と適用 認可フィルタ 上で登場した Bearer トークンの使い方を先に書いとくと、\ncurl -H \u0026quot;Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzdXp1a2kiLCJleHAiOjE1OTI4OTM3MDN9.ul4oibmjgOMZPoyqu6NqMENIRmoQ92Ht8WsDFr9UupsUo_FeJH4pCwzAa8RP3XNPojYxaJjjq6u91HKJuraz1g\u0026quot; \\ http://localhost:8080/users みたいにヘッダにつけて保護されたリソースを要求すると、サーバは、「おうおう、あんたなら見せてやれるよ」って言ってくれるわけね。\nただ現時点ではそんな実装してないので上のリクエスト投げても敢え無く403になるわけなのよ。それを何とかするのが 2 つめのフィルタ。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  package com.example.springbootauthexample202006.security; import static com.example.springbootauthexample202006.security.SecurityConstants.HEADER_STRING; import static com.example.springbootauthexample202006.security.SecurityConstants.SECRET; import static com.example.springbootauthexample202006.security.SecurityConstants.TOKEN_PREFIX; import com.auth0.jwt.JWT; import com.auth0.jwt.algorithms.Algorithm; import java.io.IOException; import javax.servlet.FilterChain; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.web.filter.OncePerRequestFilter; public class JWTAuthorizationFilter extends OncePerRequestFilter { @Override protected void doFilterInternal(final HttpServletRequest req, final HttpServletResponse res, final FilterChain chain) throws IOException, ServletException { final String header = req.getHeader(HEADER_STRING); if (header == null || !header.startsWith(TOKEN_PREFIX)) { chain.doFilter(req, res); return; } final ApplicationUserAuthentication authentication = getAuthentication(req); SecurityContextHolder.getContext().setAuthentication(authentication); chain.doFilter(req, res); } private ApplicationUserAuthentication getAuthentication(final HttpServletRequest request) { final String token = request.getHeader(HEADER_STRING); if (token != null) { // parse the token.  final String username = JWT.require(Algorithm.HMAC512(SECRET.getBytes())) .build() .verify(token.replace(TOKEN_PREFIX, \u0026#34;\u0026#34;)) .getSubject(); if (username != null) { return new ApplicationUserAuthentication(username); } return null; } return null; } }   ここまでのコード: 90c26b3dcf6e3ba52651f1ad00e9c8c52b0fd35a\nヘッダに設定されている Bearer トークンをデコードして、その結果から得られる情報をもとに Authenticationを生成しSecurityContextHolder.getContext().setAuthentication()でセキュリティコンテキストへセットする、というのが日本語での簡単な説明。\nここでセットされたAuthentictionのisAuthenticated()がtrueなので、SpringBoot 君は保護されたリソースへのアクセスを許してくれる。\n認可フィルタの利用設定 フィルタの登録。基本は 1 つめのフィルタと同じだね。\n1 2 3 4 5 6 7 8 9 10  @Configuration @RequiredArgsConstructor public class MyWebSecurityConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(final HttpSecurity http) throws Exception { ... http.addFilterAfter(new JWTAuthorizationFilter(), JWTAuthenticationFilter.class); } }   ここまでのコード: 881cf366e10ba61162470936e267cab6930a2e57\nんで前に触れたフィルタの適用順の話。\nフィルタが適用される順番はもちろん重要で、例えば今回のフィルタを例にとると、 http://localhost:8080/login にアクセスしたとき、JWTAuthorizationFilter(Bearer トークンのデコード)よりJWTAuthenticationFilter(Bearer トークンの生成)を優先してほしいわけですよ。\nだってログインしようとしてるんだから Bearer トークン持ってるはずないじゃん。\nなのに Bearer トークン要求されたらこれまた服を買いに行くための服以下略じゃないですか！\nで、そのフィルタの順番なんですが、基本これ。\n Table 2. Standard Filter Aliases and Ordering - 18.3.1. Adding in Your Own Filters  この票に登場するクラス、それを継承したクラスは、addFilter()この表の順序に割り当てられる。\n例えばJWTAuthenticationFilterはUsernamePasswordAuthenticationFilterを継承して作ってるので\nhttp.addFilter(new JWTAuthenticationFilter(manager)); とするとUsernamePasswordAuthenticationFilterのところに自動で割り当たる。\n一方で、 JWTAuthorizationFilterはこの表に登場しない OncePerRequestFilter を継承して作っているので(※参考元コードとは異なります)、順序を明示的に教えてあげる必要がある。\nなので、JWTAuthenticationFilterの後にしてくれ\nhttp.addFilterAfter(new JWTAuthorizationFilter(), JWTAuthenticationFilter.class); ってやってるわけ。\n完成 んじゃ実行してみましょうよ。\n1 2 3 4  curl -H \u0026#34;Content-Type: application/json\u0026#34; -X POST -d \u0026#39;{ \u0026#34;username\u0026#34;: \u0026#34;ito\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;password\u0026#34; }\u0026#39; http://localhost:8080/users/sign-up   1 2 3 4  curl -i -H \u0026#34;Content-Type: application/json\u0026#34; -X POST -d \u0026#39;{ \u0026#34;username\u0026#34;: \u0026#34;ito\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;password\u0026#34; }\u0026#39; http://localhost:8080/login   1 2  curl -i -H \u0026#34;Authorization: Bearer \u0026lt;loginで取得したトークン文字列\u0026gt;\u0026#34; \\ http://localhost:8080/users   いかがでしたか？\n","description":"","id":144,"section":"blog","tags":["spring-boot","spring-security"],"title":"So many UserDetailsService samples considered harmful for beginners","uri":"https://yukihane.github.io/blog/202006/13/userdetailsservice-samples-considered-harmful-for-biginners/"},{"content":"List(などのコレクション)が要素に null を含むかどうかの判定に、 contains(null) を利用すると NullPointerException が発生することがあります。\n リファレンスには次のようにあります:\n  NullPointerException - 指定された要素が null で、このリストが null 要素を許可しない場合(オプション)\n  — https://docs.oracle.com/javase/jp/11/docs/api/java.base/java/util/List.html#contains(java.lang.Object)   オプション、とあるが、そういう型は実際に存在するのか、というと、Java9から導入された List.of() メソッドで生成される インスタンス(変更不能なリスト)がそれです。 簡単に試せます:\n List\u0026lt;String\u0026gt; list = List.of(\u0026#34;hello\u0026#34;); list.contains(null);   代わりに、例えば次のようなコードで実現できます:\n list.stream().anyMatch(Objects::isNull);   ただし、lambdaを使うとオーバヘッドがあるため、Spring Framework内部では利用しない方針のようで、Springプロジェクトでは CollectionUtils.contains() というユーティリティメソッドが用意されていました。これを使うと次のようになります:\n CollectionUtils.contains(list.iterator(), null);   関連リンク:\n   ProviderManager#checkState() throws NullPointerException #8689 - Spring Security issues\n   ","description":"","id":145,"section":"blog","tags":["java"],"title":"List#contains(null)は使わないほうが良い","uri":"https://yukihane.github.io/blog/202006/13/list-contains-null/"},{"content":"サンプルコード等だけを見ていると UserDetailsService を利用することがSpring Securityの唯一の認証処理実現方法だと誤解しがちですが、 UserDetailsService はむしろユーティリティライブラリくらいの立ち位置で、別に利用しなくても実現可能です。\n そして、役割も誤解されがちで、これは単に認証に必要な情報を\u0026#34;名前をキーにして\u0026#34;取得するDAOです。 認証を行うクラスではありませんし、そもそも名前をキーにしないようなシステムでは適合しません。 しかしSpring Boot上でデフォルト設定で使っていると認証するためのクラスが一切出てこないので誤解してしまう、というわけです。\n 公式リファレンスでは次のようにあります:\n  UserDetailsService is a DAO interface for loading data that is specific to a user account. It has no other function other to load that data for use by other components within the framework. It is not responsible for authenticating the user. Authenticating a user with a username/password combination is most commonly performed by the DaoAuthenticationProvider, which is injected with a UserDetailsService to allow it to load the password (and other data) for a user in order to compare it with the submitted value. Note that if you are using LDAP, this approach may not work.\n If you want to customize the authentication process then you should implement AuthenticationProvider yourself.\n  — What is a UserDetailsService and do I need one?   その他、次のQ\u0026amp;Aも参照してみてください:\n   I need to login in with more information than just the username.\n  How do I access the user’s IP Address (or other web-request data) in a UserDetailsService?\n  How do I access the HttpSession from a UserDetailsService?\n  How do I access the user’s password in a UserDetailsService?\n   要約すると、それらは UserDetailsService の役割ではなくて、 認証フィルター だったり authentication-provider だったりが為すべきことである、というのが理解されていない、というような話です。\n このような誤解を避けるためにも、少なくともはじめはユーティリティクラスであるところの UserDetailsService を利用しない、シンプルなコードサンプルを参照して理解したほうが良いのではないか、と考えるに至りました。\n が、そういったサンプルがどこにあるか思い浮かばなかったので(オフィシャルのサンプルも常に UserDetailsService を使っている)、自分で作りました。\n   https://github.com/yukihane/hello-java/tree/master/spring/springboot-auth-example-202006\n   関連リンク:\n   UserDetailsServiceのloadUserByUsernameの存在意義がよくわからないです\n   ","description":"","id":146,"section":"blog","tags":["spring-boot","spring-security"],"title":"UserDetailsServiceは誤解されている","uri":"https://yukihane.github.io/blog/202006/12/userdetailsservice-conidered-harmful/"},{"content":"…と少し思い返していました。といっても思い出せたのは次の2つなのですが。\n   alpine Linuxへのawscliインストール\n  alpineでgitがcolorにならない\n   Alpine特有の問題については、「取り敢えずglibc/GNU版コマンドをインストールしてみろ」ってのが最初に採ってみる方策としてアリなのかも。\n ","description":"","id":147,"section":"blog","tags":["linux"],"title":"Alpine Linuxでglibcじゃないことに起因する問題ってちょくちょくあるよね","uri":"https://yukihane.github.io/blog/202006/10/alpine-and-glibc-problems/"},{"content":"CompletableFuture の一連の非同期処理 ほげAsync は、デフォルトでは ForkJoinPool.commonPool() という ExecutorService で実行されます。\n そしてこの ExecutorService のワーカスレッドはデーモンスレッドであるため、非デーモンスレッドが無くなると(≒ メインスレッドが終了すると)プール内の処理を完了させること無くプロセスが終了します。\n そのせいで、サンプルコードを走らせてみるとなぜか処理が想定通り行われていない、というような事象が発生することがあるようです。\n そういった場合は、 main メソッドの最後に Thread.sleep() を入れるなどして、少しの間メインスレッドが終了してしまうのを留まらせると期待した結果が得られるでしょう。\n 関連リンク:\n   非同期処理において結果が思ったように出ない理由を知りたい\n  CompletableFutureを使った非同期処理を理解したい\n   ","description":"","id":148,"section":"blog","tags":["java"],"title":"CompletableFuture覚え書き","uri":"https://yukihane.github.io/blog/202006/02/note-of-completablefuture/"},{"content":"https://twitter.com/hishidama/status/1266176675768745984\n  packageの宣言と実際のディレクトリが一致していなくてもmvn compile（やjavac）が成功するんですが、そういうもんでしたっけ？\n    classファイルのパッケージと実際のディレクトリーは対応させないといけないんですけど、ソースファイルについてはそういう制限は無いんですよね。でもけっこう勘違いされているような＾＾；\n   この辺の話が正当かどうか、という話です。\n javac のリファレンス、 Arrangement of Source Code セクションには次のように書かれています:\n  In the Java language, classes and interfaces can be organized into packages, and packages can be organized into modules. javac expects that the physical arrangement of source files in directories of the file system will mirror the organization of classes into packages, and packages into modules.\n   また、 The Java™ Tutorials \u0026gt; Managing Source and Class Files では、\n  Many implementations of the Java platform rely on hierarchical file systems to manage source and class files, although The Java Language Specification does not require this.\n   ちゃんと読んでないですが The Java® Language Specification だと 7.2. Host Support for Modules and Packages 辺りが該当するのでしょうか。\n そんなわけで、(ソースファイルだけでなく)クラスファイルもディレクトリ階層とパッケージを対応付けているのは仕様に拠るものではない、ただし各種実装はそのようにファイルが配置されていることを期待しているのでそれに従いましょう、ということですね。\n ソースファイルがどうでもよくてクラスファイルは従わなくてはならないのは「たまたま実装がそうなっているから」だ、ということのようです。\n ちなみに java コマンドの source-file mode については、ディレクトリ階層は関係ないぜ、ってのが例から読み取れますね。\n ","description":"","id":149,"section":"blog","tags":["java"],"title":"Javaのソースファイルはpackageに対応したディレクトリ階層に置かなくても良い？","uri":"https://yukihane.github.io/blog/202005/29/java-source-location/"},{"content":"kubernetesの試験を受けるに当たって、最小限の .vimrc を覚えておくためのメモ:\n set autoindent set expandtab set tabstop=2 set shiftwidth=2   ","description":"","id":150,"section":"blog","tags":["kubernetes"],"title":"ミニマル `.vimrc`","uri":"https://yukihane.github.io/blog/202005/27/minimal-vimrc/"},{"content":"CMD と command が対応しているわけではないのでまぎらわしい…\nKubernetes リファレンス:\n Container v1 core  参考として Dockerfile リファレンス:\n ENTRYPOINT CMD  ","description":"","id":151,"section":"blog","tags":["kubernetes"],"title":"DockerfileのENTRYPOINTに対応するのはcommand, CMDに対応するのがargs","uri":"https://yukihane.github.io/blog/202005/06/k8s-command-args/"},{"content":"Kubernetes入門の書籍やドキュメントの中には、Kubernetes環境が既に手元にある前提で書かれているものも多いです。\n そういう場合、どうやってKubernetes環境を調達して良いのかわからず、一つの手段として自前で環境を作る Kubernetes the hard way をやってみたのですが、一旦環境を作ってしまうとインスタンスを起動させ続けねばならず(作り直すの面倒だし)、財布に優しくないので断念しました。\n 代わりに、表題のKubernetesマネージド環境であるところのGKEを利用することにしました。初回の3万円無料枠で利用可能です。\n ドキュメントはここですね:\n   https://cloud.google.com/kubernetes-engine/docs/how-to?hl=ja\n   「単一ゾーンクラスタの作成」を読めば良いでしょう。\n katacodaのplaygroundは完全無料で試すことができます。レスポンスは少し遅いです。\n   https://www.katacoda.com/courses/kubernetes/playground\n   ","description":"","id":152,"section":"blog","tags":["kubernetes"],"title":"GKE(Goole Kubernetes Engine)の始め方","uri":"https://yukihane.github.io/blog/202004/26/gke-getting-started/"},{"content":"要約 kube-apiserver の起動引数を --runtime-config=api/all=true に修正すれば v1.18.2 でも記述どおりで動作する。\n   本文 現時点で本家 Kubernetes The Hard Way は1.15.3をターゲットにして構築を行っていますが、せっかくなので最新版である v1.18.2 でやってみることにしました。\n 結果、1点を除いて記述されているままで構築完了までもっていくことができました。\n 問題があった1点とは、 マスターコンポーネント のうちのひとつ、 kube-apiserver の起動オプションです。\n Bootstrapping the Kubernetes Control Plane 章の Configure the Kubernetes API Serverセクションで kube-apiserver.service ファイルを作成していますが、その中のコマンド引数 --runtime-config=api/all に問題がありました。\n このコマンドをそのまま実行すると、\n  Error: invalid value api/all=\n   というエラーが /var/log/syslog に出力され、プロセスが終了してしまいます。\n 現在のドキュメント では設定すべき値がわかりやすく書き直されていますが、正しくは --runtime-config=api/all=true です。\n これについては、既にIssuesに登録されていました:\n   This was required before the apiserver would come up with v1.17.0 #535\n   作業中の気づいた点などは直接ドキュメントに書き込んでいきました。 というわけで作業ログはこちらになります:\n   https://github.com/yukihane/kubernetes-the-hard-way/compare/5c462220b7f2c03b4b699e89680d0cc007a76f91..master\n     ","description":"","id":153,"section":"blog","tags":["kubernetes"],"title":"Kubernetes the hard way を最新版の1.18.2でやってみた","uri":"https://yukihane.github.io/blog/202004/26/kubernetes-the-hard-way-v1.18.2/"},{"content":"Kubernetes the hard wayをやるのに`tmux`の操作を覚えておくのが良さそうだったので使いそうなものを記載しておくことにしました。\n Ctrl キーと b キーの同時押しを ^b と表記しています。\n     機能 キー操作 補足・説明     起動\n tmux コマンド\n 当然ですが tmux のセッション外で実行します。\n   デタッチ\n ^b d\n 終了とは異なり状態が保存されます。\n   アタッチ\n tmux a コマンド\n -t \u0026lt;session名\u0026gt; でアタッチするセッションを選択可能。セッション一覧は tmux list-sessions コマンド。\n   上下分割\n ^b \u0026#34;\n 分割されたエリアはpaneと呼ばれます。\n   上下分割したpaneの高さを均等にする\n ^b Alt+2\n    pane移動\n ^b 矢印キー\n マウスクリックでも。\n   全paneに同じ入力を行う/解除する\n ^b :setw synchronize-panes\n the hard wayの説明では setw でなく set を用いているが、 set はセッションに対して適用するコマンド(setw はウィンドウに対して適用)。\n    ","description":"","id":154,"section":"blog","tags":["tmux","kubernetes"],"title":"Kubernetes the hard wayを試すためのtmux基礎知識","uri":"https://yukihane.github.io/blog/202004/25/tmux/"},{"content":"https://github.com/zalmoxisus/redux-devtools-extension/blob/master/README.md#13-use-redux-devtools-extension-package-from-npm\nというわけで型付けされているので\nconst store = createStore(rootReducer, undefined, devToolsEnhancer({}));  で良い。\n何か Qiia の記事とかを見てるとこっちの方法でばっかり書いてあるが。\nElectron から使う場合はElectron 公式からもredux-devtools-extension 公式からもリンクされている electron-devtools-installer が利用できた。\n","description":"","id":155,"section":"blog","tags":["react","redux"],"title":"redux-devtools-extension をTypeScriptで使う","uri":"https://yukihane.github.io/blog/202004/24/redux-devtools-extension-with-typescript/"},{"content":" Electron で File の Open と Save - Qiita  を写経させてもらっていますが、、、動かない。\nリンク先では Electron v4.x を利用していますが現在の最新版は v8.2.3。このバージョン差異が原因のようでした。\n問題 1. Uncaught ReferenceError: require is not defined v8.2.3 でそのまま実行すると、表題のエラーが出ています。\nv5.0.0(#16235)より nodeIntegration 設定のデフォルト値が false に変わったためのようです。\nセキュリティ上の懸念がある場合はこのへんに書いてあることを行うのかなと思いますがよくわからない\u0026amp;今回はローカルアプリなので問題ないので単に nodeIntegration を true にしました(参考ドキュメント)。\nhttps://github.com/yukihane/hello-js/commit/18b7d2c01aef737792748ffe788a6cb67f68c897\n2. Open/Save ボタンを押してファイル選択しても想定通り機能しない Open ボタンを押してファイル選択ダイアログでファイルを選択すると、その内容をテキストエリアに表示する、というのが想定された動作のはずですが、何も起こりません。\ndialog.showOpenDialogメソッドの仕様が変わっており、 v5.x までは引数にコールバック関数を採っていたが、v6 より Promise を戻り値に採るようになったようです(#16973)。\nhttps://github.com/yukihane/hello-js/commit/93d429089a6782283ce9d4738c9e7f150abf757f\nしかしエラーも吐かずに単に動かなくなるって、JavaScript ってすげーな(褒めてない)。\n3. Save ボタンを押しても保存できない 上記対応を行うと Save ボタンを押した際にファイルは作成されるようになりましたが中身が空です。また 2 回目以降の Open ボタンも機能しているように見えません。\n HTMLTextAreaElement - Web API | MDN  を見ると textContent でなく value プロパティを用いるのが適切に思われます。\n(この辺 HTML 童貞なので何が正解かわからない…)\nhttps://github.com/yukihane/hello-js/commit/57c1996adc57a6f4dee9790d1825b65cbbe1835c\n解決 https://github.com/yukihane/hello-js/tree/master/electron/file-io-example\n全体差分: https://github.com/yukihane/hello-js/compare/77e72d9..57c1996\n","description":"","id":156,"section":"blog","tags":["javascript","electron"],"title":"Electronでfs(File IO)","uri":"https://yukihane.github.io/blog/202004/22/electron-fileio/"},{"content":"Redux 多分使わないけど理解のため写経。\n答え合わせに他の方が似たようなことやってないかググったけれども プラスアルファ要素(Redux Toolkit を使う、feature folders 流派でフォルダ分け、etc)が付いてたりして 1 対 1 で突き合わせて確認できるものが見つからなかった。ので自分が書いたものをリンクしておく:\n https://github.com/yukihane/hello-js/tree/master/redux.js.org/basic-tutorial-typescript  参考にしたのはBasic Tutorial章の各ページ(そしてそこからリンクされていたconnect())と Recipes 章の Usage With TypeScript。\n写経しているときの所感としては:\n こっちにも書いたけどこの tutorial でやってる folders by type 流儀は近い将来書き直されるみたいなので、上記のコードも寿命は長くない。 Dispatchとか DispatchProp とかたまたま見つけたけど本来はどうやってライブラリで定義している型を探し当てれば良いのかわからない。(未解決) Basic Tutorial章、最後のページ \u0026ldquo;Example: Todo List\u0026rdquo; は実際のコードと同期が取れているようだがそれ以外のページはコードサンプルが最新化されていない。そのため順に読みながら理解したところを写経していく、というスタイルを取ると整合性が取れなくなる。  コードでは修正済みのバグが残ってたり。    ","description":"","id":157,"section":"blog","tags":["react","redux"],"title":"ReduxのBasic TutorialにTypeScriptで型を付けただけ","uri":"https://yukihane.github.io/blog/202004/15/redux-basic-tutorial/"},{"content":"https://reacttraining.com/react-router/web/api/Route/route-render-methods\n The recommended method of rendering something with a  is to use children elements, as shown above. There are, however, a few other methods you can use to render something with a . These are provided mostly for supporting apps that were built with earlier versions of the router before hooks were introduced.\n \u0026lt;Route component\u0026gt; \u0026lt;Route render\u0026gt; \u0026lt;Route children\u0026gt; function   つまり、引用部の直前にあるこの書き方:\n \u0026lt;Route exact path=\u0026quot;/\u0026quot;\u0026gt; \u0026lt;Home /\u0026gt; \u0026lt;/Route\u0026gt; \u0026lt;Route path=\u0026quot;/news\u0026quot;\u0026gt; \u0026lt;NewsFeed /\u0026gt; \u0026lt;/Route\u0026gt;  ","description":"","id":158,"section":"blog","tags":["react"],"title":"React Router \u003cRoute\u003e で描画したいコンポーネントの指定方法が人によってまちまちなんだけどどれが正解なの？","uri":"https://yukihane.github.io/blog/202004/13/react-router/"},{"content":"目標 rust で wasm で hello, worldの次として、JavaScript で実装されたプロジェクトを Rust に書き直してみます。\n最近N 予備校のプログラミング入門 Web アプリコースを始めたのでそれを題材にします。\n https://www.nnn.ed.nico/courses/668/chapters/9514  このへんで作っているもので、完成版のコードは\n https://github.com/progedu/assessment-for-download  にあります。\nプロジェクト作成 前回の通り。\nnpm init rust-webpack assessment cd assessment  元ファイルコピー curl -L -o static/assessment.css https://raw.githubusercontent.com/progedu/assessment-for-download/master/assessment.css curl -L -o static/assessment.html https://raw.githubusercontent.com/progedu/assessment-for-download/master/assessment.html curl -L -o js/assessment.js https://raw.githubusercontent.com/progedu/assessment-for-download/master/assessment.js 実行してみる assessmment.html を開きたいので webpack.config.js に設定を追加します:\nmodule.exports = { //... devServer: { openPage: '/assessment.html' } }; 編集がおわったらコマンド実行:\nyarn start  \u0026ldquo;あなたのいいところ診断\u0026quot;ページが表示されれば OK。ただし devtools の console を見ると assessment.js が読み込めていません。\nasessment関数を Rust に移植 src/lib.rs:\nconst ANSWERS :[\u0026amp;str;16] = [ \u0026quot;{userName}のいいところは声です。{userName}の特徴的な声は皆を惹きつけ、心に残ります。\u0026quot;, \u0026quot;{userName}のいいところはまなざしです。{userName}に見つめられた人は、気になって仕方がないでしょう。\u0026quot;, \u0026quot;{userName}のいいところは情熱です。{userName}の情熱に周りの人は感化されます。\u0026quot;, \u0026quot;{userName}のいいところは厳しさです。{userName}の厳しさがものごとをいつも成功に導きます。\u0026quot;, \u0026quot;{userName}のいいところは知識です。博識な{userName}を多くの人が頼りにしています。\u0026quot;, \u0026quot;{userName}のいいところはユニークさです。{userName}だけのその特徴が皆を楽しくさせます。\u0026quot;, \u0026quot;{userName}のいいところは用心深さです。{userName}の洞察に、多くの人が助けられます。\u0026quot;, \u0026quot;{userName}のいいところは見た目です。内側から溢れ出る{userName}の良さに皆が気を惹かれます。\u0026quot;, \u0026quot;{userName}のいいところは決断力です。{userName}がする決断にいつも助けられる人がいます。\u0026quot;, \u0026quot;{userName}のいいところは思いやりです。{userName}に気をかけてもらった多くの人が感謝しています。\u0026quot;, \u0026quot;{userName}のいいところは感受性です。{userName}が感じたことに皆が共感し、わかりあうことができます。\u0026quot;, \u0026quot;{userName}のいいところは節度です。強引すぎない{userName}の考えに皆が感謝しています。\u0026quot;, \u0026quot;{userName}のいいところは好奇心です。新しいことに向かっていく{userName}の心構えが多くの人に魅力的に映ります。\u0026quot;, \u0026quot;{userName}のいいところは気配りです。{userName}の配慮が多くの人を救っています。\u0026quot;, \u0026quot;{userName}のいいところはその全てです。ありのままの{userName}自身がいいところなのです。\u0026quot;, \u0026quot;{userName}のいいところは自制心です。やばいと思ったときにしっかりと衝動を抑えられる{userName}が皆から評価されています。\u0026quot; ]; #[wasm_bindgen] pub fn assessment(user_name: \u0026amp;str) -\u0026gt; String { let sum: u32 = user_name.chars().map(|x| x as u32).sum(); let index = (sum % (ANSWERS.len() as u32)) as usize; ANSWERS[index].replace(\u0026quot;{userName}\u0026quot;, user_name) } js 実装 assessment.jsという名前をそのまま使う方法がわからなかったので仕方なく index.js の方で実装しました。\nassessment関数以外の部分をコピペして assessment.js は削除します。\nただし assessment関数は Rust 側で実装したものを呼び出すように変更します。\nimport(\u0026quot;../pkg/index.js\u0026quot;).then(module =\u0026gt; { ... const result = module.assessment(userName); そして assessment.html は assessment.js でなく index.js を読むようにします。\n\u0026lt;script src=\u0026quot;index.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; index.html は不要なので削除します。\n実行 編集は以上です。実行してみます:\nyarn start  配布するまでにはまだひと手間かかりそうだけれども、取り敢えずここまで。\n実装コード  https://github.com/yukihane/hello-js/tree/master/nnn.ed.nico/webapp-primer-2020-rust/assessment  ","description":"","id":159,"section":"blog","tags":["rust","wasm"],"title":"rustでwasmでhello, world(2020-04-08版) の次","uri":"https://yukihane.github.io/blog/202004/09/hello-wasm-next/"},{"content":"はじめに wasmに挑戦してみようとHello, worldをやってみようとしました。\n 公式っぽいドキュメントとしてはググると次のものが見つかりました:\n   The Rust and WebAssembly Book (GitHub repo)\n  Rust から WebAssembly にコンパイルする - WebAssembly | MDN\n   最初は1つめのドキュメントを見ながらやり始めたのですが、どうも記述が古いっぽい気がしてリポジトリを見てみると最終コミットが5ヶ月前で、ちょっとどうかと思ったので2つめを見てみたのですが、こちらはこちらで本当にHello, world部分しか説明されておらず先に進めそうもありませんでした。\n それ以外のものを探したところ、 https://rustwasm.github.io/ から辿れる次のドキュメントを見つけました:\n   The wasm-pack Book\n  The wasm-bindgen Guide\n   …がこちらも少し現状に即していないように見えました。\n 以下、上記のドキュメントを継ぎ接ぎしてHello, worldを作成してみた記録です。\n   プロジェクト作成の前に ツールの種類と概要 似た名前のツール/コマンドが登場するので最初に一覧を見ておくと良いかと考えます。The Rust Wasm Bookに説明があります。\n   5.1. Crates You Should Know\n  5.2. Tools You Should Know\n  5.3. Project Templates\n    プロジェクトテンプレート 前述リンク 5.3. Project Templates 先には3種類のプロジェクトテンプレートが紹介されています。\n いろいろなチュートリアルを見ていると、このテンプレートが事前説明無く使われている(あるいはテンプレート無しで進めていく)のでどのチュートリアルを参考にすれば良いのか混乱しました。\n ですのでここで簡単に触れておきます。\n  wasm-pack-template  RustのコードをWasmプロジェクトにパッケージングするためのテンプレート。JavaScriptの世界とは無関係です(ので package.json などが含まれない)。\n create-wasm-app  Rustから生成したWasmのNPMパッケージを利用するようなJavaScriptプロジェクトのテンプレート。Rustの世界とは無関係です(ので Cargo.toml などが含まれない)。\n rust-webpack-template  JavaScriptプロジェクトですが、一部をRustで実装し、Wasmに変換して利用するようなプロジェクト。\n   \u0026#34;Hello, worldをWasmでやってみよう！\u0026#34;という場合、おそらく利用することになるのは rust-webpack-template ではないでしょうか。\n    プロジェクト作成 The wasm-pack Book の 5.1. Hybrid applications with Webpack が rust-webpack-template を利用したプロジェクト作成チュートリアルになっているのでこれをなぞります。\n npm init rust-webpack wasm-app   ( wasm-pack のチュートリアルで用いられているのは wasm-pack-template でなく rust-webpack-template …​これだけで混乱するには十分です…​)\n ちなみに yarn create rust-webpack は何故か失敗します(こちら と同じ原因でしょうか)。 ですので、 yarn を利用する場合もここだけ npm コマンドで実行する必要がありそうです。\n   Hello, world 加筆 上で参考にしたチュートリアルの続きを進めたいのですが、 Your Rust Crate に書かれているコード\n src/lib.rs // Your code goes here! let p: web_sys::Node = document.create_element(\u0026#34;p\u0026#34;)?.into(); p.set_text_content(Some(\u0026#34;Hello from Rust, WebAssembly, and Webpack!\u0026#34;));   を追加してもコンパイルが通りません。\n これを解決するには The wasm-bindgen Guide の 1.9. web-sys: DOM hello world に書かれている通り、 web-sys の features 設定を行う必要があります。\n また、そもそもコード自体も間違っており features 追加した後コード修正も必要になります。これも上記ページが参考になります。\n Cargo.toml [dependencies.web-sys] version = \u0026#34;0.3.22\u0026#34; features = [\u0026#34;console\u0026#34;, \u0026#39;Document\u0026#39;, \u0026#39;Element\u0026#39;, \u0026#39;HtmlElement\u0026#39;, \u0026#39;Node\u0026#39;, \u0026#39;Window\u0026#39;]   src/lib.rs // Your code goes here! let window = web_sys::window().expect(\u0026#34;no global `window` exists\u0026#34;); let document = window.document().expect(\u0026#34;should have a document on window\u0026#34;); let body = document.body().expect(\u0026#34;document should have a body\u0026#34;); let val = document.create_element(\u0026#34;p\u0026#34;)?; val.set_text_content(Some(\u0026#34;Hello from Rust, WebAssembly, and Webpack!\u0026#34;)); body.append_child(\u0026amp;val)?;     サンプル実装リンク   https://github.com/yukihane/hello-rust/tree/master/wasm-app\n     ","description":"","id":160,"section":"blog","tags":["rust","wasm"],"title":"Hello, Wasm with Rust","uri":"https://yukihane.github.io/blog/202004/08/hello-wasm-with-rust/"},{"content":"  \u0026gt;Mozilla Firefoxに保存されているTwitterデータのキャッシュについて\n   というリリースが先日出されましたが、具体的にどういう問題なのかが書かれていないので調べてみました。\n The Mozilla Blog から詳細を辿れました。\n   What you need to know about Twitter on Firefox - The Mozilla Blog\n  Twitter Direct Message Caching and Firefox - Mozilla Hacks - the Web developer blog\n      発生している(た)事象:\n   ダイレクトメッセージがローカルキャッシュに保存されたままになるため、他者が(Twitterにログインしなくとも)ダイレクトメッセージを読み取れてしまう状況になる\n   原因:\n   キャッシュしないようにする指示が不適切だった(Web標準に則っておらず、一部ブラウザでのみ効果のある設定( Pragma: no-cache )を行っていた)。\n  今回のような場合は Cache-Control: no-store を指定しなければならない。\n      Cache-Control の\u0026#34;キャッシュ可能性\u0026#34;の節に説明がありますが、\n   no-cache  キャッシュコピーをリリースする前に、検証のために元のサーバーへリクエストを送ることをキャッシュに強制します。\n no-store  クライアントのリクエストであるかサーバーのレスポンスであるかにかかわらず、キャッシュを格納してはいけません。\n     no-cache は リクエストのみ をキャッシュしない指示に対し(ただしレスポンスもキャッシュしなくなるブラウザも存在する)、 no-store は リクエストもレスポンスも キャッシュしない指示なので後者を用いるべきだ、ということのようです。\n ","description":"","id":161,"section":"blog","tags":["security"],"title":"TwitterをFirefoxで利用した際のセキュリティ問題","uri":"https://yukihane.github.io/blog/202004/08/twitter-on-firefox-security-issue/"},{"content":"はじめに JSFを少し触ってみようと思ったのですが、もはやロストテクノロジーでどう始めるのかすらドキュメントを探すのが大変…\n 今回はかろうじてこちらを探し当てられました:\n   https://eclipse-ee4j.github.io/mojarra/\n   MojarraというのはWildFlyに組み込まれているJSF実装ですね。 今回はこちらを参考にしています。\n また、上記ドキュメントからリンクされていたページにも説明がありました:\n   The Web Tier - Java Platform, Enterprise Edition: The Java EE Tutorial\n   その他参考:\n   Maven Webapp Archetype\n  web.xmlのバージョン別DTD・XSDの宣言方法 | KATSUMI KOKUZAWA\u0026#39;S BLOG\n     雛形作成 mvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-webapp -DarchetypeVersion=1.4   でMavenプロジェクト作成。\n デフォルトだとJava1.7を用いる設定になっているので11に変更:\n pom.xml ... \u0026lt;properties\u0026gt; \u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;/project.build.sourceEncoding\u0026gt; \u0026lt;maven.compiler.source\u0026gt;11\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;11\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;/properties\u0026gt; ...   src/main/webapp/WEB-INF/web.xml で指定されているServletのバージョンが2.3と古いので4.0に更新します。また、前述参考ページにある通り .xhtml 拡張子を FacesServlet で処理するようにします:\n src/main/webapp/WEB-INF/web.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;web-app xmlns=\u0026#34;http://xmlns.jcp.org/xml/ns/javaee\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\u0026#34; version=\u0026#34;4.0\u0026#34;\u0026gt; \u0026lt;servlet\u0026gt; \u0026lt;servlet-name\u0026gt;facesServlet\u0026lt;/servlet-name\u0026gt; \u0026lt;servlet-class\u0026gt;javax.faces.webapp.FacesServlet\u0026lt;/servlet-class\u0026gt; \u0026lt;/servlet\u0026gt; \u0026lt;servlet-mapping\u0026gt; \u0026lt;servlet-name\u0026gt;facesServlet\u0026lt;/servlet-name\u0026gt; \u0026lt;url-pattern\u0026gt;*.xhtml\u0026lt;/url-pattern\u0026gt; \u0026lt;/servlet-mapping\u0026gt; \u0026lt;/web-app\u0026gt;     View, Model 実装 特に何も変わること無く 参考ページ にある通り src/main/java/com/example/Hello.java, src/main/webapp/hello.xhtml を作成。\n   ビルド\u0026amp;デプロイ 特に他のwarと変わりありません。\n 今回作成したソースをWildFlyにデプロイした場合、デフォルトだと次のURLへアクセスすれば参照できます: http://localhost:8080/jsf-sample/hello.xhtml\n   サンプル実装 https://github.com/yukihane/hello-java/tree/master/javaee/jsf-sample\n   ","description":"","id":162,"section":"blog","tags":["java","javaee","jsf"],"title":"Hello, JSF","uri":"https://yukihane.github.io/blog/202004/06/hello-jsf/"},{"content":" はじめに 前回はアプリケーションサーバにデバッガをアタッチする方法までを説明しました。\n 今回は、ソースコードを眺めているだけでは通ることを見つけにくい(のでbreakポイントを仕掛け忘れがちな)クラス/メソッドについてリストにしていきます。\n   ポイント: xmlファイルを見逃さないようにする 私自身もそうなのですが、 .java ファイルにはよく注意を向けていても、 .xml ファイルを見忘れていることがよくあります。\n しかし、Javaアプリケーションフレームワークのコア設定は .xml ファイルのみで行えることも多いです。現代はなまじアノテーションでも同様の設定ができるようになったため、余計に見落としがちになったようにも思われます。\n アプリケーションサーバ特有の .xml ファイルなんかもあり私は全て網羅することができませんが、とにかくどういう .xml ファイルがバージョン管理されているかは一度は全数確認してみた方が良いでしょう。\n 重要な .xml ファイルの典型的な一例:\n   アプリケーションサーバ特有の設定ファイル(例えばWiildFlyなら jobss-web.xml)\n  ejb-jar.xml (ejb)\n  web.xml (ほぼ全て)\n  faces-config.xml (JSF)\n  beans.xml (CDI)\n  applicationContext.xml (Spring Framework)\n   体系的でなく思いつくままになりますが、書いていきたいと思います。\n   どんな(オレオレ)フレームワークを使っているか: web.xml Javaにおいて、いわゆるオレオレフレームワークはServletコンテナを用いた Fornt Controller Pattern で実現されることが一般的です。\n そういったフレームワークとServletコンテナとの接続ポイントが、 web.xml で設定されます。ですので、 web.xml にかかれているクラス名を見れば利用されているフレームワークの種類がわかります。\n   Spring Framework(Spring MVC)\n  JSF(Mojarraの例)\n  CDI(Weldの例)\n   ちなみに、Java EEアプリケーションサーバ(例えばWildFLy)上で動作させる前提の場合、標準で組み込まれているJSFやCDIについては上記の設定が不要です。\n   起動時処理(等): @PostConstgruct javax.annotation.PostConstruct アノテーションは EJB, CDI, Spring Bean 等様々な箇所で有効です。\n Application-scoped や Singleton-scoped なBeanに付与することでアプリケーション起動時に1回処理するための実装として用いられていることがあります。\n 起動時に何かやっているはずだけどどこで実装されているんだろう…？と思ったときはソースコードを \u0026#34;@PostConsturct\u0026#34; で検索してみると何かわかるかもしれません。\n   Servlet fileter, Servlet listener 前述の通り、大半のJavaアプリケーションサーバはServletコンテナ上で実現されています。\n クライントからのイベントに対して何か共通処理を施したい場合、最も一般的なものが Filter(、同様にアプリケーションからのイベントを処理するのが Listener) になります。\n それぞれ、 web.xml の fileter, listener セクションで設定する他、アノテーション @WebFilter, @WebListener で設定することもできます。\n クライアントからのリクエストを処理しているメソッドで、何か前処理が挟まっているような挙動を示しているがどこで実装されているかわからない…というような場合はこれを検索してみると良いかもしれません。\n 常に有効化したい場合はアノテーションで、development/prodcutionといった環境で使い分けたい場合は web.xml で、というような設定が行われているようなアプリケーションも見たことがありますので、片方だけ見ても全数が把握できていない可能性がありますので気をつけてください。\n   JSF phase listener 自分ではJSF開発したことがなく、JSFを使っているアプリケーションをデバッグしたことがあるだけなので詳細を説明することができませんが、前述Servlet listnerのJSF版のようなものです。特定のタイミングでlistnerがイベントを受けることができるので、そこで実行したい処理を実装します。\n これは faces-config.xml で設定しますのでこのファイルを見ればクラスが判明します。\n   インターセプタ インターセプタは特定のメソッドを実行する前後に、事前に設定しておいた処理を挟める機構です。\n これはフレームワークごとに様々なバリエーションがあるので、そのフレームワークについて知っていないと見つけるのが難しい部類になります。クラスの命名は慣例的に\u0026#34;Interceptor\u0026#34;を接尾に付与することが多いので、これが手がかりになるかもしれません。\n   ","description":"","id":163,"section":"blog","tags":["java","spring","javaee"],"title":"いきなりJavaアプリケーションサーバの保守を任されることになった人のためのチートシート(2)","uri":"https://yukihane.github.io/blog/202004/03/java-application-frameworks-cheat-sheet2/"},{"content":" 目的 Javaを用いた開発にある程度慣れている場合でも、初めてアプリケーションフレームワーク上で開発するとなると戸惑うことがあります。\n ここでは、ある程度Javaに対する知識が、Java EE/Spring Bootアプリケーションの保守を担当になって、ローカルで実行する、そしてデバッグを行おうとした際に引っかかりそうなポイントをまとめていきたいと考えています。\n 説明に用いているコードは次になります:\n   https://github.com/yukihane/java-application-frameworks-cheat-sheet\n     アプリケーションをデプロイする ローカル実行環境でアプリケーションを実行する場合、アプリケーションサーバにアプリケーションをデプロイする必要があります。\n デプロイの方法はアプリケーションサーバのツールセットとしてMavenプラグインとして提供されていたり、IDEの機能として提供されていたり様々あります。\n ところでデプロイというのは何をやっているかというと、アプリケーションファイル( .war だったり .jar だったりします)をアプリケーションサーバの所定のディレクトリにコピーしているだけです。\n ですので、専用ツールやコマンドラインを使わずとも、デプロイすることは可能です。\n なお、Spring BootやWildFly Thorntailは jar の中にアプリケーションサーバー機能を組み込んでいるので、デプロイ操作が不要でそのまま jar ファイルを実行できるようになっています。\n mvn clean package -pl servlet-sample   コマンドを実行すると、アプリケーション servlet-sample/target/servlet-sample.war がビルドできますので、これをデプロイして起動してみましょう。\n Tomcat にデプロイする Tomcatのデプロイディレクトリは webapps なのでこの下に servlet-sample.war をコピーし、 bin/startup.sh コマンドを実行します。そして http://localhost:8080/servlet-sample/ にアクセスしてみます。 終了するには bin/shutdown.sh コマンドを実行します。\n  WildFly にデプロイする WildFlyのデプロイディレクトリは standalone/deployments なのでこの下に servlet-sample.war をコピーし、 /bin/standalone.sh コマンドを実行します。して http://localhost:8080/servlet-sample/ にアクセスしてみます。終了するには Ctrl + C です。\n    デバッガを接続しステップ実行できるようにする アプリケーションサーバをデバッガ接続可能状態にするオプションをつけて起動した上で、IDEからデバッガをアタッチする、というのが基本的なデバッガ利用法になります。いわゆる「リモートデバッグ」という形態になります。\n これもまた、IDE組み込み機能でアプリケーションを起動させたりする方法もあったり、現場で実際にどう行っているかは様々だと思います。\n アプリケーション起動手順はアプリケーションサーバごとに違うのでリファレンスなど記載箇所を検索してください(あるいは、起動スクリプト内の記述がヒントになります(ex. Tomcat, WildFly))。\n デバッガのアタッチ方法も IDE ごとに異なるのでこちらも検索が必要です。\n Tomcat へ Eclipse でデバッガをアタッチする Tomcatでリモートデバッグできるようにする設定は次に記載があります:\n   https://cwiki.apache.org/confluence/display/TOMCAT/Developing#Developing-Q1\n   まず、servlet-sample.war をデプロイし、Tomcatに上記に記載されているJVMオプションをつけて起動します:\n JAVA_OPTS=\u0026#39;-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n\u0026#39; bin/startup.sh   あるいは、これもリンク先に書いていますが、 catalina コマンドにデバッグ可能オプションをつけて起動するのが短くて良いかもしれません。\n bin/catalina.sh jdpa start   これで 8000番ポートでデバッガ接続できる状態で起動しました。\n 続いてEclipseからアタッチします。\n Eclipseで servlet-sample プロジェクトをインポートし、Package Explorer で右クリック、 Debug As \u0026gt; Debug Configurations…​ を選択します。\n   表示されたダイアログで \u0026#34;Remote Java Application\u0026#34; を右クリックし \u0026#34;New Configuration\u0026#34; を選択します。\n 新しくデバッグのconfigurationが\u0026#34;servlet-sample\u0026#34;という名前で作成されますのでこれを編集していきます…が、今回はこのままの設定で動きますので何も触りません。\n ダイアログ右下の\u0026#34;Debug\u0026#34;ボタンを押してアタッチします。\n 以上でデバッグ環境が整いました。 ServletByAnnotationクラスにbreakポイントを設定して http://localhost:8080/servlet-sample/annotation へアクセスすることで実行が一時停止することを確認してみましょう。\n デバッガをデタッチする場合はDebugパースペクティブに表示されている \u0026#34;Disconnect\u0026#34; ボタンを押します。\n    WildFly へ Eclipse でデバッガをアタッチする WildFlyのリモートデバッグ方法の記述は次にあります [1]:\n   https://docs.wildfly.org/19/Getting_Started_Developing_Applications_Guide.html#debugging-project-with-intellij-and-as7\n   servlet-sample.war をデプロイした後、次のコマンドでWildFlyを起動します:\n bin/standalone.sh --debug   (Tomcatとは異なり)デフォルトでは8787番ポートでデバッガがアタッチできるような状態で起動します。\n 続いてEclipseからアタッチします。手順の詳細は前述Tomcatの節を参照してください。ただし1点気をつけるべきは、デフォルト設定では8000番ポートへ接続しようとするので、 \u0026#34;Connect\u0026#34; タブの \u0026#34;Connection Properties\u0026#34; 設定の \u0026#34;Port\u0026#34; 値を 8787 に変更してください。\n 実行確認、デタッチ方法はTomcat節に記載した手順と同じです。\n  Spring Boot アプリケーションへ Eclipse をアタッチする Spring Boot アプリケーションは前述の通りデプロイを必要とせず単独で実行できます。通常の実行コマンドにデバッグオプションを付与すれば良いです。\n spring-boot-sample プロジェクトをビルドします:\n mvn clean package -pl spring-boot-sample   作成された spring-boot-sample-0.0.1-SNAPSHOT.jar をデバッガアタッチ可能な状態で起動します:\n java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000 \\ -jar spring-boot-sample/target/spring-boot-sample-0.0.1-SNAPSHOT.jar   Eclipseからアタッチする方法は前述Tomcat節と同じです。\n また、Spring Bootアプリケーションにははじめから Spring Boot Maven Pluginが組み込まれているため、こちらから起動することになるかもしれません。その場合はリンク先を参照してください。\n  その他のアプリケーションサーバ、IDEを利用する ここまで書いてきて、次のサイトでも同じことについて言及しているの気づきました。WebLogic, Glassfish, Jetty, IntelliJなどについての言及もあるようでしたので参照してください:\n   https://www.baeldung.com/spring-debugging\n       1. 久しぶりにWildFlyのリファレンス見ましたが、以前にも増して混沌としていますね…   ","description":"","id":164,"section":"blog","tags":["Java","javaee","spring"],"title":"いきなりJavaアプリケーションサーバの保守を任されることになった人のためのチートシート(1)","uri":"https://yukihane.github.io/blog/202004/02/java-application-frameworks-cheat-sheet/"},{"content":"とあるMavenプロジェクトを mvn clean install しようとしたところ、次のエラーになり正常終了しませんでした。\n [WARNING] Rule 0: org.apache.maven.plugins.enforcer.BannedRepositories failed with message: Current maven session contains banned repository urls, please double check your pom or settings.xml: central - http://my.internal.repo/xxx snapshots - http://my.internal.repo/yyy   原因は mvn help:effective-pom 実行結果を見て理解したのですが、どうも http:// だとエラーになるようで、 https:// を使え、ということのようです。 公式リファレンスで該当するのはこれでしょうか:\n   https://maven.apache.org/enforcer/enforcer-rules/bannedRepositories.html\n   そしてスキップするための説明はこちら:\n   https://maven.apache.org/enforcer/maven-enforcer-plugin/enforce-mojo.html#skip\n   enforcer.skip プロパティを true にすれば良いようです。\n mvn clean install -Denforcer.skip=true   ","description":"","id":165,"section":"blog","tags":["java","maven"],"title":"Maven Enforcer Pluginの実行をスキップする","uri":"https://yukihane.github.io/blog/202003/30/skip-maven-enforcer-plugin/"},{"content":"(もしかしたら以前どこかで書いたかも…)\n MyBatisでストアドプロシージャを実行する必要に迫られたことがありましたが、オフィシャルリファレンスを見てもどこにもストアドプロシージャについて記述がないので困った記憶をふと思い出しました。\n 実際には、MyBatisのテストケースにストアドプロシージャは登場します。\n src/test/java/org/apache/ibatis/submitted/sptests/SPMapper.xml  \u0026lt;!-- Important things for stored procedures: 1. Must set the statement type to CALLABLE 2. Must use the JDBC standard escape sequence for stored procedures: {call xxx (parm1, parm2)} 3. Must set the MODE of all parameters (IN, OUT, INOUT) 4. All IN, OUT, and INOUT parameters must be a part of the parameterType or parameterMap (discouraged). The only exception is if you are using a Map as a parameter object. In that case you do not need to add OUT parameters to the map before calling, MyBatis will add them for you automatically. 5. resultType or resultMap (more typically) is only used if the procedure returns a result set. IMPORTANT: Oracle ref cursors are usually returned as parameters, NOT directly from the stored proc. So with ref cursors, resultMap and/or resultType is usually not used. --\u0026gt; \u0026lt;select id=\u0026#34;adderAsSelect\u0026#34; parameterType=\u0026#34;org.apache.ibatis.submitted.sptests.Parameter\u0026#34; statementType=\u0026#34;CALLABLE\u0026#34;\u0026gt; {call sptest.adder( #{addend1,jdbcType=INTEGER,mode=IN}, #{addend2,jdbcType=INTEGER,mode=IN}, #{sum,jdbcType=INTEGER,mode=OUT} )} \u0026lt;/select\u0026gt; \u0008(後略)   ","description":"","id":166,"section":"blog","tags":["mybatis"],"title":"MyBatisでストアドプロシージャを実行する","uri":"https://yukihane.github.io/blog/202003/10/stored-procesure-with-mybatis/"},{"content":"sudo systemctl edit td-agent   で編集画面を開き、次を記述:\n [Service] Environment=\u0026#34;HTTP_PROXY=http://myproxy.example.com:8080\u0026#34;   ","description":"","id":167,"section":"blog","tags":["fluentd"],"title":"td-agentにプロキシを設定する","uri":"https://yukihane.github.io/blog/202003/09/td-agent-with-proxy/"},{"content":"https://ja.stackoverflow.com/a/63099/2808 を見ていて気づいたのですが、 実質final というのは脳内(コンパイラ)で final を補完してくれる、というような処理が行われるわけではないのですね。\n 下記コード中の(2) と (3) の違いは、連結前の String 変数を final 付きで宣言しているか否かだけですが、結果がお互い異なっています。\n String literal_neko = \u0026#34;ネコ\u0026#34;; String literal_ne_ko = \u0026#34;ネ\u0026#34; + \u0026#34;コ\u0026#34;; // (1) https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.10.5 System.out.println(\u0026#34;literal_neko == literal_ne_and_ko: \u0026#34; + (literal_neko == literal_ne_ko)); // true // (2) finalなStringの連結: true final String final_ne = \u0026#34;ネ\u0026#34;; final String final_ko = \u0026#34;コ\u0026#34;; String final_ne_and_final_ko = final_ne + final_ko; System.out.println(\u0026#34;literal_neko == final_ne_final_ko: \u0026#34; + (literal_neko == final_ne_and_final_ko)); // true // (3) 非final(だが実質final)なStringの連結: false String ne = \u0026#34;ネ\u0026#34;; String ko = \u0026#34;コ\u0026#34;; String ne_and_ko = ne + ko; System.out.println(\u0026#34;literal_neko == ne_and_ko: \u0026#34; + (literal_neko == ne_and_ko)); // false   ","description":"","id":168,"section":"blog","tags":["java"],"title":"finalと実質finalの違い","uri":"https://yukihane.github.io/blog/202002/21/effectively-final-difference/"},{"content":"MyBatisの設定項目として useActualParamName というものがあります。マニュアルの説明によると、\n  ステートメントの引数を参照する際、メソッドシグネチャで宣言されている名前で参照できるようにします。 このオプションを有効にする場合、プロジェクトを Java 8 （コンパイラオプション -parameters 付き）でコンパイルする必要があります。 (導入されたバージョン: 3.4.1)\n  — 設定 \u0026gt; settings   もう少し具体的には、\n  3.4.3 以降では、引数名を指定することによって arg 要素を順不同で記述できるようになりました。引数を名前で指定するためには、各引数に @Param アノテーションを追加するか、プロジェクトを \u0026#39;-parameters\u0026#39; オプション付きでコンパイルし、useActualParamName に true （デフォルト値です）を設定します。\n  — Mapper XML ファイル \u0026gt; constructor   とあります。説明されているセクションが期待するものと違うのでわかりにくい…\n ちなみに @Param の意味を調べようと検索すると、説明には次のように書かれており、 useActualParamName という機能があることに気づかないので不親切に感じます。\n  Mapper メソッドが複数の引数を取る場合、このアノテーションを付加することで各引数を名前で参照できるようになります。アノテーションがない場合、各引数は位置を表す数字で #{param1}, #{param2} のように参照します（RowBounds 引数はカウントしません）。 引数に @Param(\u0026#34;person\u0026#34;) というアノテーションを付加すると、この引数は #{person} として参照できるようになります。\n  — Java API \u0026gt; Mapper アノテーション   閑話休題。 この useActualParamName は引用部にある通りデフォルトで true ですが、実際に使うには -parameters オプション付きでコンパイルする必要があります。 この -parameters オプションはどうやって付ければ良いのでしょうか？\n …というのを調べようとしたのですが、Spring Boot の場合、 spring-boot-starter-parent で -parameters オプションが有効になるような設定が為されている ので、明示的に設定しなくても利用できます。\n ","description":"","id":169,"section":"blog","tags":["spring-boot","mybatis"],"title":"Spring Bootでは `-parameters` オプションは有効化されている","uri":"https://yukihane.github.io/blog/202002/20/spring-boot-compiler-parameters/"},{"content":"追記: Hello Project Panama, on Java17 に Java17 版を記載しました。\nはじめに 今個人的にすごく知りたいのはこちらです。ご回答よろしくお願いします！！！！\n 動的確保したメモリー領域の解放戦略 - スタック・オーバーフロー  (質問読んでもらえれば(というかタイトル見てもらえれば)わかると思うんですけど、別に Java がわからん、とか Rust がわからん、という質問では無いです。念の為。もちろん Java も Rust もわからない(多分コード正しくない)ですけどそれは別の話。)\n目的 プログラミング言語 Rust を勉強したいと考えているのですが、自転車本を頭からスルッと読んだは良いものの全然身についていなくて、取り敢えず何か応用アプリ作ってみるか！と思い立ちました。\n…思い立ったものの、Rust で GUI 作るのはハードル高そう(だし、やりたいことの本質から逸れていく)なので GUI 部分は既にある知識でなんとかしようと考えました。\nここで、今どきの Web フロントエンダーの皆様であれば Electron(powered by Node.js)なんかを選択肢に入れるところかと思いますが、自分はそっち方面知らないので Java の Swing でやってみました。\nせっかくなんで Project Panama(プロパナ)を使ってみました。\n全体コード https://github.com/yukihane/stackoverflow-qa/tree/master/so62868\nにあります。\nRust(1.41.0)と Java(14-panama)を使っています。\nビルド方法は build.sh 参照のこと。\n実装 ハローワールド案件です。Java で処理を要求\u0026amp;結果を受け取る、Rust では要求された処理を行って結果を返します。\nまず Rust 側。nameを受け取って文字列連結してmessageとして返します。\n1 2 3 4 5 6 7 8 9  #[no_mangle]pubunsafeextern\u0026#34;C\u0026#34;fn greet(name: *constc_char,message: *mutc_char,count: size_t){letname=CStr::from_ptr(name);letname=name.to_str().unwrap();lettext=format!(\u0026#34;こんにちは、{}！\u0026#34;,name);lettext=CString::new(text).unwrap();message.copy_from(text.as_ptr(),count);}  上の関数に対応する C ヘッダファイルを生成します。\ncbindgenというツールで自動生成できました。\ncbindgen -l c -o bridges/greeter.h librust  自動生成したそのままでも使えると思うのですが、冗長だと思ったので、今回は不要部分を削って commit してしまっています。\n続いてヘッダファイルと cdylib からjextractを用いてプロパナ の glue 部分を自動生成します。\n1 2 3 4 5  jextract \\ -L librust/target/release/ \\ -l greeter \\ -o bridges/greeter.jar \\ ./bridges/greeter.h   上記で生成された jar を利用して Rust 呼び出し部分を Java で実装します。\n1 2 3 4 5 6 7 8 9 10 11 12 13  final JButton greetButton = new JButton(\u0026#34;greet\u0026#34;); greetButton.addActionListener((e) -\u0026gt; { final Scope scope = Scope.globalScope(); final Pointer\u0026lt;Byte\u0026gt; name = scope.allocateCString(nameField.getText()); final long size = 256; final Pointer\u0026lt;Byte\u0026gt; message = scope.allocateArray(NativeTypes.UINT8, size).elementPointer(); greeter_lib.greet(name, message, size); final String retval = Pointer.toString(message); outputField.setText(retval); });   以上。\n","description":"","id":170,"section":"blog","tags":["java","rust"],"title":"Hello Project Panama","uri":"https://yukihane.github.io/blog/202002/11/hello-project-panama/"},{"content":"RustプログラムのGUIにElectronを使うことを考えています。\n その前調査としてNodeのネイティブモジュールとしてRustプログラムを利用できるようにする Neon というツールを使ってHello, worldしてみることにしました。\n インストール 前提環境 今回、先立ってインストールしていた関連プロダクトは次のとおりです。\n   Ubuntu 18.04\n  Node 12.14.1 (nvm でインストール)\n  Yarn 1.21.1 (apt でインストール)\n  Rust 1.41.0 (rustup でインストール)\n   その他、意識していませんが、Python2.7(not 3.x)、GCCなども必要なようです。詳しくは Getting Started参照。\n  Neon インストール yarn global add neon-cli      \u0026#34;Hello World!\u0026#34; の作成と実行 オフィシャルドキュメント の通り進めていきます。\n プロジェクトを生成して実行してみる neon new thread-count cd thread-count neon build --release   これでテンプレートのビルドができました。\n 実行するには、これまたリファレンスの通りですが、\n node   コマンドを実行して起動するREPLで\n require(\u0026#39;.\u0026#39;)   と入力します。あるいは、 neon new thread-count コマンドを打ったときに出ていたメッセージの通り、 node コマンドに -e オプションで実行文を渡す、つまり\n node -e \u0026#39;require(\u0026#34;.\u0026#34;)\u0026#39;   でもOKです。\n さてここで require(\u0026#39;.\u0026#39;) は何をやっているんだ、ということなんですが、これはNodeのリファレンス Modules \u0026gt; All Together…​の \u0026#34;LOAD_AS_DIRECTORY(X)\u0026#34;セクションに書いてあることのようです。\n 具体的には、引数に指定したパスを所定のルールで解釈していって、今回の場合はカレントディレクトリにある package.json の main フィールドに指定されているファイル lib/index.js を実行しているようです。そこで、このファイルを見てみます。\n lib/index.js var addon = require(\u0026#39;../native\u0026#39;); console.log(addon.hello());   ここでも require が出てきました。今度は ../native が指定されています。 ここでは先程のリファレンスの、 \u0026#34;LOAD_INDEX(X)\u0026#34; の3番、 native/index.node がバイナリアドオンとしてロードされる、ということのようです。\n Neonのリファレンスに戻ると、次のように説明があります:\n    native/index.node: the native module itself, which is loaded by lib/index.js.\n      Rustでロジックを実装する native ディレクトリをRustプロジェクトルートディレクトリとみなして作業すれば良さそうです。\n 1点注意があるとすれば、自動生成された Cargo.toml に edition の指定が無かったため、自分の見慣れない exrern が現れたりして？？？となってしまいました。 edition = \u0026#34;2018\u0026#34; は即追加しておきましょう。\n    ","description":"","id":171,"section":"blog","tags":["rust","neon"],"title":"Nodeのnative moduleをRustで書いてみる(Neon)","uri":"https://yukihane.github.io/blog/202002/01/hello-rust-neon/"},{"content":"要旨 fluent-plugin-bigquery の README を読んでいると、 request_timeout_sec のデフォルト値が nil になっている(その下の request_open_timeout_sec には 60 が設定されているのに)のが気になりました。\n 結論としては、 request_timeout_sec は最終的に httpclient の send_timeout 及び receive_timeout パラメータとして利用され、未設定の場合は そこで指定されているデフォルト値である send_timeout = 120, receive_timeout = 60 が採用されるようです。\n   調査作業ログ request_timeout_sec のデフォルト値が nil なので未設定だと無期限に待ち続けるのかと危惧し、実装を見てみることにしました。(ちなみに私はRuby経験は0ですので、これが妥当な調査手順かはわかりません。)\n とりあえずGitHub上で検索してみると out_bigquery_base.rbで Fluent::BigQuery::Writer.new の引数として渡されていることがわかりました。\n Fluent::BigQuery::Writer というのはおそらく bigquery/writer.rbで定義されている Writer クラスのことだと当たりをつけました。また、Rubyの new は initialize メソッドを呼び出すように入門ページに書かれていたので initialize の処理を見てみると Google::Apis::BigqueryV2::BigqueryService を利用しているようなコードがありました。 read_timeout_sec 及び send_timeout_sec フィールドに設定されているようです。\n この文字列でGoogle検索してみると google-api-ruby-clientがヒットしました。 client_options の \u0026#34;client\u0026#34; とは、どうも HTTPClientのことっぽい、 require で 階層なし になっているということはRubyの標準モジュールなのか？と検索してみると StackOverflowの回答から ここに行き当たりました。\n   ","description":"","id":172,"section":"blog","tags":["fluentd"],"title":"`fluent-plugin-bigquery` のパラメータ `request_timeout_sec` 、未設定の場合はどうなるの？","uri":"https://yukihane.github.io/blog/202001/30/fluentd-request_timeout_sec-default/"},{"content":"要旨 JSONを返してくるのだけれどMIME typeが text/plain;charset=Windows-31J なレスポンスを、RestTemplateで扱いたい。\n @GetMapping(produces = \u0026#34;text/plain;charset=Windows-31J\u0026#34;) public String response() { return \u0026#34;{\\\u0026#34;text\\\u0026#34;: \\\u0026#34;こんにちは世界\\\u0026#34; }\u0026#34;; }   対応としては、 JSonFactory#createParser(InputStream) をオーバライドして InputStreamReader 用のパーサが利用されるようにすれば良い。\n @RequiredArgsConstructor public class NonUtf8JsonFactory extends JsonFactory { private static final long serialVersionUID = 6370213897913075391L; @NonNull private final Charset charset; @Override public JsonParser createParser(final InputStream in) throws IOException, JsonParseException { return createParser(new InputStreamReader(in, charset)); } }   上記のオブジェクトを ObjectMapper のコンストラクタで渡す:\n final Charset win31j = Charset.forName(\u0026#34;Windows-31J\u0026#34;); final ObjectMapper mapper = new ObjectMapper(new NonUtf8JsonFactory(win31j)); final MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter(mapper); converter .setSupportedMediaTypes(Arrays.asList(new MediaType(MediaType.TEXT_PLAIN, win31j))); final RestTemplate rt = restTemplateBuilder .additionalMessageConverters(Arrays.asList(converter)) .build();     問題再現 JsonSjisExampleApplication.java (hash: b0e5ae3)\n このコードを実行する\n mvn spring-boot:run   と、次のようなエラーになります:\n java.lang.IllegalStateException: Failed to execute ApplicationRunner ... Caused by: org.springframework.web.client.HttpClientErrorException$NotAcceptable: 406 : [{\u0026#34;timestamp\u0026#34;:\u0026#34;2020-01-27T13:56:35.979+0000\u0026#34;,\u0026#34;status\u0026#34;:406,\u0026#34;error\u0026#34;:\u0026#34;Not Acceptable\u0026#34;,\u0026#34;message\u0026#34;:\u0026#34;Could not find acceptable representation\u0026#34;,\u0026#34;trace\u0026#34;:\u0026#34;org.springframework.web.HttpMediaTypeNotAcceptableExcept... (4837 bytes)] at org.springframework.web.client.HttpClientErrorException.create(HttpClientErrorException.java:121) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE] at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:170) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE] at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:112) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE] at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE] at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:785) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE] at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:743) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE] at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:677) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE] at org.springframework.web.client.RestTemplate.getForObject(RestTemplate.java:318) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE] at com.example.jsonsjisexample.JsonSjisExampleApplication.run(JsonSjisExampleApplication.java:44) ~[classes/:na] at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:775) ~[spring-boot-2.2.4.RELEASE.jar:2.2.4.RELEASE] ... 10 common frames omitted   この 406 エラーは、コンバータのメソッド setSupportedMediaTypes で text/plain;Windows-31J を設定することで対応できます。 コード差分(hash: 31c21):\n final MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter(); converter.setSupportedMediaTypes(Arrays.asList(new MediaType(MediaType.TEXT_PLAIN, Charset.forName(\u0026#34;Windows-31J\u0026#34;)))); final RestTemplate rt = restTemplateBuilder .additionalMessageConverters(Arrays.asList(converter)) .build();   この対応を入れたコードを実行してみます。すると別のエラーが出るようになります。\n Caused by: com.fasterxml.jackson.core.JsonParseException: Invalid UTF-8 start byte 0x82 at [Source: (PushbackInputStream); line: 1, column: 12] at com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1840) ~[jackson-core-2.10.2.jar:2.10.2] at com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:712) ~[jackson-core-2.10.2.jar:2.10.2] at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidInitial(UTF8StreamJsonParser.java:3569) ~[jackson-core-2.10.2.jar:2.10.2] at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidChar(UTF8StreamJsonParser.java:3565) ~[jackson-core-2.10.2.jar:2.10.2] at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString2(UTF8StreamJsonParser.java:2511) ~[jackson-core-2.10.2.jar:2.10.2] at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishAndReturnString(UTF8StreamJsonParser.java:2437) ~[jackson-core-2.10.2.jar:2.10.2] at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText(UTF8StreamJsonParser.java:293) ~[jackson-core-2.10.2.jar:2.10.2] at com.fasterxml.jackson.databind.deser.std.StringDeserializer.deserialize(StringDeserializer.java:35) ~[jackson-databind-2.10.2.jar:2.10.2] at com.fasterxml.jackson.databind.deser.std.StringDeserializer.deserialize(StringDeserializer.java:10) ~[jackson-databind-2.10.2.jar:2.10.2] at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129) ~[jackson-databind-2.10.2.jar:2.10.2] at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:369) ~[jackson-databind-2.10.2.jar:2.10.2] ... 21 common frames omitted   これが今回の問題の核です。\n   問題解説 RFC7159 - 8.1.Character Encodingでは、JSONの文字エンコーディングは UTF-8, UTF-16, UTF-32 のいずれかであることが求められており、Jackson実装はこれに基づいて行われているようです [1]。\n   Charset autodetection fail #222\n   具体的には、 InputStream を上記3エンコーディングのうちいずれかであるとみなしてパースするため、それ以外のエンコーディングだった場合、期待通りパースできません。それが上記のエラーです。\n この問題を回避するためには、 InputStream を引数に取るパーサを利用せず、代わりに Reader を引数に取るパーサを利用するようにします。これが冒頭の回避策です。\n public JsonParser createParser(final InputStream in) { return createParser(new InputStreamReader(in, charset)); }   問題に対応した最終的なコード(hash: ce596e)\n    1. ちなみにより新しい RFC8259 では、UTF-8でなければならない、と更に制限されています。   ","description":"","id":173,"section":"blog","tags":["spring-boot","jackson"],"title":"Spring BootのRestTemplateで text/plain;Windows-31J なRESTレスポンスを処理する","uri":"https://yukihane.github.io/blog/202001/26/resttemplate-with-illformed-json/"},{"content":"はじめに 年の瀬にスクレイピングしたくなって Rust 勉強し始めたけれど、直前に reqwest ライブラリに更新が入ったみたいでコピペコーディングが阻まれた。\n知っとかないといけなかったこと  今回の更新 reqwest 0.10.0 で async/await がデフォルトになった(ので従来のサンプルコードは動かなくなった)。 Cargo には feature flag(feature toggle) 機能があって、reqwest やら(オフィシャルサンプルで利用している)tokio やらもこれを利用している。  (async/await を使わない、従来の)blocking 版をどうやって使うのか全然わからなかったけれど、features で明示的に指定する必要があった。 オフィシャルサンプルを動かすにしてもこれを知っておかないといけなかった。   tokioを用いる必要があった。  自分が見ていた(古い)サンプルではfuturesのfutures::executor::block_onを利用していたので当初それをコピペったのだが次のエラーが出た: \u0026lsquo;not currently running on the Tokio runtime.\u0026rsquo;, async/await 構文が標準に取り込まれた、ということは非同期ランタイムを別のものにすげ替えることが可能、みたいなイメージを持っていたのだが、そうではなさそう。 おそらく自転車本の補遺が言うところの「非同期エコシステム」が関係する話題。    サンプルを動かすには https://github.com/seanmonstar/reqwest\nuse std::collections::HashMap; #[tokio::main] async fn main() -\u0026gt; Result\u0026lt;(), Box\u0026lt;dyn std::error::Error\u0026gt;\u0026gt; { let resp: HashMap\u0026lt;String, String\u0026gt; = reqwest::get(\u0026quot;https://httpbin.org/ip\u0026quot;) .await? .json() .await?; println!(\u0026quot;{:#?}\u0026quot;, resp); Ok(()) } を動かすためには、 Cargo.toml の [dependencies] セクションに次のように書く必要があった。\n[dependencies] reqwest = {version = \u0026quot;0.10.0\u0026quot;, features=[\u0026quot;json\u0026quot;]} tokio = {version = \u0026quot;0.2.6\u0026quot;, features = [\u0026quot;macros\u0026quot;]} また、blocking 版\nuse std::collections::HashMap; fn main() -\u0026gt; Result\u0026lt;(), Box\u0026lt;dyn std::error::Error\u0026gt;\u0026gt; { let resp: HashMap\u0026lt;String, String\u0026gt; = reqwest::blocking::get(\u0026quot;https://httpbin.org/ip\u0026quot;)? .json()?; println!(\u0026quot;{:#?}\u0026quot;, resp); Ok(()) } は、\n[dependencies] reqwest = {version = \u0026quot;0.10.0\u0026quot;, features=[\u0026quot;json\u0026quot;,\u0026quot;blocking\u0026quot;]} であった。\nちなみに reqwest の feature flag 一覧は\n https://docs.rs/reqwest/0.10.0/reqwest/#optional-features  にある。\n","description":"","id":174,"section":"blog","tags":["rust"],"title":"reqwest使おうとしたけどよくわからん","uri":"https://yukihane.github.io/blog/202001/01/rust-reqwest/"},{"content":"はじめに 他の言語で言うところの\u0026#34;ライブラリ\u0026#34;は、Rustでは \u0026#34;ライブラリクレート\u0026#34;(library crate) と呼ぶようです。\n またcrateはmoduleシステムと地続きになっているようで、よくセットで説明されているように見えます。\n   参考   Rustのモジュールの使い方 2018 Edition版 - κeenのHappy Hacκing Blog\n  mod.rs は過去の遺物らしい。この文章を見て改めて TRPL を見直してみたところ、確かに mod.rs という単語は登場しなくなっていた。(補足: cargo build した時のエラー対処ヒントには登場していた)\n     7. Managing Growing Projects with Packages, Crates, and Modules - The Rust Programming Language\n  日本語訳 と異なりcrateという単語がタイトルに含まれているが、少なくとも現時点ではcrateに関する記述が無い(!)。日本語訳では第1版の 4.25. クレートとモジュール に存在する。\n     11.1. Library - Rust by Example\n  2.2. Creating a New Package - The Cargo Book\n     実行 $ cargo new communicator --lib $ cd communicator     ","description":"","id":175,"section":"blog","tags":["rust"],"title":"Rustでライブラリを作成する","uri":"https://yukihane.github.io/blog/202001/rust-create-library/"},{"content":"RestTemplateBuilder  RestTemplate は Spring Framework(spring-web)だけれども RestTemplateBuilder は Spring Boot。 Java の世界の なんちゃらBuilder (StringBuilderとか Lombok のBuilderアノテーションとか、ざっくり総称で Effective Java 版 Builder とでも呼ぶべきか)の使い方は、「まず builder のインスタンスを生成します」から始まるので RestTempalteBuilder もそれだと思っていた。  つまり、このクラスインスタンスは Spring Boot のデフォルト状態でインジェクション可能だけれども、このインジェクションされたRestTempalteBuilderインスタンスのスコープは(Spring のデフォルトであるところの)singleton-scope ではない と思っていた。  だってbuilderインスタンスが singleton-scope なら、あるbeanで builderに設定したものが他所のbeanにも波及しちゃうじゃない。     けどResttemplateAutoConfigurationの Bean 定義部分どう見ても singleton-scope にしか見えない。何か自分の知らない記法(あるいは暗黙的解釈)がなにかまだあるのか？ また 何か Spring マジックが発動しているのか…？  と思ってたけど、RestTemplateBuilderの状態設定メソッド(このへん)見て気づいた、 設定メソッドの中で new RestTemplateBuilder() やっとるんかーい！\nインジェクションのタイミングじゃなくて builder にビルド設定を渡すタイミングで新しいインスタンスに成り代わってたのね…\n関連リンク  14. Calling REST Services with RestTemplate - Spring Boot Features  余談 Effective Java 版 Builder だとbuilderに情報を設定する際に、builderインスタンスを使い回すもよし\nvar builder = new StringBuilder(); builder.append(\u0026quot;Hello, \u0026quot;); builder.append(\u0026quot;world!\u0026quot;); builder.toString(); 戻り値を使ってメソッドチェーンしてもよし\nnew StringBuilder().append(\u0026quot;Hello, \u0026quot;).appned(\u0026quot;world!\u0026quot;).toString(); だけれども、 RestTemplateBuilder は前者を許してはくれないということか。\n","description":"","id":176,"section":"blog","tags":["spring-boot"],"title":"RestTemplateBuilderに関する覚書","uri":"https://yukihane.github.io/blog/201912/10/resttemplatebuilder/"},{"content":"はじめに: 試した環境 Windows10 の現時点での最新安定版 Google Chrome および Firefox を用いました。\n Google Chrome 78.0.3904.108 Firefox 70.0.1  また実行に際しては、キャッシュ等の影響を避けるため、Chrome ではゲストモード、Firefox では今回新規作成したプロファイルで確認しました。\nやってみよう Google Chrome の URL バー(Omnibar)に https://hatena.ne.jp/ と入力してエンターを押してみよう！\nトップページが表示されましたか？\nあちゃー！😣 表示されちゃいましたか！😵 それでは次に Firefox で同じことをやってみます。\nあれ ❔Chrome と Firefox で表示されてるものが違うんですけど ❔❔🤔🤔 どっちが正しいの ❔❔❔😟😟😟 あっあれだ。Google が URL を殺すって言ってたやつだ。Omnibar に殺された URL を掘り返してみれば何かわかるかも！！！(Omnibar のクリックを繰り返しつつ)\nはい出たーやっぱりねー https://www. 隠れてたーそら Firefox と違う URL なんだから違う内容表示されるわー\nってなんで入力した URL と違うページ表示してんねん いやいやおつちけそれこそよくある302でリダイレクトさせてるやつやろあれでもじゃあ Firefox がリダイレクトされてないのはなんでなんだ\nそうだ DevTools、行こう はい 302 が出て…\nなーい！なんや \u0026ldquo;(failed)\u0026rdquo; て！ (余白)\n解決編 いやまあ、DevTools の console を見ればわかることなんですけれども。\n Redirecting navigation hatena.ne.jp -\u0026gt; www.hatena.ne.jp because the server presented a certificate valid for www.hatena.ne.jp but not for hatena.ne.jp. To disable such redirects launch Chrome with the following flag: \u0026ndash;disable-features=SSLCommonNameMismatchHandling\n 関連する issue は多分これ:\n Issue 507454: Implement Redirect for the WWW Subdomain Mismatch case  証明書見てサブドメイン違うかったら勝手に証明書に書いてある方にリダイレクトするよ、という挙動みたいです。\n--disable-features=SSLCommonNameMismatchHandling 付けて起動すると Firefox と同じ挙動になります。\nまとめ Google Chrome は、\n Omnibar がサブドメインを隠す サブドメイン間違ってたら勝手リダイレクトする  という仕様のコンボで、思ってた URL と違うものを表示していることがあります。\n","description":"","id":177,"section":"blog","tags":["web","chrome"],"title":"https://hatena.ne.jp/ にアクセスできてるとお思いで？","uri":"https://yukihane.github.io/blog/201912/03/auto-redirecting-chrome/"},{"content":"Relaxed Binding 2.0 という仕組みにより\nspring.jpa.database-platform=mysql spring.jpa.databasePlatform=mysql spring.JPA.database_platform=mysql いずれの形式でも正しくバインドできる。\nが、公式ドキュメントからは一番上の database-platform が推奨されているように読み取れる。\nRelaxed binding - Spring Boot Configuration Binding:\n Spring Boot uses a canonical format that is lower case and use hyphen to separate words.\n Properties Files - Relaxed Binding 2.0:\n We recommend that properties are stored in lowercase kabab format. i.e. my.property-name=foo.\n ","description":"","id":178,"section":"blog","tags":["spring-boot"],"title":"Spring Boot のプロパティではkebab-formatが推奨されている","uri":"https://yukihane.github.io/blog/201911/28/kebab-format-recommended-on-spring-boot-properties/"},{"content":"悪い意味で。\nなお試した時点での GraalVM 最新リリースバージョンは 19.2.1でした。\nGraalVM インストール \u0026amp; 実行 GraalVM のインストール方法はいくつかあるのでお好みで。例えば:\n GitHubから実行バイナリをダウンロード SDKMAN! Scoop  (なお、SDKMAN!は今回試していないのでちゃんと動くかは知らない)\nさて、 PATH が通せたらおもむろに native-image コマンドを実行してみよう。結果:\nError: Unable to compile C-ABI query code. Make sure GCC toolchain is installed on your system. Error: Use -H:+ReportExceptionStackTraces to print stacktrace of underlying exception Error: Image build request failed with exit status 1 トラップ 0: Microsoft Windows SDK for Windows 7 のインストールが必要 上のメッセージでは GCC ツールチェーン入れれ、と出てるけど Windows で必要なのは Windows SDK ね。Windows 7 向けの。\nダウンロードはこちらから:\n Microsoft Windows SDK for Windows 7 and .NET Framework 4 (ISO)  オーケー。これくらいなら想定範囲だ。\nトラップ 1: Download ボタン押したら 3 種類選ばされるけどどれが何だよ？ 上で示したダウンロードサイトから焦ってダウンロードしようとするとこの罠にはまる。\n3 種類の ISO ファイルからダウンロードするものの選択を迫られるがファイル名から何が違うの変わらない。\n正解の行動は、説明をちゃんと読んでから Download ボタンを押すこと。\n最初の画面の \u0026ldquo;Install Instructions\u0026rdquo; を押せば説明が出てくる。\n要するにこういうことだ:\n GRMSDK_EN_DVD.iso - x86 用 GRMSDKX_EN_DVD.iso - x64 用 GRMSDKIAI_EN_DVD.iso - Itanium 用  今回ダウンロードすべきは 2 番目の GRMSDKX_EN_DVD.iso だ。\nトラップ 2: 既にインストールされている Microsoft Visual C++ 2010 Redistributable を先にアンインストールしておく必要がある 実際にはインストール手順をググっているときに知ったので自分はこの罠にはまっていないのだが、どうも Microsoft Visual C++ 2010 Redistributable が先にインストールされていると今回のインストーラが起動時にエラーメッセージを出してインストールを進めさせてくれないらしい。\nx64 版と x86 版の 2 種類 インストールされていると思うのでアンインストールしておこう。\nちなみに、自分の環境では 2008, 2012, 2013, 2017 もインストールされていたが、これはこのままで良い(アンインストールする必要はない)。\nトラップ 3: 実行するインストーラは setup.exe ではない 今回 G: ドライブとして ISO をマウントしたがこの場合 G:\\setup.exe がすぐ見えるのでこれを起動したくなるがこれを実行してインストールを進めると肝心の Visual C++ Compilers がグレーアウトしてインストールできない。なんだそれ！\n実行すべきは G:\\Setup\\SDKSetup.exe だ。\nインストール対象は、多分、Windows Native Code Development \u0026gt; Visual C++ Compilers と Redistributable Packages \u0026gt; Microsoft Visual C++ 2010 の 2 つがあれば良いのかな、とも思ったが、今回はデフォルト指定のままにした。\nトラップ 4: Windows SDK 7.1 Command Prompt で実行しよう これはトラップというか注意点だが、 native-image コマンドは\nスタートメニュー \u0026gt; Microsoft Windows SDK v7.1 \u0026gt; Windows SDK 7.1 Command Prompt\nから起動できるコマンドプロンプトで実行しよう。\nさもなくば必要な環境変数などが反映されず、最初のエラーを再び見る羽目になる。\nトラップ 5: native-image が Swing に対応していない こんだけやって native-image 実行してみたのに、敢え無くエラー。\nError: Unsupported features in 3 methods Detailed message: Error: Detected a started Thread in the image heap. Threads running in the image generator are no longer running at image run time. To see how this object got instantiated use -H:+TraceClassInitialization. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image run time by using the option --initialize-at-build-time=\u0026lt;class-name\u0026gt;. Or you can write your own initialization methods and call them explicitly from your main entry point. Trace: object sun.awt.AWTAutoShutdown method sun.awt.AWTAutoShutdown.getInstance() Call path from entry point to sun.awt.AWTAutoShutdown.getInstance(): at sun.awt.AWTAutoShutdown.getInstance(AWTAutoShutdown.java:133) at java.awt.EventQueue.detachDispatchThread(EventQueue.java:1137) at java.awt.EventDispatchThread.run(EventDispatchThread.java:88) at com.oracle.svm.core.thread.JavaThreads.threadStartRoutine(JavaThreads.java:460) at com.oracle.svm.core.windows.WindowsJavaThreads.osThreadStartRoutine(WindowsJavaThreads.java:137) at com.oracle.svm.core.code.IsolateEnterStub.WindowsJavaThreads_osThreadStartRoutine_4bc03aa26f8cdfc97ebd54050e8ae4bce1023851(generated:0) Error: Detected a started Thread in the image heap. Threads running in the image generator are no longer running at image run time. To see how this object got instantiated use -H:+TraceClassInitialization. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image run time by using the option --initialize-at-build-time=\u0026lt;class-name\u0026gt;. Or you can write your own initialization methods and call them explicitly from your main entry point. Trace: field sun.java2d.d3d.D3DRenderQueue.rqThread Error: Detected a started Thread in the image heap. Threads running in the image generator are no longer running at image run time. To see how this object got instantiated use -H:+TraceClassInitialization. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image run time by using the option --initialize-at-build-time=\u0026lt;class-name\u0026gt;. Or you can write your own initialization methods and call them explicitly from your main entry point. Trace: object sun.java2d.opengl.OGLRenderQueue field sun.java2d.opengl.OGLRenderQueue.theInstance Error: Use -H:+ReportExceptionStackTraces to print stacktrace of underlying exception Error: Image build request failed with exit status 1 多分これ。\n [native-image] Windows with a swing application #1327  以上。\n","description":"","id":179,"section":"blog","tags":["java","graalvm"],"title":"native-imageコマンドを実行するために行ったWindows10 への GraalVM インストールがエキサイティングな件","uri":"https://yukihane.github.io/blog/201911/09/graalvm-install-to-windows10/"},{"content":"OAuth2.0 の redirect_uri をゴニョった実装をテストしたいときにハマった。\nmockMvc.perform(get(new URI(\u0026quot;/line/oauth/authorize?redirece_uri=https%3A%2F%2Fexample.com\u0026quot;)  ってやらないと二重にエンコードされてしまう。\n参考  MockMvc needs to accept prepared URI with encoded URI path variables [SPR-11441] #16067 EncodedUriTests.java  ","description":"","id":180,"section":"blog","tags":["spring-boot"],"title":"MockMvc でURLエンコード済みのpathを渡したいときは new URI(...) を引数にする","uri":"https://yukihane.github.io/blog/201910/29/encoded-url-passing-to-mockmvc/"},{"content":"TL;DR Ubuntu18.04, Coffee Lake iGPU で vulkan での実行を可能にするには\n   mesa-vulkan-drivers パッケージインストール\n  /etc/X11/xorg.conf.d/20-intel.conf で DRI3 有効化\n   の2点が必要。\n (おそらく実際には、実行に libvulkan1 、及び開発には加えて libvulkan-dev も必要と思われるが、最初からインストールされていた)\n   はじめに Ubuntu18.04, Intel i5-8400(Coffee Lake; WikipediaによるとiGPUは UHD Graphics 630 だそうだ)でRustで開発されたゲームエンジン Amethyst を動かしてみようとしたところ次のエラーでクラッシュしたので解決を試みました。\n   作業ログ ソースのダウンロードと実行 amethyst-starter-2d をダウンロードして cargo run してみたところ次のエラーとなりました。\n  thread \u0026#39;main\u0026#39; panicked at \u0026#39;Unable to create Vulkan instance: VkError(ERROR_INCOMPATIBLE_DRIVER)\u0026#39;, src/libcore/result.rs:1084:5\n    リファレンスに書かれていた依存ライブラリのインストール ガイドを読んでみると必要な依存関係が書かれていたので、この通りにインストールを行いました(ただし既に全てインストール済みのようでした)。\n sudo apt install gcc pkg-config openssl libasound2-dev cmake build-essential python3 libfreetype6-dev libexpat1-dev libxcb-composite0-dev libssl-dev libx11-dev   この後再度 cargo run するも当然ながら結果は変わらず。\n vulkan-utils パッケージの vulkaninfo コマンドで情報を表示できるようなのでインストールして実行してみました。\n sudo apt install vulkan-utils vulkaninfo    Vulkan Instance Version: 1.1.70\n Cannot create Vulkan instance. /build/vulkan-UL09PJ/vulkan-1.1.70+dfsg1/demos/vulkaninfo.c:768: failed with VK_ERROR_INCOMPATIBLE_DRIVER\n   ということでやはり同じ(と思われる)エラーが出ました。\n  Mesaインストール Wikipediaの VulkanのCompatibilityの項目を読むと、Mesaで対応しているようなので apt search \u0026#34;mesa vulkan\u0026#34;`コマンドを実行して見つかったパッケージ `mesa-vulkan-drivers をインストールしてみました(ちなみに、参考文献のリンク先はもはや陳腐化した記述になっていましたのでその記述通りにはセットアップできません [1])。\n sudo apt install mesa-vulkan-drivers   この後、再び amethyst-starter-2d を cargo run してみたところ、前回とは異なるエラーが出るようになっていました。\n かなり長いメッセージが出ていますが、\n  vulkan: No DRI3 support detected - required for presentation Note: you can probably enable DRI3 in your Xorg config\n   がキモのようです。\n 前出の vulkaninfo コマンドは正常終了するようになりました。\n また、 vulkan-utils パッケージには vulkan-smoketest というコマンドも含まれているようなのでこれも実行してみます。結果:\n  vulkan: No DRI3 support detected - required for presentation Note: you can probably enable DRI3 in your Xorg config\n   ということで、 DIR3 を有効にする、というのが解決策のように見えました。\n  DRI3 有効化   Installing Vulkan :: Steam for Linux Intel Graphics Cards\n  How to enable DRI3 on Ubuntu 16.04 - Ask Ubuntu\n   上記の説明を参考にし、\n /etc/X11/xorg.conf.d/20-intel.conf ファイルの該当箇所に次の記述を追加しました。\n Option \u0026#34;DRI\u0026#34; \u0026#34;3\u0026#34;   元々の設定と合わせると、次のようなものになりました。\n Section \u0026#34;Device\u0026#34; Identifier \u0026#34;Intel Graphics\u0026#34; Driver \u0026#34;intel\u0026#34; Option \u0026#34;TripleBuffer\u0026#34; \u0026#34;true\u0026#34; Option \u0026#34;TearFree\u0026#34; \u0026#34;true\u0026#34; Option \u0026#34;DRI\u0026#34; \u0026#34;3\u0026#34; EndSection   その後、再起動。\n 再起動後、 vulkan-smoketest を実行すると正常に実行でき、また、 amethyst-starter-2d ディレクトリでの cargo run も実行できるようになりました。\n     1. 以前はIntelのグラフィックドライバはソースからインストールする必要があった(そのためPPAが作られた)ようですが、現在はカーネルに統合されているようです(参考)。   ","description":"","id":181,"section":"blog","tags":["rust","ubuntu"],"title":"Intel iGPU環境でのAmethyst 開発環境セットアップ","uri":"https://yukihane.github.io/blog/201910/setup-amethyst/"},{"content":"cargo new --bin したパッケージに対して、たまたまデフォルで生成される .gitignore を用いずに https://gitignore.io/ で生成してものを用いていたのですが、 Cargo.lock ファイルの扱いが異なるように思われ、あれ？と思って見直してみました。\n すると、 gitignore.io で作成した ignore ファイルに、次のようなことが書かれていました。\n  # Remove Cargo.lock from gitignore if creating an executable, leave it for libraries # More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html Cargo.lock\n  — https://gitignore.io/api/rust   bin ならバージョン管理し、 lib ならバージョン管理しないのが正しいようです。 cargo new した場合はそれぞれそのような .gitignore が生成されていました。\n 次のリンクでは 1.3.7.0 以降、 publish 時もそれぞれそういう動作になる、ということを言っているのでしょうかね。\n   Rust 1.37を早めに深掘り - OPTiM TECH BLOG\n   ","description":"","id":182,"section":"blog","tags":["rust"],"title":"Cargo.lock をバージョン管理するや否や","uri":"https://yukihane.github.io/blog/201909/rust-cago.lock/"},{"content":"経緯 プログラミングとかビデオゲームとか、かなり目を酷使することばかりやっているので、そうではない趣味を持とうと考えた末、何か楽器を入門することにしました。\n   すぐにやめてしまう可能性も少なくないので、あまり高価なのはNG\n  やりたいときにすぐできるものが良い。例えば音が気になって深夜は練習できない、とかはNG\n  独学でできないものはNG\n   ということでたどり着いたのが電子キーボードでした。\n   安いものなら1万円くらい\n  ギターとかと違って外に漏れる音を本当に0にできる\n  オンラインレッスンが楽器の中で一番充実している\n   ことが挙げられます。\n   オンラインレッスンについて 今回調べてわかったのですが、今どきのオンラインレッスンの形態として\n   スマートフォンやPCでマイクから音を拾って画面に反映する\n  iPad(たまにiPhoneも？)へMIDI(USB)接続して音を拾う\n  PCへMIDI(USB)接続して音を拾う\n   みたいなサービスが複数社から提供されていました。\n ちなみに電子キーボード買うときには気にしていなかったのですが、現在販売されている電子キーボード、よっぽど安価なものでもない限り、USBでMIDI-OUTできるのが普通っぽいです。 (自分がPCさわり始めた頃、DTMという単語が流行っていましたが、その頃はMIDI-OUTできるキーボードってPC接続専用のものか、よっぽど高いものしか無かった記憶…)\n 自分が調べた感じ、次のようなサービスがありました。 自分は調べ始めたときからPCに接続する前提だったので、アプリ専用のサービスは見られていません。 (ちなみに、スマートフォン対応は、Apple系のみのものも多いです。USBで楽器を接続する都合上そうなっちゃうんでしょう。)\n     サービス 日本語 無料お試し スマホアプリ 運指表示 採点 その他     Playground Sessions\n ☓\n 30日[1]\n iPadのみ\n △\n ○\n 買い切りプランあり, ネイティブアプリ\n   Piano Marvel\n ○\n 教材の最初の部分\n iPadのみ\n ☓\n ○\n PCにプラグインインストール\n   Yousician\n      海外サイトではよく名前を見かけた, スマホアプリがメイン？\n   Skoove\n ○\n  ○\n   Amazonで 購入時キャンペーン やっている\n   flowkey\n ○\n        ArtistWorks\n ☓\n     (自分では試していません)\n   Pianoforall\n ☓\n     (自分では試していません)\n    空欄は調べていない、あるいは忘れてしまった箇所です… お試ししたときはフィーリングで検討したので、定性評価できていないのは、まあ仕方ないかなと。\n PCで動作させる場合、Webブラウザ上で動かす、というものが多いようです。そうでないものは「その他」の欄に記載しています。 ここに記載しているのは元々外国のサービスなので、日本語「あり」と表記していても動画は字幕が付いているだけだったり、未翻訳教材が有ったりする場合も結構記憶にあります。\n 表の順番は、記憶に残っている限りで、自分が良いと思った順です。\n というわけで自分は表の一番上、Playground Sessionsに登録することにしました。 決め手は、ゲーミフィケーション要素(採点評価)があるので継続するモチベーションになるかな、というのと、指の置き方が(少なくとも入門編では)ちゃんと表示してある、という点です。 PianoMarvelと迷ったのですが、PianoMarvelは動画見ないと指の置き方がわからない、ってのがちょっと気にかかりました。\n ちなみにPlayground Sessions、今現在セールやってて普段より少しお安く買えます。 まあ、急がなくても、ハロウィンやブラックフライデーなど、ちょくちょく同じような値段になっているようですが。\n    1. YouTube公式チャネルから https://www.youtube.com/user/PlaygroundPiano   ","description":"","id":183,"section":"blog","tags":["diary"],"title":"電子キーボードを買いました","uri":"https://yukihane.github.io/blog/201908/begin-piano/"},{"content":"準備 Spring Boot セットアップ https://start.spring.io/ でテンプレートを作成して次の依存関係を追加します。\n \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.linecorp.bot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;line-bot-spring-boot\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.7.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;     リポジトリ: https://github.com/line/line-bot-sdk-java/tree/master/line-bot-spring-boot\n    Heroku セットアップ 今回は linebotbeta というアプリケーション名にしました。\n heroku create -n -a linebotbeta     参考: HerokuでSpringBootアプリを動かしてみる \u0026gt; ローカルでビルドした jar をデプロイする 及びそのリンク先\n    LINE platform セットアップ LINEデベロッパーコンソール で今回のbotが利用するプロバイダ、チャネルを作成します。\n   参考: Herokuでサンプルボットを作成する \u0026gt; 始める前に\n   「チャネル基本設定」タブで次の設定を行います。\n     設定項目 設定値     アクセストークン(ロングターム)\n (発行しておく)\n   Webhook送信\n 利用する\n   Webhook URL\n https://linebotbeta.herokuapp.com/callback\n    Webhook URL の設定値について、 linebotbata というのは先に作成したHeroku上のapp名、 /callback は line-bot-spring-bootのデフォルトのコールバックエンドポイントです。 これは line.bot.handler.path プロパティで変更可能です。\n    実装 コントローラ(ハンドラ)実装 今回はとりあえず README にあるオウム返しするハンドラを試しに実装しておきます。\n @LineMessageHandler public class MyController { @EventMapping public TextMessage handleTextMessageEvent(final MessageEvent\u0026lt;TextMessageContent\u0026gt; event) throws Exception { System.out.println(\u0026#34;event: \u0026#34; + event); return new TextMessage(event.getMessage().getText()); } }    プロパティ設定 src/main/resources/application.properties に、デベロッパーコンソールの今回使用するチャネルに表示されている次の項目をセットします。\n     設定項目 設定値     line.bot.channelToken\n アクセストークン（ロングターム） の値\n   line.bot.channelSecret\n Channel Secret の値\n       ビルド\u0026amp;デプロイ mvn package heroku deploy:jar target/line-bot-sample-0.0.1-SNAPSHOT.jar -a linebotbeta     実行してみる デベロッパーコンソールのチャネルページにQRコードが表示されていると思いますので、スマートフォンのLINEアプリで読み取ってチャネルにアクセスします。\n トーク画面で何かメッセージを入力すると、botがオウム返ししてきます。\n botのログは heroku logs コマンドで確認できます。\n heroku logs -a linebotbeta     ","description":"","id":184,"section":"blog","tags":["java","spring-boot","line"],"title":"LINE Messaging API を試してみる","uri":"https://yukihane.github.io/blog/201908/line-bot-sample/"},{"content":"  https://github.com/yukihane/hello-java/tree/master/line/richmenu-sample\n   公式リファレンス に書いてある通りですが、リッチメニューを試してみました。 メニューをタップするとPostBackEventを送信します。\n botでハンドリングするために、 前回 作成した bot に、PostBackEvent のハンドラを追加しています。\n ","description":"","id":185,"section":"blog","tags":["java","spring-boot","line"],"title":"LINE リッチメニューを試してみる","uri":"https://yukihane.github.io/blog/201908/line-richmenu-sample/"},{"content":"  Important  本ページは Spring Boot 2.1.7 の頃のものですが、後続として 2.4.5 対応版があります: LINEログインを試してみる(Spring Boot 2.4.5/Spring Security 5.4.6) – 発火後忘失      Spring SecurityのOAuth実装は こちらに書いたとおり 歴史的経緯により複数存在しますが、 https://start.spring.io/ の Dependencies で \u0026#34;OAuth2 Client\u0026#34; を選択した場合に追加されるものは一番新しいSpring Securityの spring-security-oauth2-client (及び spring-security-oauth2-jose)でした。\n というわけでSpring Securityのリファレンス 6.7 OAuth 2.0 Login を参 照しながら実装していきます。\n リファレンスを見るとSpring Bootがauto-configurationを提供してくれているようですので、クラスを探してみます[1]。\n   OAuth2ClientAutoConfiguration\n   そしてこのクラスで @Import している2クラス+1プロパティ\n   OAuth2ClientRegistrationRepositoryConfiguration\n  プロパティクラス OAuth2ClientProperties を利用\n     OAuth2WebSecurityConfiguration\n   あたりで設定が行われているのがわかります。\n コード   https://github.com/yukihane/hello-java/tree/master/line/sample-line-webapp\n     メモ 設定が間違っていても何が原因かログ等に出ない 設定が誤っていると、見た目はログイン画面のループになり、原因がさっぱりわからないことがままあります。 Spring Securityあるあるですが、ログにも大した情報は出ません。 ですので、とりあえず小さな動くサンプルを作ってから、動かしながら機能をつけ足していくのが無難かと思います。\n  参照すべきリファレンスなど   LINEログイン \u0026gt; ウェブアプリにLINEログインを組み込む\n  Social API v2.1\n  https://access.line.me/.well-known/openid-configuration\n   LINEログインのリファレンスだけでなく、Social APIの方にしか書かれていない情報があるし、更に言うとそこにも書かれていない情報がありました。\n 最後のリンクは OpenID Provider Configuration Document を返すエンドポイントです。\n   4.1. OpenID Provider Configuration Request\n    jwk-set-uri 設定がリファレンスに明記されていない 上記の OpenID Provider Configuration Documentに載っていました。\n application.properties spring.security.oauth2.client.provider.line.jwk-set-uri=https://api.line.me/oauth2/v2.1/certs    issuer-uri 設定を行ってはいけない 本来 https://access.line.me を設定するのが良さそうに思われますが、LINEの提供している OpenID Provider Configuration Document は本ライブラリの期待する情報種類を満たしておらず、設定すると NPE が発生しました。\n  scopeの区切り文字 リファレンスの説明 によると\n  URLエンコードされた空白文字（%20）で区切って、複数のスコープを指定できます。\n   とのことですが、 application.properties で空白で区切って設定値を書くと + (%2B)になってしまってどうしたものかと思いましたが、LINE側はこれでも受け付けてくれているようなので良しとしています。\n     1. ところでいつもこの作業は何となく名前でそれっぽいクラス…というふうに探しているのですが、ちゃんとした調べ方ってあるんでしょうかね…？   ","description":"","id":186,"section":"blog","tags":["java","spring-boot","line"],"title":"LINEログイン機能を試してみる(Spring Boot 2.1.7/Spring Security 5.1.6)","uri":"https://yukihane.github.io/blog/201908/line-login-sample/"},{"content":"GitBash環境でSDKMAN!を使ってJBakeをインストールしたのですが、 jbake コマンドを実行すると次のようなエラーが出てうまく動きませんでした。\n エラー: メイン・クラスorg.jbake.launcher.Mainを検出およびロードできませんでした 原因: java.lang.ClassNotFoundException: org.jbake.launcher.Main   実行スクリプトを調べてみると、クラスパス設定時にjarをワイルドカード指定している(参考)のですが、そこで絶対パスの記述方式がMSYSのもの /c/Users/yuki/…​/* のような形になっているため java コマンドに想定通り受け付けられていないようでした。\n この jbake スクリプトファイルを見てみたところ、次のようにmsysを判定している処理は入っていました。 が、この msys 変数を以降の処理で全く参照していませんでした。\n jbake # OS specific support (must be \u0026#39;true\u0026#39; or \u0026#39;false\u0026#39;). cygwin=false msys=false darwin=false nonstop=false case \u0026#34;`uname`\u0026#34; in CYGWIN* ) cygwin=true ;; Darwin* ) darwin=true ;; MINGW* ) msys=true ;; NONSTOP* ) nonstop=true ;; esac   Cygwinと同じ分岐に乗せればうまく動きそうに見えたので、そのように修正しようとしたのですが、いくらGitリポジトリを探してもみつからない。つまりバージョン管理対象ではなく自動生成しているようでした。\n ファイルをいろいろ見て回った結果、 gradle/application.gradle ファイル内の startScripts がそれっぽく見えたので検索してみたところ、やっとたどり着きました。\n   The Application Plugin\n   Gradleのコア機能だったようです。 これはGradleへの近トリビュートチャンスか？と思いIssuesを見てみたのですが、なんと、最新のバージョンである5.6で修正されていました…\n   Fix start script to run in MingW shell properly #8679\n   というわけで、JBakeがGitBashで実行できない問題は、gradlewが使用しているGradleのバージョンをアップグレードすれば解消されます。\n というわけでIssueを挙げました:\n   jbake command does not work on MSYS(GitBash) #612\n   ","description":"","id":187,"section":"blog","tags":["java","jbake","gradle"],"title":"Gradleプロジェクトで生成した実行スクリプトがGitBash(MSYS環境)でうまく動かない","uri":"https://yukihane.github.io/blog/201908/gradle-msys/"},{"content":"前提   主にJava開発を行う人(要は私自身)向け記述多し\n  パッケージ管理はscoopを使いますが、Java関係はなるべくSDKMAN!を使います\n     パッケージ管理ツール scoop https://scoop.sh/\n 何はともあれパッケージ管理ツールをインストールします。 Macで言うところのHomeBrewのようなものです。\n   Scoopでインストール: git, zip, conemu, vscode-portable, maven Scoopはコマンドプロンプトでも操作できるはずですが、私はPowerShell(あるいはGitBash)で扱っています。\n インストールするものは人によると思いますが、私の場合こんな感じ:\n scoop install git zip conemu vscode-portable maven   VSCodeくらいになると、Scoopに任せるべきか公式インストーラで入れるべきか迷いますね。 私は、開発ツールはなるべくScoopで管理する、という方針にしていますのでこのようになっています。\n 大抵のUNIX系ユーティリティコマンドはGit Bash付属のもので賄えるのですが、なぜかGitBashには zip コマンドが入っていないのでそれだけScoopからインストールしています。 zip コマンドはSDKMAN!インストール時に必要になります。\n MavenはJava関係なのでSDKMAN!でインストールしようと思ったのですが、GitBashで winsymlink:lnk を設定した場合うまく動作しなかったのでScoopでインストールすることにしました。\n   ConEmu 初期設定 ConEmu起動時GitBashを使いたいので、 Settings メニューから Startup メニューを選択し、 Command line のところに次のように git-cmd をフルパスで設定します。\n C:\\Users\\yuki\\scoop\\apps\\git\\current\\git-cmd.exe --no-cd --command=usr/bin/bash.exe -l -i   パスは環境によって違うのでこのまま適用できませんが、自身の環境での場所は想像がつくかと思います。\n   参考: Using Git for Windows - オフィシャルリファレンス\n     Bash初期設定(SDKMAN!利用準備) これ以降は、上記で設定したConEmu上で行っていきます。\n WindowsでSDKMAN!を利用するために、 .bashrc に次の行を加えます。\n .bashrc export MSYS=winsymlinks:lnk     参考: __sdkman_post_installation_hook: command not found #593\n     Git初期設定 Git for Windows は core.autocrlf の設定がデフォルトで true になっているのでこれを変更しておきます。また、名前とemailの設定も行います。\n git config --global core.autocrlf false git config --global user.name yukihane git config --global user.email ...@example.com     SDKMAN!インストール https://sdkman.io/\n 前述の通り、Java関連のツールはなるべくSDKMAN!で管理することにしています。 Scoopでも Java bucketをインストールすることで各種JDKを取り扱えるようになりますが、SDKMAN!の方がJDKの切り替えに柔軟性があったり、他OSとやりかたが統一できたりというメリットがあると考え、SDKMAN!を使っています。\n 前述のとおり、インストール時に zip コマンドが必要ですのであらかじめScoopでインストールしておきます。\n 次にこれまた前述の通り、 .bashrc にシンボリックリンクの取り扱いの設定を追記しておきます。\n また、私は遭遇したことがないのですが、Windows10付属の curl が用いられてしまってうまく動作しないこともあるようです。 何か問題が出た場合にはこういったことも疑ってみてください。\n   Windows(Cygwin)でSDKMANがうまく動かないのはcurlのせい - きしだのはてな\n     SDKMAN! で JDK他をインストール sdk install java 11.0.4.j9-adpt sdk install jbake     ","description":"","id":188,"section":"blog","tags":["windows"],"title":"Windows10上に開発環境を整える","uri":"https://yukihane.github.io/blog/201908/setup-windows-devenv/"},{"content":"背景 最終的にはLINE platformのAPIを理解したいのですが、 リファレンスを読んでいるとサンプルプログラム(サンプルbot)をHerokuにデプロイして試してみる、というような説明が多数あったので、Herokuについて理解しておこう、と考えました。\n そういった考えで、今回、単純なSpringBoot hello-worldアプリをHerokuにデプロイして接続確認してみることにしました。\n   デプロイしてみる ローカルでビルドした jar をアップロードする方法と、コードをアップロードしてHerokuでビルド\u0026amp;デプロイする方法があるようでしたのでその2つを試してみます。\n   コードをアップロードしてHerokuでビルド\u0026amp;デプロイする方法   Deploying Spring Boot Applications to Heroku\n   やってみようと思ったことは上記公式リファレンスでカバーされていました。\n ちなみにHeroku CLIコマンドのインストールは:\n   The Heroku CLI \u0026gt; Download and install\n   sudo snap install heroku --classic   heroku create [1] コマンドでHeroku側のリモートGitリポジトリが heroku という名前でaddされるので、そのリポジトリに git push heroku [ブランチ] コマンドでpushすることでビルドとデプロイが行われるようです。\n さて上記の通り git add してみたのですが失敗してしまいました。ログを見ると冒頭次の出力がありました。\n remote: -----\u0026gt; Java app detected remote: -----\u0026gt; Installing JDK 1.8... done remote: -----\u0026gt; Installing Maven 3.3.9... done remote: -----\u0026gt; Executing: mvn -DskipTests clean dependency:list install   今回はJava11で作っていたにもかかわらずJava8でビルドしようとしたためにエラーになっているようです。\n Herokuが使用するJavaやMavenのバージョンを明示的にこちらで指定するには system.properties ファイルをGit管理ファイルに含めれば良いようです。ルート直下、つまり pom.xml と同じ階層に置いておけば良いようです。\n system.properties java.runtime.version=11   (MavenはHerokuが対応しているバージョンのうち最新のものが使われているようなのでここでは改めて設定しませんでした。)\n バージョンを明示的に指定していない場合、Javaのバージョンは再デプロイしたタイミングで更新されるようです(現在1.8のものが将来的に自動で11とかになるということだろうか…？)が、Mavenは最初に用いたバージョンを使い続けるようです[2]。\n 参考: Specifying a Maven version - Heroku Java Support\n さて改めて git push コマンドを実行してみると、今度はbuild成功し、ログ出力されている https://[app名].herokuapp.com/ にアクセスすると、デモで作成した出力が得られました。\n   ローカルでビルドした jar をデプロイする 参考:\n   Deploying Executable JAR Files\n  Setting the HTTP Port for Java Applications\n  Customizing your deployment - Heroku Deploy War/Jar\n  63.2 Heroku - Spring Boot reference\n   jar をデプロイする場合には、 Heroku Java CLI plugin を追加でインストールしておく必要があるようです。\n heroku plugins:install java   また、Java11を使うためには上で行ったコードからでブロイする場合と同じように system.properties ファイルを用意し、これをカレントディレクトリ( heroku コマンドを実行しているディレクトリ)に置きます。 また、デプロイした jar を実行するためのコマンドを Procfile に書き、これもカレントディレクトリに置きます。\n さて、デプロイした jar がリッスンすべきポート番号はデプロイの度に変わるようで、アプリケーションには環境変数 PORT でポート番号が知らされます。 そのポートをリッスンするできるように実行コマンドや設定ファイルを作っておかなければなりません。 (コードベースのSpringBootアプリケーションデプロイでは、これは自動で行ってくれているのでしょう)\n 今回はコマンドラインでポート指定することにしました。すなわち、　Procfile には次のように書きました:\n Procfile web: java -Dserver.port=$PORT -jar target/hello-heroku-0.0.1-SNAPSHOT.jar   これらの設定を行ったあと、デプロイします:\n heroku deploy:jar target/hello-heroku-0.0.1-SNAPSHOT.jar      1. この場合app名は自動で命名される。app名を明示したい場合は heroku create \u0026lt;app名\u0026gt; 。  2. バージョンを変更するには system.properties で使用バージョンを明示しなければならない。   ","description":"","id":189,"section":"blog","tags":["java","spring-boot","heroku"],"title":"HerokuでSpringBootアプリを動かしてみる","uri":"https://yukihane.github.io/blog/201908/hello-heroku-with-springboot/"},{"content":"タグのindexページは正しくタグを収集しているようですが、それぞれのタグ個別ページがちゃんと生成されていないですね… テンプレートは 標準のものそのまま使っているはずなのだけれど。\n ","description":"","id":190,"section":"blog","tags":["diary"],"title":"JBakeのタグページが想定通り動いていない","uri":"https://yukihane.github.io/blog/201908/jbake-tags/"},{"content":"Git の pre-push でテスト実行を行おうとした際、通常テスト実行ではデバッグログを出しているところを、エラーを表すものだけに絞って出すようにしようと考えました。\n #!/bin/bash set -eu targetdir=target echo \u0026#39;executing git pre-push hook...\u0026#39; mvn clean \u0026gt; /dev/null if [ ! -d $targetdir ]; then mkdir $targetdir fi { mvn test 1\u0026gt; $targetdir/pre-push.stdout.txt; } 2\u0026gt;\u0026amp;1 | tee $targetdir/pre-push.stderr.txt exit ${PIPESTATUS[0]}   { …​; } は command groupingと言うそうです。\n 参考:\n   bash: 標準出力、標準エラー出力をファイル、画面それぞれに出力する方法 - Qiita\n  bashで複数のコマンドを一つのコマンドとして扱う方法(複合コマンド) - Qiita\n   ","description":"","id":191,"section":"blog","tags":["bash","git"],"title":"bashで標準出力をファイルに、標準エラー出力を画面とファイルに出力したい","uri":"https://yukihane.github.io/blog/201908/bash-redirect-earch-other/"},{"content":"  サンプルコード: https://github.com/yukihane/hello-java/tree/master/mapstruct/hello-mapstruct\n   上記のコードのようにLombokとMapStructを併用しているプロジェクトを、 Lombokプラグインを適用したEclipseで読み込ませるとMapStructのコードが自動生成されません。 そのため、Eclipse上でJUnitテストを実行すると次のように java.lang.ClassNotFoundException: Cannot find implementation というエラーになります。\n java.lang.ExceptionInInitializerError at com.github.yukihane.hello_mapstruct.CarMapperTest.shouldMapCarToDto(CarMapperTest.java:15) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209) Caused by: java.lang.RuntimeException: java.lang.ClassNotFoundException: Cannot find implementation for com.github.yukihane.hello_mapstruct.CarMapper at org.mapstruct.factory.Mappers.getMapper(Mappers.java:61) at com.github.yukihane.hello_mapstruct.CarMapper.\u0026lt;clinit\u0026gt;(CarMapper.java:9) ... 24 more Caused by: java.lang.ClassNotFoundException: Cannot find implementation for com.github.yukihane.hello_mapstruct.CarMapper at org.mapstruct.factory.Mappers.getMapper(Mappers.java:75) at org.mapstruct.factory.Mappers.getMapper(Mappers.java:58) ... 25 more   また、 Error Log ビューを見ると、次のエラーが出力されています。\n java.lang.NoClassDefFoundError: org/mapstruct/ap/spi/AstModifyingAnnotationProcessor at java.base/java.lang.ClassLoader.defineClass1(Native Method) at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1016) at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:174) at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:802) at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:700) at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:623) at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581) at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178) at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:575) at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:575) at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521) at java.base/java.lang.Class.forName0(Native Method) at java.base/java.lang.Class.forName(Class.java:398) at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.nextProviderClass(ServiceLoader.java:1209) at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNextService(ServiceLoader.java:1220) at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNext(ServiceLoader.java:1264) at java.base/java.util.ServiceLoader$2.hasNext(ServiceLoader.java:1299) at java.base/java.util.ServiceLoader$3.hasNext(ServiceLoader.java:1384) at org.mapstruct.ap.internal.util.AnnotationProcessorContext.findAstModifyingAnnotationProcessors(AnnotationProcessorContext.java:91) at org.mapstruct.ap.internal.util.AnnotationProcessorContext.\u0026lt;init\u0026gt;(AnnotationProcessorContext.java:45) at org.mapstruct.ap.MappingProcessor.init(MappingProcessor.java:123) at org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeAnnotationProcessorManager.discoverNextProcessor(IdeAnnotationProcessorManager.java:97) at org.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.round(RoundDispatcher.java:119) at org.eclipse.jdt.internal.compiler.apt.dispatch.BaseAnnotationProcessorManager.processAnnotations(BaseAnnotationProcessorManager.java:171) at org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeAnnotationProcessorManager.processAnnotations(IdeAnnotationProcessorManager.java:138) at org.eclipse.jdt.internal.compiler.Compiler.processAnnotations(Compiler.java:940) at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:450) at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:426) at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:386) at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.compile(BatchImageBuilder.java:214) at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:318) at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:79) at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:265) at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:180) at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:833) at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45) at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:220) at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:263) at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:316) at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45) at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:319) at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:371) at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:392) at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:154) at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:244) at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63) Caused by: java.lang.ClassNotFoundException: org.mapstruct.ap.spi.AstModifyingAnnotationProcessor at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:583) at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178) at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521) ... 46 more   この問題はMapStructオフィシャルのissueにも登録されており、そこに解決策(workaroundですが)が提示されています。\n   Mapstruct, Lombok, Maven \u0026amp; Eclipse #1159\n   曰く、このパッチされた lombok.jar をEclipseに登録すれば良い、というわけです。\n ただ、MapStructオフィシャル(あるいはLombokオフィシャル)で提供されているものではないし、少しこれを使うのは気持ち悪いかも、と思ったのでオフィシャル jar から自前で作成することにしました。\n   https://raw.githubusercontent.com/yukihane/prefs/master/install/lombok-patch-for-mapstruct.sh\n   Error Log の通り、 AstModifyingAnnotationProcessor というクラスが見つからないのが原因ですが、実際には lombok.jar には含まれています。ただ、何らかの理由で標準のクラスパスには含められていないようです。 これを標準クラスパスに移してしまう、というのが上のスクリプトで行っていることです。\n 制限事項としては、上のスクリプトで作成した lombok.jar を使う場合、 Eclipseを動作させるJDKはバージョン9以上でなければなりません (もしかすると、オフィシャル jar でクラスパスが別れているのはこれが理由かもしれません)。\n ちなみに、LombokとMapStructを同時に適用する場合の pom.xml は こんな感じ です。\n ","description":"","id":192,"section":"blog","tags":["java","lombok","mapstruct","eclipse"],"title":"Lombokプラグインを入れているEclipseでMapStruct自動生成が機能しない","uri":"https://yukihane.github.io/blog/201908/eclipse-lombok-mapstruct/"},{"content":"  Format not work #534 - rust-lang/rls-vscode\n   VSCodeでRustの勉強をしているのですが、現在、どうもコード整形機能が上手く働いていない…？\n 代替策としては、 rustfmt を使って、 cargo fmt コマンドで整形すれば良さそう。\n ","description":"","id":193,"section":"blog","tags":["rust"],"title":"VSCodeでRustの整形ができない？","uri":"https://yukihane.github.io/blog/201908/rust-format-on-vscode/"},{"content":"rustup run 1.15.1 cargo build   もちろん事前に使用するバージョンをインストールしておく必要がある:\n rustup install 1.15.1   参考:\n   Rustup for managing Rust versions\n   ","description":"","id":194,"section":"blog","tags":["rust"],"title":"cargo build で特定のバージョンの rustc を利用する","uri":"https://yukihane.github.io/blog/201908/use-specific-rustc-version/"},{"content":"個人的にMarkDownはあまり好きではなく(標準だと表現力が弱いし方言が多い！)、ずっとblogをAsciiDocで書く方法を模索していました。\n 一時期は GatsbyJS でなんとかならないものかと考えたりもしていたのですが、AsciiDocサポート入れる時間がないからblog書けない…という状況が5ヶ月くらい続いて、結局最初からAsciiDocサポートしているこの JBake を使用することにしました。\n ","description":"","id":195,"section":"blog","tags":["diary"],"title":"JBakeはじめました","uri":"https://yukihane.github.io/blog/201908/hello/"},{"content":"要約 78.10 Add a Servlet, Filter, or Listener to an Application曰く。\n any Servlet or Filter beans are registered with the servlet container automatically.\n Spring Security 使った自前の認証フィルタを @Component 付けて作ったりなんかした際に意図しない URL path にも認証がかかってしまう。\nんゴ。\n困ってる実例集  Add an annotation to exclude Filter @Beans from registration #16500 - spring-projects/spring-boot Spring Boot with Spring Security の Filter 設定とハマりポイント - Qiita サンプルコード: https://github.com/yukihane/hello-java/tree/master/spring/filter-auto-registration-example  手順 4.のコミット時点のコードで既にフィルタが有効化されてしまっている    対策 どちらかで対策できる。\n フィルタを Bean として作成しない Disable Registration of a Servlet or Filterの説明に従う: FilterRegistrationBean#setEnabled(false)  前述のコードで例示    ","description":"","id":196,"section":"blog","tags":["spring-security","spring-boot"],"title":"Spring Bootは、セキュリティフィルタBeanを作っている分だけ、無料で認証できちまうんだ","uri":"https://yukihane.github.io/blog/201907/18/spring-boot-filter-bean/"},{"content":"概要 spring-boot-starter-security を導入しても http://localhost:8080/h2-console にアクセスしたかった。\n作業結果: https://github.com/yukihane/hello-java/tree/master/spring/h2-console-spring-security-example\n手順 h2-console が使える依存関係を追加してプロジェクトセットアップ 8113d7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-jdbc\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.h2database\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;h2\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt;   h2-console を表示してみる 1b16dc spring.h2.console.enabled=true spring.datasource.generate-unique-name=false 1 2 3  createtablegreeting_table(messagevarchar(256)notnull);  (注: spring.datasource.generate-unique-name 設定は Spring Boot 2.3.0 からデフォルト値が変わったため必要になったもので、リンク先 Git リポジトリには含まれていません(参考))\nの設定を行った上で http://localhost:8080/h2-console/ へアクセス。\n   項目名 設定値     Driver Class org.h2.Driver   JDBC URL jdbc:h2:mem:testdb   User Name sa   Password (空)    spring-boot-starter-security を追加してアクセスしてみる 61357fe 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-jdbc\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-security\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.h2database\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;h2\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt;   http://localhost:8080/h2-console/\nはいはいこれね。 15e7b26\n@Configuration public class MyWebSecConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(final HttpSecurity http) throws Exception { } } h2-console ログイン画面が表示されるので上で書いたものと同じ入力を行い Connect。\n Whitelabel Error Page\nThis application has no explicit mapping for /error, so you are seeing this as a fallback.\nFri Jul 12 11:30:17 JST 2019\nThere was an unexpected error (type=Forbidden, status=403).\nForbidden\n なぜなのか。\n対処 d4b449b @Configuration public class MyWebSecConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(final HttpSecurity http) throws Exception { http.csrf().disable(); http.headers().frameOptions().disable(); } } ","description":"","id":197,"section":"blog","tags":["spring-boot"],"title":"h2-consoleとspring-boot-starter-securityと私","uri":"https://yukihane.github.io/blog/201907/12/h2-console-on-spring-boot/"},{"content":"WebSecurityConfigurerAdapter#configure(HttpSecurity) で form 認証を有効化しているのでこれをディスる。\nWebSecurityConfigurerAdapterを継承した Spring コンポーネントをスキャン対象に含めれば良い。\n@Configuration public class MyWebSecConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(final HttpSecurity http) throws Exception { // 空実装でオーバライド } } 別解 SecurityAutoConfigurationをディスる。(form 認証だけでなく他のセキュリティ自動設定も無効化される)\n@SpringBootApplication(exclude = { SecurityAutoConfiguration.class }) public class MyApplication { public static void main(final String[] args) { SpringApplication.run(MyApplication.class, args); } } ","description":"","id":198,"section":"blog","tags":["spring-boot","spring-security"],"title":"spring-boot-starter-security を入れたら認証画面が！","uri":"https://yukihane.github.io/blog/201907/04/spring-boot-and-spring-security/"},{"content":"概要 Spring Boot の認証を実装してみた系のサンプルでよく UserDetails や UserDetailsService が用いられているが、必然性が不明なものがほとんどである。\n(おそらく当の実装者も理解していない1。)\nここでは UserDetails を使わない、よりシンプルな認証を実装してみた。\n参考リンク  Spring Security Architecture の Authentication and Access Control  TERASOLUNA のリファレンスなら日本語で読める！   6.8.4 Overriding or Replacing Boot Auto Configuration - Spring Security Reference  実装サンプル  tags/simple-authentication-example タグ  user テーブルを select して id/password を検証するバージョンはtags/simple-authentication-db-example タグ    解説 参考リンク先にある通り、自分で認証処理を作りたい場合、 AuthenticationProvider を実装してそれを用いるように設定すれば良い。\nサンプルコードでは、 MyAuthenticationProviderが該当の認証プロバイダで、これを用いるように設定しているのが MyWebSecurityConfigurerAdapterである。\n(終わり)\n実行して確認 http://localhost:8080/hello へアクセスすると Basic 認証のダイアログが出るので、 tags/simple-authentication-example であれば username に mynameを(パスワードは何でも良い)、tags/simple-authentication-db-exampleタグのものであれば username に user1, password にpassword1を入力すれば認証が通る。\n追記: んで結局 UserDetails ってなんなのさ https://docs.spring.io/spring-security/site/docs/5.1.5.RELEASE/reference/htmlsingle/#tech-userdetailsservice\n Think of UserDetails as the adapter between your own user database and what Spring Security needs inside the SecurityContextHolder.\n だって。そんな汎用的に使えるもんかあ？余計なメソッド多すぎじゃね…？\nspring-security-oauth2 を使ったとき principal を完全に独自の型にしていたらフレームワーク内の getName()呼び出しでtoString()されて困ったので、UserDetailsは実装しなくともAuthenticatedPrincipalは実装しといたほうが良さげ。\n もちろん私もそんなコードを理解できません。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","description":"","id":199,"section":"blog","tags":["spring-security"],"title":"ちょっと待って！そのUserDetails、本当に必要ですか？","uri":"https://yukihane.github.io/blog/201907/03/you-dont-need-userdetails/"},{"content":"タイトルに書いたような、ファイル出力先として ServletContext#getRealPath を利用しているサンプルコードが見つかる、と聞いて検索してみたところ、日本語、非日本語にかかわらず確かにそのようなサンプルコードは散見されました。\n例えば Qiita では(順不同):\n SpringMVC と JasperReports で帳票を印刷してみた 番外編（画像編） jsp(servlet)の画像アップロードについて JSP/サーブレット ファイルアップロードの実装 画像の保存と紐付けの同時アップロード 画像アップロードのパスの設定について  どうして利用しては駄目なのか Stack Overflowに理由を記載しています。\n私の説明だけでは不安なのであれば、次も参照してみてください。\n Recommended way to save uploaded files in a servlet application - Stack Overflow  ちなみに、The Java EE Tutorial見てみたらクライアントが path 指定するようになってました…まあ、変に正しい実装はこれだと混乱させることは無い分まし、なの、かな…？\n","description":"","id":200,"section":"blog","tags":["java","servlet"],"title":"ファイル出力先にServletContext#getRealPathを使うな","uri":"https://yukihane.github.io/blog/201906/20/dont-use-getrealpath/"},{"content":"問題 JapaneseDate.of(や LocalDate.of)を使うと厳密(strict)に検証されてしまう。\n結果、例外が出る。\n// 平成31年6月12日 final JapaneseDate today = JapaneseDate.of(JapaneseEra.HEISEI, 31, 6, 12); System.out.println(today); Exception in thread \u0026quot;main\u0026quot; java.time.DateTimeException: year, month, and day not valid for Era at java.base/java.time.chrono.JapaneseDate.of(JapaneseDate.java:231) at com.github.yukihane.datetime.App.main(App.java:21) 解決策 JapaneseChronology#resolveDate(や IsoChronology#resolveDate)を使えばゆるふわ(lenient)な検証でゆるしてくれたりも。\nfinal Map\u0026lt;TemporalField, Long\u0026gt; fieldValues = new HashMap\u0026lt;\u0026gt;(); fieldValues.put(ChronoField.ERA, (long) JapaneseEra.HEISEI.getValue()); fieldValues.put(ChronoField.YEAR_OF_ERA, 31L); fieldValues.put(ChronoField.MONTH_OF_YEAR, 6L); fieldValues.put(ChronoField.DAY_OF_MONTH, 12L); final JapaneseDate today = JapaneseChronology.INSTANCE.resolveDate(fieldValues, ResolverStyle.LENIENT); System.out.println(today); Japanese Reiwa 1-06-12 しかしよく考えるとデフォルト(的)挙動が strict モードって和暦扱うところでは怖いよな。\nお隠れになると(※もはや改元はお隠れになられた場合だけではなくなったが)今までちゃんと動いていたところが例外出るようになるんだぜ…\n参考  AbstractChronology#resolveDate - Java API doc    YEAR_OF_ERA と ERA - 両方とも存在する場合、それらが組み合わされて YEAR を形成します。 lenient モードでは YEAR_OF_ERA の範囲は検証されず、smart および strict モードでは検証されます。   smartは平成 31 年 6 月は許してくれるけど平成 32 年 6 月は許してくれない。賢いか…？\n(※ 検証するのは\u0026quot;YEAR_OF_ERA の範囲\u0026quot;だけだから言ってることとやってることは合ってる)\n","description":"","id":201,"section":"blog","tags":["java"],"title":"元号が令和に変わったことを知らない人のための日付処理方法","uri":"https://yukihane.github.io/blog/201906/12/java-datetime/"},{"content":"結果 1.8 H 11 平成 環境 1.8 java version \u0026quot;1.8.0_201\u0026quot; Java(TM) SE Runtime Environment (build 1.8.0_201-b09) Java HotSpot(TM) 64-Bit Server VM (build 25.201-b09, mixed mode) 11 openjdk version \u0026quot;11.0.2\u0026quot; 2019-01-15 OpenJDK Runtime Environment 18.9 (build 11.0.2+9) OpenJDK 64-Bit Server VM 18.9 (build 11.0.2+9, mixed mode) コード import java.text.SimpleDateFormat; import java.time.LocalDate; import java.util.Date; import java.util.Locale; public class Main { public static void main(final String[] args) { final Date date = date(2010, 3, 4); final SimpleDateFormat format = new SimpleDateFormat(\u0026quot;G\u0026quot;, new Locale(\u0026quot;ja\u0026quot;, \u0026quot;JP\u0026quot;, \u0026quot;JP\u0026quot;)); System.out.println(format.format(date)); } private static Date date(final int year, final int month, final int dayOfMonth) { final long time = LocalDate.of(year, month, dayOfMonth) .atStartOfDay(ZoneOffset.ofHours(9)).toEpochSecond() * 1000; return new Date(time); } } 関連(しない)  DateTimeFormatter とかこれもうわかんねぇな  関連(する)  JDK-8216204 Wrong SimpleDateFormat behavior with Japanese Imperial Calendar   From JDK 9 onwards, the default locale data is the data derived from the Unicode Consortium\u0026rsquo;s Common Locale Data Repository (CLDR). Please refer https://www.unicode.org/cldr/charts/33/by_type/date_\u0026_time.japanese.html\nThe short display format for Heisei is 平成 in the ja locale in CLDR data. Hence the difference in the result.\n  To use the JRE locale with JDK 9 set java.locale.providers to a value with COMPAT ahead of CLDR. :\n-Djava.locale.providers=COMPAT, CLDR\n  Use CLDR locale data by default - JDK 9 Release Notes   -Djava.locale.providers=COMPAT,SPI\n いやどっちやねん。\n","description":"","id":202,"section":"blog","tags":["java"],"title":"SimpleDateFormat もこれもうわかんねぇな","uri":"https://yukihane.github.io/blog/201906/11/simpledateformat/"},{"content":"こたえ 文字列 null が出力される。\nコード  final String text = null; System.out.printf(\u0026quot;%s\u0026quot;, text);  参考  java.util.Formatter   For category General, Character, Numberic, Integral and Date/Time conversion, unless otherwise specified, if the argument arg is null, then the result is \u0026ldquo;null\u0026rdquo;.\n リンク先の表にある通り、 s はカテゴリ\u0026quot;general\u0026quot;に属す。ちなみに日本語ではこうなっている(わかりにくい):\n カテゴリ「一般」、Character、「数」、「積分」および Date/Time 変換では、特に指定しない限り、引数 arg が null の場合、結果は\u0026quot;null\u0026quot;です。\n ","description":"","id":203,"section":"blog","tags":["java"],"title":"%s に null を渡したらどうなるんだっけ","uri":"https://yukihane.github.io/blog/201906/11/format-pass-to-null/"},{"content":"コード import java.time.LocalDate; import java.time.format.DateTimeFormatter; import java.util.Locale; public class App { private static String format(final LocalDate date, final String pattern) { return date.format(DateTimeFormatter.ofPattern(pattern, Locale.JAPAN)); } public static void main(final String[] args) { final LocalDate today = LocalDate.of(2019, 6, 4); System.out.println(format(today, \u0026quot;M\u0026quot;)); System.out.println(format(today, \u0026quot;MM\u0026quot;)); System.out.println(format(today, \u0026quot;MMM\u0026quot;)); System.out.println(format(today, \u0026quot;MMMM\u0026quot;)); System.out.println(format(today, \u0026quot;MMMMM\u0026quot;)); System.out.println(format(today, \u0026quot;MMMMMM\u0026quot;)); } } 結果    パターン 結果     M 6   MM 06   MMM 6 月   MMMM 6 月   MMMMM 6   MMMMMM IllegalArgumentException: Too many pattern letters: M    $ java -version openjdk version \u0026quot;11.0.2\u0026quot; 2019-01-15 OpenJDK Runtime Environment 18.9 (build 11.0.2+9) OpenJDK 64-Bit Server VM 18.9 (build 11.0.2+9, mixed mode) 参考(にならなかった)リンク  java.time.format.DateTimeFormatter  参考(にややなった)リンク  java.time.format.DateTimeFormatterBuilder#appendPattern  関連(しない)  SimpleDateFormat もこれもうわかんねぇな  ","description":"","id":204,"section":"blog","tags":["java"],"title":"DateTimeFormatter とかこれもうわかんねぇな","uri":"https://yukihane.github.io/blog/201906/04/datetimeformatter/"},{"content":"動機 CDI で言うところの CDI.current().getBeans(...) とか CDI.current().select(...)とかそんな感じのことをやりたかった。\n参考リファレンス ドキュメントでは、やりたいことが書いてあるように見えたのはこのセクション\n 5.10.1. Using AspectJ to Dependency Inject Domain Objects with Spring - Spring Framework Core リファレンス  だったので、この記述に従って実装してみることにした。\n環境  Spring Boot 2.1.5 Java11 Lombok 使用  ゴール 次のようなコードを動かしたい。最終的なインジェクションのやり方はともかく、 new MyPojo() で生成したインスタンス(つまり非 Spring コンポーネント)で、Spring コンポーネントである MyComponent を使いたい。\nd7436a7cd8f4d2ef49707c21b488bdadd9e5fac1:\n@SpringBootApplication public class AspectjApplication implements CommandLineRunner { public static void main(final String[] args) { SpringApplication.run(AspectjApplication.class, args); } @Override public void run(final String... args) throws Exception { System.out.println(new MyPojo().getText()); } public static class MyPojo { @Autowired private MyComponent myComponent; @Getter @Setter private String greetingText = \u0026quot;Hello, \u0026quot;; public String getText() { return getGreetingText() + myComponent.getName(); } } @Component public static class MyComponent { public String getName() { return this.getClass().getSimpleName(); } } }  なお、このまま実行すると、 MyPojoクラスのmyComponentは null のままなので、NPE が発生する。\n作業ログ 結果のソース:\n https://github.com/yukihane/hello-java/tree/master/spring/aspectj  @EnableSpringConfigured @Configurable 付与 前述 Spring Framework リファレンスに記載されている通り、アノテーションを付与した。\n494691a12b1ae303f3d51caa08b83ccb85923b9e:\n+@EnableSpringConfigured @SpringBootApplication public class AspectjApplication implements CommandLineRunner { @@ -20,6 +23,7 @@ public class AspectjApplication implements CommandLineRunner { System.out.println(new MyPojo().getText()); } + @Configurable public static class MyPojo { @Autowired private MyComponent myComponent; 依存関係追加 同じくリファレンスに記載されている通り pom.xml へ spring-aspects を依存関係に追加した。\na0b2455bb5b4e5d0937899de20180a482475a023:\n+ \u0026lt;dependency\u0026gt; + \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; + \u0026lt;artifactId\u0026gt;spring-aspects\u0026lt;/artifactId\u0026gt; + \u0026lt;/dependency\u0026gt; AspectJ アノテーションプロセッシング おそらく上で追加したアノテーションをコンパイル時に何かするのだろう、と探したところ aspectj-maven-pluginというものがあったので usage の通り pom.xml へ追記した。\nfc552678d14a5c01f7ea33b6df09453823456510:\n \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; + \u0026lt;plugin\u0026gt; + \u0026lt;groupId\u0026gt;org.codehaus.mojo\u0026lt;/groupId\u0026gt; + \u0026lt;artifactId\u0026gt;aspectj-maven-plugin\u0026lt;/artifactId\u0026gt; + \u0026lt;version\u0026gt;1.11\u0026lt;/version\u0026gt; + \u0026lt;executions\u0026gt; + \u0026lt;execution\u0026gt; + \u0026lt;goals\u0026gt; + \u0026lt;goal\u0026gt;compile\u0026lt;/goal\u0026gt; \u0026lt;!-- use this goal to weave all your main classes --\u0026gt; + \u0026lt;goal\u0026gt;test-compile\u0026lt;/goal\u0026gt; \u0026lt;!-- use this goal to weave all your test classes --\u0026gt; + \u0026lt;/goals\u0026gt; + \u0026lt;/execution\u0026gt; + \u0026lt;/executions\u0026gt; + \u0026lt;/plugin\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; この状態でコンパイルを実行すると次のエラーが発生した:\n[ERROR] Failed to execute goal org.codehaus.mojo:aspectj-maven-plugin:1.11:compile (default) on project aspectj: Execution default of goal org.codehaus.mojo:aspectj-maven-plugin:1.11:compile failed: Plugin org.codehaus.mojo:aspectj-maven-plugin:1.11 or one of its dependencies could not be resolved: Could not find artifact com.sun🛠jar:11.0.2 at specified path /home/yuki/.sdkman/candidates/java/11.0.2-open/../lib/tools.jar  aspectj-maven-plugin の Java11 対応 当 plugin の GitHub Issues/PR のページを見てみると、Java11 に対して未対応のようだった。\n対応した fork version を作成されている方がいたのでこれを用いることとした。\n Adding support for JDK 11 and fixing integration test #45  また、AJC(AspectJ Compiler の略か？)にターゲット Java バージョンを明示する必要があったので(デフォルトだと 1.4 だと解釈するようだ)、その対応も行った。\n21a76a79d9..3f0abe043:\n \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; - \u0026lt;groupId\u0026gt;org.codehaus.mojo\u0026lt;/groupId\u0026gt; + \u0026lt;groupId\u0026gt;com.nickwongdev\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;aspectj-maven-plugin\u0026lt;/artifactId\u0026gt; - \u0026lt;version\u0026gt;1.11\u0026lt;/version\u0026gt; + \u0026lt;version\u0026gt;1.12.1\u0026lt;/version\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;goals\u0026gt; @@ -61,6 +61,11 @@ \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; + \u0026lt;configuration\u0026gt; + \u0026lt;source\u0026gt;${java.version}\u0026lt;/source\u0026gt; + \u0026lt;target\u0026gt;${java.version}\u0026lt;/target\u0026gt; + \u0026lt;complianceLevel\u0026gt;${java.version}\u0026lt;/complianceLevel\u0026gt; + \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; Lombok との組み合わせ対応: .java に対する AspectJ 適用スキップ ここまでの状態でコンパイルを実行すると次のエラーとなる:\n[ERROR] Failed to execute goal com.nickwongdev:aspectj-maven-plugin:1.12.1:compile (default) on project aspectj: AJC compiler errors: [ERROR] error at return getGreetingText() + myComponent.getName(); [ERROR] ^^ [ERROR] /home/yuki/Documents/repos/java/hello-java/spring/aspectj/src/main/java/com/github/yukihane/spring/aspectj/AspectjApplication.java:36:0::0 The method getGreetingText() is undefined for the type AspectjApplication.MyPojo ここで指摘されている getGreetingText() メソッドは、Lombok の @Getter アノテーションによって生成されるはずのメソッドだ。 AJC compiler はこれが見えないと言っている。\n当然だ。.java上には存在しない。\nググると対策が提示されていた。\n Lombok and AspectJ - Stack Overflow  ただしなぜこれで上手く行くのか説明は無いので自分なりの解釈をここに書いておく。\nAspectJ が weaving を行い得るタイミングは 3 つあるらしい。このうち今回関係しているのは、コンパイル時の話なので、最初の 2 つだ。\nChapter 5. Load-Time Weaving - The AspectJ Development Environment Guide:\n   Compile-time weaving is the simplest approach. When you have the source code for an application, ajc will compile from source and produce woven class files as output. The invocation of the weaver is integral to the ajc compilation process. The aspects themselves may be in source or binary form. If the aspects are required for the affected classes to compile, then you must weave at compile-time. Aspects are required, e.g., when they add members to a class and other classes being compiled reference the added members. Post-compile weaving (also sometimes called binary weaving) is used to weave existing class files and JAR files. As with compile-time weaving, the aspects used for weaving may be in source or binary form, and may themselves be woven by aspects. Load-time weaving (LTW) is simply binary weaving defered until the point that a class loader loads a class file and defines the class to the JVM. To support this, one or more \u0026ldquo;weaving class loaders\u0026rdquo;, either provided explicitly by the run-time environment or enabled through a \u0026ldquo;weaving agent\u0026rdquo; are required.  リンク先 Stack Overflow の回答で行っているのは、compile-time weaving をスキップすることで Lombok が getter を生成する前の.javaファイルを AJC が見ることを回避し、ただしスキップしたが.classに対する post-compile weaving は強制している、ということなのだろう。\n差分は長い割に回答リンク先と変わらないので記載省略。\nリンク: 4ca1f64cc4174bb3c41932f6a08b3997779a782a。\nweaving 時の問題対処 さて、AspectJ 適用をコンパイル後に先送りしてしまったのでここからはmvn clean compileでなくmvn clean process-classesを実行する必要がある。\n早速実行してみると新しいエラーが出る。\n[ERROR] Failed to execute goal com.nickwongdev:aspectj-maven-plugin:1.12.1:compile (default-compile) on project aspectj: AJC compiler errors: [ERROR] error can't determine superclass of missing type org.springframework.transaction.interceptor.TransactionAspectSupport [ERROR] when batch building BuildConfig[null] #Files=0 AopXmls=#0 [ERROR] [Xlint:cantFindType] これもググったら回答があった:\n IDEA 10.5.2 Aspectj compiler - can\u0026rsquo;t determine superclass of missing type org.springframework.transaction.interceptor.TransactionAspectSupport\nAsk Question - Stack Overflow  ただし最も upvoted されている回答は何を言っているのかさっぱり理解できない。\n何にせよ今回トランザクションに関わることは行っていないし、所詮は lint のメッセージなのでXlint オプションでエラーレベルを下げて放置することにした。\n62ff366f3755cfd882b15bf6b2b8a4b49807b065:\n \u0026lt;weaveDirectories\u0026gt; \u0026lt;weaveDirectory\u0026gt;${project.build.directory}/classes\u0026lt;/weaveDirectory\u0026gt; \u0026lt;/weaveDirectories\u0026gt; + \u0026lt;Xlint\u0026gt;warning\u0026lt;/Xlint\u0026gt; \u0026lt;/configuration\u0026gt; 警告メッセージ対応 ここまでで mvn clean process-classes は正常終了するようになった。ただし、いくつかの warning が残っているのでそれらを対処した。\ncouldn\u0026rsquo;t find aspectjrt.jar on classpath aspectjrtを依存関係に追加した。\n5311573ab6b8dd45cf921e9d234e9e4fdd51e3a7:\n \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-aspects\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; + \u0026lt;dependency\u0026gt; + \u0026lt;groupId\u0026gt;org.aspectj\u0026lt;/groupId\u0026gt; + \u0026lt;artifactId\u0026gt;aspectjrt\u0026lt;/artifactId\u0026gt; + \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; bad version number found in /home/yuki/.m2/repository/org/aspectj/aspectjrt/1.9.4/aspectjrt-1.9.4.jar expected 1.9.2 found 1.9.4 aspectj-maven-plugin が利用すべきバージョンを明示した。\ne63eb7ce811d4081eded526d1310bcea33532c09:\n \u0026lt;/aspectLibrary\u0026gt; \u0026lt;/aspectLibraries\u0026gt; \u0026lt;/configuration\u0026gt; + \u0026lt;dependencies\u0026gt; + \u0026lt;dependency\u0026gt; + \u0026lt;groupId\u0026gt;org.aspectj\u0026lt;/groupId\u0026gt; + \u0026lt;artifactId\u0026gt;aspectjtools\u0026lt;/artifactId\u0026gt; + \u0026lt;version\u0026gt;1.9.4\u0026lt;/version\u0026gt; + \u0026lt;/dependency\u0026gt; + \u0026lt;/dependencies\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; 実行 mvn clean spring-boot:run  で所望の結果が得られた:\nHello, MyComponent  結果的に、ソースコードは当初の想定通りで、@Autowiredにコンポーネントがインジェクションされるような形で扱えた。\nおまけ Eclipse IDE の対応 pom.xml に aspectj-maven-plugin(fork でなくオリジナルの方)を設定すると m2e プラグインだったり AJDT だったり？をインストールしてくれようとするのだが、AJDT のリンクが死んでいるようでインストール全体が失敗する。\nAspectJ プロジェクトページからの AJDT リンクも死んでいる。\n結果、Eclipse IDE が実行するコンパイルでは weaving されない(ので別途mvn process-classesを実行する必要がある)。\n顧客が本当に欲しかったもの  @Component public class ApplicationContextProvider implements ApplicationContextAware { @NoArgsConstructor(access = AccessLevel.PRIVATE) private static class Holder { private static final Holder SINGLETON = new Holder(); private ApplicationContext applicationContext; } @Override public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException { Holder.SINGLETON.applicationContext = applicationContext; } public static ApplicationContext getApplicationContext() { return Holder.SINGLETON.applicationContext; } } Spring get current ApplicationContext - Stack Overflow の回答コードを参考にしたんだけど、原文がインナークラス 2 つも使っている意味がわからない。\n","description":"","id":205,"section":"blog","tags":["spring-boot"],"title":"Spring Bootで コンポーネント外からコンポーネントを取得したかった","uri":"https://yukihane.github.io/blog/201906/01/spring-boot-component-out-of-container/"},{"content":"動機 ユニットテスト実行時に java.time.Clock を挿げ替えてストップ・ザ・ワールド(GC的な意味でなくジョジョ的な意味で)したかった。\n考え方/方針 @Configuration で @Bean を定義して Clock をインジェクションできるようにし、実装ではそれを用いる。\nテストコードでは @TestConfiguration で上で定義した @Bean をオーバライドしてストップ・ザ・ワールド用Clockを供給する。\n少し迷う点としては、現時点(バージョン 2.1.5)のリファレンスには @TestConfiguration をテストクラスの static inner クラスとして作っておけば優先的に有効化されるように書かれているが、実際はエラーになる。\n2.1.0 よりデフォルトでは bean オーバーライドが許可されなくなったためだろう。\n対応としては、\n プロパティspring.main.allow-bean-definition-overridingをtrueに設定することでオーバライドを許可する テストの bean 供給メソッドに@Primaryを付与し優先的に用いるようにする  この際メソッド名は production の供給メソッドと被らないようにしなければならないようだった    が考えられたが、今回は後者を採用した。\nサンプルコード src/main/java/../ClockConfig.java:\n@Configuration public class ClockConfig { @Bean public Clock clock() { return Clock.systemDefaultZone(); } }  src/test/java/../ClockTest.java:\n@SpringBootTest(webEnvironment = WebEnvironment.NONE) public class ClockTest { private static final ZoneId TOKYO = ZoneId.of(\u0026quot;Asia/Tokyo\u0026quot;); @TestConfiguration static class TestDateTimeConfig { @Bean @Primary public Clock clockMock() { final LocalDate date = LocalDate.of(2010, 8, 15); final Instant fixedInstant = date.atStartOfDay(TOKYO).toInstant(); final Clock clock = Clock.fixed(fixedInstant, TOKYO); return clock; } } @Autowired private Clock clock; @Test public void stopTheWorld(){ final ZonedDateTime now = Instant.now(clock).atZone(TOKYO); assertThat(now.getYear()).isEqualTo(2010); } }  参考リンク  46.3.2 Detecting Test Configuration - Spring Boot リファレンス Add Annotation for bean overriding [SPR-17519] #22051  ","description":"","id":206,"section":"blog","tags":["spring-boot"],"title":"Spring Boot 2.1 でテスト時 @Bean を挿げ替えたかった","uri":"https://yukihane.github.io/blog/201905/31/spring-boot-bean-on-testing/"},{"content":" RestTemplate でレスポンスの Content-Type を変更する。  の別解。\n@Autowired private RestTemplateBuilder builder; ... final MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter(); converter.setSupportedMediaTypes(Arrays.asList(MediaType.TEXT_PLAIN)); final RestTemplate restTemplate = builder.additionalMessageConverters(converter).build();  ちなみに上記のようにコンバータを明示的に設定しない場合だと次のような例外になる \u0008:\norg.springframework.web.client.HttpClientErrorException$NotAcceptable: 406 Not Acceptable at org.springframework.web.client.HttpClientErrorException.create(HttpClientErrorException.java:89) at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:122) at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:102) at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63) at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:778) at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:736) at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:710) at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:463)  ","description":"","id":207,"section":"blog","tags":["spring-boot"],"title":"text/plain で JSON を投げつけてくるヤツに対処する","uri":"https://yukihane.github.io/blog/201905/21/spring-boog-json-convert/"},{"content":"解答 正しくない。\n Java9(JEP226)で変わったのはリソースバンドルの取り扱い(PropertyResourceBundle) であって プロパティファイル .properties 全般の話ではない。 プロパティファイル.propertiesの文字エンコーディングについての取り決めはない。それを取り扱うプログラム次第でありUTF-8を正しく認識してくれるとは限らない。  標準 API で UTF-8として(読もうと思えば)読めるようになったのは 1.6 からであって 9 からではない。ちなみに 1.5 以前は ISO 8859-1 前提。    背景 私はうろ覚えで何となく、現在の Java では .properties ファイルを UTF-8 で書ける、ascii2nativeは過去の遺物になった、のだと思いこんでいました。\nところが Spring Boot の application.properties に UTF-8 で日本語を書いたところ文字化けしてしまい、あれ、もしかして自分の理解が間違っているのかと思い調べ直したのがこの記事です。\n Read application.properties using ISO 8859-1 #10565  (このプルリクのコメントでも、まさに私と同じ勘違いをされてる方がいらっしゃいます)    この勘違いはおそらく自分だけではないと考えています。\n例えば \u0026ldquo;JEP226\u0026rdquo; で検索すると日本語非日本語ともに \u0026ldquo;JEP 226: UTF-8 Property Files\u0026rdquo; と紹介されている記事がヒットしますし(ちなみに少なくとも現在のオフィシャルなタイトルは \u0026ldquo;JEP 226: UTF-8 Property Resource Bundles\u0026ldquo;だと思うんだけど、これだけみんな Property Files Property Files 書いてるってことは途中で変わったの？)、 .properties ファイルを読み込む API は ResourceBundle.getBundleだ、的な説明が検索結果で上位に出たり、ということから想像できます。\n説明 リソースバンドルを取得する際に用いるメソッドResourceBundle#getBundle では InputStream を引数に取る PropertyBundle コンストラクタが用いられますが、このときの InputStream の charset が UTF-8 であるとみなすように バージョン 9 から変更されています。\n他方、 プロパティをInputStreamからロードするメソッド Properties#load(InputStream) の InputStream の charset は従来と変わらず ISO 8859-1 が前提です。\nなおどちらにも InputStream型でなくReader型を引数に取るものが バージョン 1.6 から用意されており、そちらを用いれば JDK に指定されているエンコーディング以外のリソースも読めます。\n","description":"","id":208,"section":"blog","tags":["java"],"title":"Java9以降.propertiesファイルをUTF-8で書けるようになった、は正しい？","uri":"https://yukihane.github.io/blog/201904/27/java-properties-is-not-utf8/"},{"content":"概要 (追記: ここで試したのは2.1.4.RELEASE時点のもの。2.2.0.M3以降では #14736の通り JUnit5 がデフォルトになっている模様。)\nspring-boot-starter-test の JUnit5 対応はこちらの issue:\n Investigate JUnit 5 starter upgrade #14736  現時点でいわゆる out-of-the-box では使えない。手を入れる必要がある。\nそこで試しにTesting the Web Layer のサンプルコードを JUnit4 から JUnit Jupiter に変更してみた(Maven 用の pom.xml のみ)。\n https://github.com/yukihane/gs-testing-web/tree/feature/junit-jupiter/complete  参考  Testing the Web Layer - Spring project\u0026rsquo;s guides SpringExtension for JUnit Jupiter - Spring Famework Testing  Testing Spring Boot Applications - Spring Boot reference   Provide dedicated Spring Boot starter for JUnit 5 #14716 - Spring Boot Issues Configuring Test Engines - JUnit 5 official guide  変更手順 詳しくは冒頭に記載した Git リポジトリ参照のこと。\n spring-boot-starter-test が junit(JUnit4)に依存しているので除外する。 (差分リンク) JUnit5 関連の依存関係を追加設定する。 junit-jupiter-engine, junit-jupiter-api (差分リンク) テストクラスに付与されているアノテーション @RunWith(SpringRunner.class) を @ExtendWith(SpringExtension.class) に置換する。 (差分リンク) @RunWith(SpringRunner.class) を単に削除する。  @ExtendWith(SpringExtension.class) は @SpringBootTest や @WebMvcTest に含まれるため明示的な設定は不要。   JUnit4 の import を JUnit Jupiter のものに置換する。(差分は上のものに含まれる)  備考 Hamcrest vs AssertJ  Spring Boot Starter adds both AssertJ and Hamcrest assertion libraries #15789  からは、 Spring Boot では AssertJ を使うことが推奨されているように感じる。ただし、\n Support AssertJ variant in MockMvc [SPR-16637] #21178  Consider AssertJ variant of MockMvc #5729    にあるとおり、 現時点では MockMvc が Hamcrest に依存しているので完全には Hamcrest を除外できない。\n@ExtendWith(SpringExtension.class) Spring Boot + JUnit5 + Kotlin でテストを書く - Qiita などでは本アノテーションを付与する旨記載されているが、Spring Boot のテストに用いるアノテーションには既に設定されているため、自分(テストコード記述者)が明示的に設定する必要は(もはや)ない。\n46.3 Testing Spring Boot Applications - Spring Boot リファレンス:\n If you are using JUnit 5, there’s no need to add the equivalent @ExtendWith(SpringExtension.class) as @SpringBootTest and the other @…Test annotations are already annotated with it.\n 及び関連する issue:\n Annotate @…Test annotations with @ExtendWith(SpringExtension.class) #13739  コンポーネントスキャン SpringBoot と JUnit5 で MockMvc を使うには - Qiita では\n ③ テストコンフィグファイルの作成\nこれが重要でした。個々のテストクラスで、コンポーネントスキャンしてクラスを参照できるようにしてあげます。\n と書かれているが、今回無くても動作した。\n","description":"","id":209,"section":"blog","tags":["spring-boot"],"title":"Testing the Web Layer のコードを JUnit Jupiter にマイグレーションしてみる","uri":"https://yukihane.github.io/blog/201904/16/migration-to-junit5/"},{"content":"やりたかったこと  BeanValidation のプロパティファイル ValidationMessages.properties でなく、 Spring のメッセージプロパティに統合したい。  Spring のメッセージプロパティとは？   Accept-Languageベースでメッセージを国際化したい。  調べた Spring のメッセージプロパティファイルはどこ？ これはキーワード \u0026ldquo;site:spring.io i18n message\u0026rdquo; でググるとすぐ見つかった。\n 27. Internationalization  messages.properties だ。\nまた、メッセージに関するプロパティは、このページで説明されている通り MessageSourceProperties で確認できる。\n例えば cacheDuration というフィールドがあるので application.properties ファイルには\nspring.messages.cache-duration  という名前で該当値を設定できる(フィールド名は camelCase だが、これに bind するプロパティ名は いわゆるkebab-case が推奨されている)。\nExternalized Configurationという仕組みだと思うが、 どうやって実現しているのかは分からん 。 MessageSourceProperties に ConfigurationProperties アノテーションが付いているわけでもなし。\nデフォルト設定値を調べる デバッガで追いかけた。 これ本当ならどうやってリファレンス探せば見つかるんだ？\nValidationAutoConfiguration#defaultValidator() メソッドだ。\nプロジェクト名(ディレクトリ名)から想像がつく通り、 Auto-configurationという仕組みだ。\n明示的な設定を行っていない場合、フレームワーク側でよしなに設定を行ってくれる。\n…が、その設定が気に入らない、というのが今回の問題のひとつの側面だ。\nここで登場するメソッド MessageInterpolatorFactory#getObject()で、お節介にも BeanValidation 側の MessageInterpolator を取ってきている。\nこのため冒頭で記載したとおりデフォルトで ValidationMessages.properties が使われるようだ。\nマジかよ？ なんでそんなとこで日和ってんねん！\nなおした 今回こうやった まずはじめに、今回の問題の本質とは無関係だが、fallback 先ロケール設定を変更しておく。デフォルトだとシステムロケール、つまり日本語環境なら messages.properties でなく messages_ja.properties にフォールバックしてしまうので直感に反する。\nそこで application.properties ファイルに次を設定。\nspring.messages.fallback-to-system-locale=false  Spring Tools 4 for Eclipse なら補完も効くし説明もポップアップ表示される。嬉しい。なお、もしかしたら他の IDE でも同様の機能はあるのかもしらんが、使ったこと無いのでわからない。\nさて本題。\n上記で登場した auto-configuration であるところの ValidationAutoConfiguration#defaultValidator() を上書きして自分好みにしてしまえばいい。\n@ConditionalOnMissingBean(Validator.class) が付与されているので、自前で Validator を提供するメソッドを作ってしまえば良いということだ。\nというわけでこんなクラスを作るぞ。\nimport javax.validation.Validator; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.MessageSource; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean; @Configuration public class MyConfig { @Autowired private MessageSource messageSource; @Bean public Validator localValidatorFactoryBean() { final LocalValidatorFactoryBean factoryBean = new LocalValidatorFactoryBean(); factoryBean.setValidationMessageSource(messageSource); return factoryBean; } }  LocalValidatorFactoryBean は javax.validation.Validator も org.springframework.validation.Validator も実装しているが、戻り値の型として使うべきは(@ConditionalOnMissingBeanで指定している型である)前者だ。間違えて後者を使うと想定どおり動作しないやっかいなバグになるぞ。\nちなみに戻り値の型指定、 javax.validation.Validator の代わりに LocalValidatorFactoryBean でも動作した。\ninstanceofで評価しているのだと思うが確証はない。\nさて MessageSource が登場しているがこれはなにか？ わからん 。\nググってたときにたまたま見つけた。\nいやもちろん名前通りメッセージリソースなのだが、ここまで見てきたリファレンスでは一切登場していない。\n27. InternationalizationとかMessageSourcePropertiesの javadoc とかで触れられているべきでは！？\nこいつはロケール考慮されているようで、デフォルトだと AcceptHeaderLocaleResolverを使って 冒頭に記載した希望通りAccept-Languageを考慮してくれるようだがいい加減調べるのに疲れたので裏はとっていない。\n多分このへん読めば良いのだろう。\nところで この部分の調査の過程で LocalValidatorFactoryBean #setValidationMessageSourceに解答っぽい記述があることに気づいた。\nが、 この文章見て具体的に何やればいいかわからんのだが？ そもそも このメソッドの存在をどうやったら見つけられるんだ？\nやっかいなことに Spring(Boot)のやりかたは上に書いた方法だけではないようだ。次のエントリで同じ目的を達成するための方法が説明されている。\n Spring Boot でバリデーションエラーメッセージを日本語にしてみる - Qiita  WebMvcConfigurerAdapter(注: 現行バージョンでは代わりに WebMvcConfigurer)って何やねんどこから出てきた？\nどっちで設定すべきやねーん！\n追記 ロケールについて 上で端折った i18n について調べ直した。デバッガのステップ実行で。\nLocaleContextHolder#getLocale() でロケールを取得している。\nこいつを使っているのが MessageInterpolator(を実装した実体 LocaleContextMessageInterpolator の interpolate メソッド だ。\nServletFilter であるところの RequestContextFilter で HttpServletRequest#getLocale() をロケールとして設定している。\nしたがって、　HTTP リクエストコンテキストでは (補足: なんか Qiita の他の人の記事とかではコンテキストを無視して説明している文章が多いぞ。別に validation は RequestScope だけで行うわけではなかろう)、ロケールは HttpServletRequest#getLocale() の値となるし、それ以外のコンテキストでもそのコンテキストに応じたロケールを設定してくれていると期待できることが分かった。\nWebMvcConfigurer ここにあった！\n 1.10.4. Validation - Spring Framework Documentation \u0026gt; Web Servlet  何が Spring Boot で何が Spring なのか全然分からん。\nいや、よく考えると auto-configuration はあくまで付加的な仕組みであって、そこから行うべきことを考えるのは筋が違うな。\nということは WebMvcConfigurer で設定するのが本来の姿なのだろうか。\nしかし Validation の、国際化の仕組みの設定が WebMvcConfigurer という名前のものに備わっているというのはどうやって思い至れば良いんだろう？\nもしかしたらこういう手順か？\n Spring Boot リファレンスの該当しそうな章 37.Validation を見る。 @Validated という validation 専用っぽいアノテーションが使われているぞ。 javadoc の記述を読むと Spring MVC という単語が出てるので、validation の仕組みは Spring MVC の機能のひとつなんだ？ Spring Framework ドキュメントのリストを見ると Spring MVC はWeb Servletに含まれているようだ？ Servlet と validation って何か関係があるのか？よく分からんが見てみよう。 該当する節 1.10.4. Validationが見つかった！なるほど 設定は WebMvcConfigurer で行うのか！ 関係しそうな名前 getValidator()ってメソッドがあるぞ！  マジでこんなこと考えるの？無理ゲーじゃない？\nあとこれから更に LocalValidatorFactoryBean インスタンスを生成して返すってのに気付くのにもまた一山超える必要がありそうだし。\nまとめ  Spring 全然わからん。 Qiita のスタイル、バックスラッシュでくくるとハイパーリンク貼ってるのかどうなのかわからんからいまいち。 Qiita 等で Spring( Boot)解説エントリを書いている人に向けて: 根拠となる公式リファレンス/ソースコードへの参照も含めてほしい。あなたの書いたその実装方法が妥当なのか入門者は確認できない。  ","description":"","id":210,"section":"blog","tags":["spring-boot"],"title":"Spring Validator(でラップされたBean Validation)のメッセージをi18nしたときの覚え書き","uri":"https://yukihane.github.io/blog/201903/26/change-spring-validator-message/"},{"content":"他の方が同じ話題で次のエントリを書かれていましたが、gulp 何それ状態なので理解できませんでした。理解できる方はそちらの方が良いのかもしれません。\n RPG ツクール MV プロジェクトをバージョン管理したい話 - Qiita  問題 RPG ツクール MV のリソースをバージョン管理したい。\njson, js の差分が見られると嬉しいが、そのまま git diff, git diff --word-diff してもみづらい。\n対策 json, js ファイルについて、RPG ツクール MV が出力したファイルをそのまま管理対象にするのではなく、commit 前に整形して管理することで差分を見やすくする。\n今回、整形には prettier を用いることにした。\n設定手順 RPG ツクール MV 上でプロジェクトを新規作成し、プロジェクトディレクトリに行く。\nついでに無駄に付与されている実行権限も落とす。\ncd ~/Documents/Games/Project1 find . -type f -print0|xargs -0 chmod 644  git 初期化、初期コミット。\ngit init git commit --allow-empty -m init curl -L -o .gitignore https://gitignore.io/api/node,visualstudiocode git add .gitignore git commit -m gitignore git add . git commit -m \u0026quot;auto-generated files\u0026quot;  (以後、適宜 git commit )\nnpm プロジェクト初期化実行。\nnpm init -y  prettier と、オンデマンド実行用プラグインをインストール。\nnpm i -D prettier husky lint-staged onchange  js/plugins.js は整形すると正常動作しなかったので整形対象外に設定しておく。\necho \u0026quot;js/plugins.js\u0026quot; \u0026gt;\u0026gt; .prettierignore  npm run format コマンドで明示的に整形、また、 npm run prettier-watch コマンドでファイル変更を検知して自動整形するように設定。\n(参考: CLI, Watching For Changes)\npackage.json:\n{ ... \u0026quot;scripts\u0026quot;: { \u0026quot;format\u0026quot;: \u0026quot;prettier --write **/*.js **/*.json\u0026quot;, \u0026quot;prettier-watch\u0026quot;: \u0026quot;onchange '**/*.js' '**/*.json' -- prettier --write {{changed}}\u0026quot; }, ... } husky と lint-staged を使って git-commit 時に自動整形するように設定。\n(参考: Pre-commit Hook - Option 1. lint-staged)\npackage.json:\n{ ... \u0026quot;husky\u0026quot;: { \u0026quot;hooks\u0026quot;: { \u0026quot;pre-commit\u0026quot;: \u0026quot;lint-staged\u0026quot; } }, \u0026quot;lint-staged\u0026quot;: { \u0026quot;*.{js,json}\u0026quot;: [ \u0026quot;prettier --write\u0026quot;, \u0026quot;git add\u0026quot; ] }, ... } 自動生成されたコードを整形してコミットしておく。\nnpm run format git commit -am \u0026quot;format codes\u0026quot;  ","description":"","id":211,"section":"blog","tags":["rpg-maker"],"title":"RPGツクールMVをバージョン管理するための初期設定","uri":"https://yukihane.github.io/blog/201903/24/versioning-rpg-maker/"},{"content":"例えば、生 JDBC でchar型カラムのクエリを書くとString型にマップされます\n final Connection connection = DriverManager.getConnection(...); final Statement statement = connection.createStatement(); final ResultSet resultSet = statement.executeQuery(\u0026quot;select char_column from foo_table\u0026quot;); // java.lang.String resultSet.getMetaData().getColumnClassName(1);  が、Hibernate の Native query を用いて同じように実行するとCharacter型にマップされます:\n final EntityManagerFactory factory = Persistence.createEntityManagerFactory(...); final EntityManager em = factory.createEntityManager(); final Query q = em.createNativeQuery(\u0026quot;select char_column from foo_table\u0026quot;, Tuple.class); final List\u0026lt;Tuple\u0026gt; res = q.getResultList(); // java.lang.Character res.get(0).get(0).getClass();  この挙動を決めているのは org.hibernate.dialect.Dialectのこの辺りです:\n registerHibernateType( Types.CHAR, StandardBasicTypes.CHARACTER.getName() ); registerHibernateType( Types.CHAR, 1, StandardBasicTypes.CHARACTER.getName() ); registerHibernateType( Types.CHAR, 255, StandardBasicTypes.STRING.getName() );  この挙動を変えるには、カスタムの Dialect を実装し、それを persistence.xml なりで指定するようにします。\nカスタム Dialect の例:\npackage com.example.dialect; import java.sql.Types; import org.hibernate.dialect.H2Dialect; import org.hibernate.type.StandardBasicTypes; public class H2CustomDialect extends H2Dialect { public H2CustomDialect() { super(); registerHibernateType(Types.CHAR, StandardBasicTypes.STRING.getName()); registerHibernateType(Types.CHAR, 1, StandardBasicTypes.STRING.getName()); registerHibernateType(Types.CHAR, 255, StandardBasicTypes.STRING.getName()); } }  参考:\n HHH-2304 Wrong type detection for sql type char(x) columns JDBC API 入門 - 9. SQL と Java の型のマッピング  ","description":"","id":212,"section":"blog","tags":["hibernate","java"],"title":"Hibernate で CHAR を String にマップする","uri":"https://yukihane.github.io/blog/201902/04/hibernate-map-char-to-string/"},{"content":"最新の JDK をインストールしたが、古いバージョンの Eclipse も利用したい(が最新のバージョンでは起動できない)ような場合に必要となる設定です。\n設定するファイルと設定方法 Eclipse.app/Contents/Eclipse　にある eclipse.ini に、所望のバージョンの java コマンドが入っているディレクトリを指定します。\n/usr/libexec/java_home -V で JAVA_HOME 候補一覧が参照できますので、このディレクトリ + /bin を指定することになります。\n例えば\n$ /usr/libexec/java_home -V Matching Java Virtual Machines (2): 11.0.1, x86_64: \u0026quot;OpenJDK 11.0.1\u0026quot; /Library/Java/JavaVirtualMachines/openjdk-11.0.1.jdk/Contents/Home 1.8.0_192, x86_64: \u0026quot;Java SE 8\u0026quot; /Library/Java/JavaVirtualMachines/jdk1.8.0_192.jdk/Contents/Home  のような状況で、 バージョン 1.8 を Eclipse を実行する JVM として指定したい場合には、冒頭で説明した eclipse.ini に\n-vm /Library/Java/JavaVirtualMachines/jdk1.8.0_192.jdk/Contents/Home/bin  と追記します。\nなお追記する行は-vmargsより上にしてください。\n参考: https://wiki.eclipse.org/Eclipse.ini#-vm_value:_Mac_OS_X_Example\nおまけ Eclipse がどの JVM で実行されているのかを調べるには？ メニューの Eclipe \u0026gt; Eclipse について で \u0026ldquo;About Eclipse\u0026rdquo; ダイアログを開き、\u0026ldquo;Installation Details\u0026quot;ボタン \u0026gt; \u0026ldquo;Configuration\u0026quot;タブに表示されている情報から -vm オプションを探します。\n-vmを明示的に指定しなかった場合には何が使われるの？  If not specified, the Eclipse executable uses a search algorithm to locate a suitable VM.\n 参考: The Eclipse runtime options - Eclipse documentation\n/usr/binを指定しておけばJAVA_HOMEを切り替えるだけで良いんじゃ？ 確かに javaコマンドを実行したときのバージョンが切り替わるのですが、Eclipse には効かないようです。\nこのように指定した場合、 /usr/libexec/java_home で出力される場所のバージョンを用いるようです。\nこの出力は通常インストールされているバージョンのうち最新のものとなっているでしょう。\nなお、起動に失敗した場合には、その時使用しようとした JVM の情報はエラーログ(場所は起動失敗時のエラーダイアログに示されます)に出力されています。\n/usr/libexec/java_home の出力を切り替えることはできるの？ 実際には、/usr/libexec/java_home -V の最上行が/usr/libexec/java_homeとして出力されているように見えます。\nこの並びは、 /Library/Java/JavaVirtualMachines/\u0026lt;それぞれのバージョンディレクトリ\u0026gt;/Contents/Info.plist　に書かれている JVMVersion値の逆順になるようなので、この値を書き換えることにより　/usr/libexec/java_home　出力結果をすげ替えることが可能です。\n参考: How can I change Mac OS\u0026rsquo;s default Java VM returned from /usr/libexec/java_home - Stack Overflow\n","description":"","id":213,"section":"blog","tags":["mac","java","eclipse"],"title":"Eclipseの起動に使用するJDKを指定する（Mac）","uri":"https://yukihane.github.io/blog/201901/16/set-jvm-to-eclipse-on-mac/"},{"content":"Ubuntu を 18.04 にアップグレードしたら端末の補完処理で tab キーを押す度にヴヴッという不快なビープ音が鳴るようになってしまった。\n端末のメニューから 設定 を選択し設定ダイアログを開く。\nダイアログで自分の使用しているプロファイル(ここではデフォルト)を選択し、文字タブのSoundオプションで端末ベルを鳴らすのチェックを外せば OK。\n参考: How to remove terminal error sound? - Ask Ubuntu\n","description":"","id":214,"section":"blog","tags":["ubuntu"],"title":"Ubuntu18.04 端末の不快なエラー音 消す方法","uri":"https://yukihane.github.io/blog/201811/10/ubuntu-mute-tab-sound/"},{"content":"Java の有償化ってより身近なところでは GPL 化と言った方が現状に即してるな、と思っています。\nそれはともかく、何となく OpenJDK をデバッグ情報付きでビルドしたくなったのでメモ。\n参考リンク  Building OpenJDK - http://hg.openjdk.java.net/jdk10/jdk10/raw-file/tip/common/doc/building.html  OpenJDK10 のもの。11 のものは(まだ？)無さそう 後述の通り、freetype の指定は不要となっているなど、多少 configure の引数が異なる   JDK 11 General-Availability Release - http://jdk.java.net/11/  OpenJDK11 のリリースページ    環境/準備物  Windows10Pro, 1803 - https://portal.azure.com  ビルド環境 今回は Azure の仮想マシンの標準構成を利用   JDK10 - https://www.oracle.com/technetwork/java/javase/downloads/index.html#JDK10  ビルドするのに 1 つ前のメジャーバージョンの JDK が必要。ただし実際には同じメジャーバージョンでも良いと思われる(つまり今回なら 10 か 11 をインストール) 今回は OracleJDK を用いたが、他の JDK でももちろん良いだろう   Cygwin - https://www.cygwin.com/  導入したパッケージ: mercurial, zip, unzip, make, autoconf 補足すると、上のものに加えて自分は vim も入れた その他 bash, tar も必要とかかれていたが、おそらく初めから入っている   Visual Studio 2017 Community - https://visualstudio.microsoft.com/ja/downloads/  多分 IDE は必要無く、Windows SDK だけ入れれば良いのだと思うが、詳しくないので分からなかった インストール時オプションは「Desktop development with C++」にのみチェックを入れた    ビルド手順 Windows Defender 設定 私自身が下記手順を実施中、タスクマネージャで見ると「Antimalware Service Executable」がかなり CPU を使用していました。\n作業高速化を図る場合、必要に応じて、Windows Defender を OFF にしたりチェック対象ディレクトリから今回の作業ディレクトリを除外する設定を行います。\nビルドに必要なアプリケーションのインストール 上述の通りです。\nただし、次の OpenJDK ソースのチェックアウトに時間がかかるので、cygwin を先にセットアップし、ソースをチェックアウトしながらそれ以外のアプリケーションをインストールするのが良いと思います。\nOpenJDK ソースコードのチェックアウト 今回作業ディレクトリは /cygdrive/c/openjdk としました。\nまた、チェックアウトしたタグjdk-11+28は冒頭に記載した OpenJDK リリースページに書いてあったものです(結果的には、HEAD のソースのようでした)。\nmkdir /cygdrive/c/openjdk cd /cygdrive/c/openjdk hg clone http://hg.openjdk.java.net/jdk/jdk11 -r jdk-11+28  ダウンロードに 30 分強、ローカルファイルシステムへの展開に 30 分強、合計で 1 時間以上かかりました。\nconfigure cd /cygdrive/c/openjdk/jdk11 bash configure --disable-warnings-as-errors --enable-debug  configure オプション等説明 \u0026ndash;enable-debug 今回自分はデバッグ情報が欲しかったので--enable-debugを付与しています。不要であれば取り除きます。\n\u0026ndash;disable-warnings-as-errors --disable-warnings-as-errorsは本来不要だと思うのですが、現状のコードではこのオプションが無い場合次の警告でビルドがストップしてしまいます。\n jvmFlagRangeList.cpp(341): warning C4305: \u0026lsquo;argument\u0026rsquo;: truncation from \u0026lsquo;const intx\u0026rsquo; to \u0026lsquo;double\u0026rsquo;  freetype について OpenJDK10 のビルドドキュメントでは freetype を何らかの形で指定する必要があるよう書かれていますが、OpenJDK11 では freetype ソースもバンドルされているようで、Windows ビルドではデフォルトでそれが用いられるようになっています。\n従って特に何か行う必要はありません。\nmake make  ちょうど 30 分ほどかかりました。\n正常終了すると、build/windows-x86_64-normal-server-fastdebug/jdkに成果物一式が出来上がっています。\njava -versionの出力は次の通り:\nopenjdk version \u0026quot;11-internal\u0026quot; 2018-09-25 OpenJDK Runtime Environment (fastdebug build 11-internal+0-adhoc.yukihane.jdk11) OpenJDK 64-Bit Server VM (fastdebug build 11-internal+0-adhoc.yukihane.jdk11, mixed mode)  ","description":"","id":215,"section":"blog","tags":["windows","java"],"title":"OpenJDK11をWindowsで自前ビルドする","uri":"https://yukihane.github.io/blog/201809/30/selfbuild-openjdk/"},{"content":"v1 で実験的サポートだった PowerShell が、実行環境のバージョンが上がったとかで v2 になり、選べなくなっているみたい？一時的な話？\n実行環境を作る https://portal.azure.com/ から 「リソースの作成」「Serverless Function App」と選択していきます。\n入力項目を適当に埋めていきます。PowerShell で作りたいので当然ながら1OS は「Windows」、ランタイムスタックは「.NET」。\nApplication Insights は何かよく分からないのでオフ\nにしました。\n入力を終え画面下部の「作成」ボタンを押すとデプロイ作業が始まり、少し待たされます。\nデプロイ作業が完了すると通知が表示されます。その通知からも行けますし、そうでない場合は画面左の「Function App」メニューから関数作成ウィザードに行けます。\n「関数」ツリーメニューの右にあるプラスアイコンをクリックし、その次に今回作りたいプロジェクトのひな型を選びます。\n今回は「In-portal」を選択しました。\n選択が完了したら画面下部の「続行」ボタンを押します。\n今回タイマー駆動の処理が行いたいので「タイマー」を選択し、その後画面下部の「作成」ボタンを押します。\nすると…めでたく C#の関数が生成されました！\nってなんでやねん！PowerShell で作りたい言うとるやろ！言語選ばせろや 💢\n作成した実行環境の設定を変更する ランタイムバージョンを変更する 現在デフォルトのランタイムバージョンが 2 なので 1 に下げます。PowerShell は今のところバージョン 1 でしか選択できません。\nまず、先ほど作成した関数を削除します。残したままだと設定変更できません。\nツリーメニュー上で、作成した関数名の 1 つ上の階層「関数」メニューを選択し、表れた関数名一覧の右端にあるごみ箱アイコンを選択し削除実行します。\nつづいて、先ほど選択した関数メニューの更に 1 階層上、\u0026lt;app 名\u0026gt;(ここでは hello-azure-functionz)を選択し、右側の表示「プラットフォーム機能」タブがアクティブであることを確認します。\nそのタブ表示の中から、「Function App の設置」を選択します。\n「ランタイムバージョン」が「~2」になっているので、これを 「~1」に変更します。\nアプリケーション設定 FUNCTIONS_WORKER_RUNTIME を削除する 本来であれば、ここまでの設定を行えば v1 がサポートしている言語が使えて然るべきだと思うのですが、まだ PowerShell がウィザードに表れません。\nそこで次に説明する設定変更を行います。\nさきほどの「プラットフォーム機能」タブに戻り、今度は「アプリケーション設定」を選択します。\n開いたタブを少し下にスクロールし、「アプリケーション設定」セクションを探します。\nこの中で「FUNCTIONS_WORKER_RUNTIME」というアプリ設定名がありますので、これを削除します。\nそして、その画面の上部にある「保存」アイコンを選択し変更を反映してください。\n設定は以上です。\nPowerShell 関数を作成してみる PowerShell 関数を作成できるようになっていることを確認してみましょう。\n関数を新規作成するために、「関数」メニュー右のプラスアイコンを選択します。\nそうすると、設定変更作業前とは異なる画面が表示されます。\nここで「カスタム関数を作成する」を選択します。\n次の画面で、「実験的な言語のサポート」を有効にすれば選択肢に PowerShell が表れます。\nここでは「Timer trigger」を選択します。\n言語で「PowerShell」を選択し、あとは適当に入力して「作成」を押せば関数作成完了です。\n参考  unable to create a python function app in azure function runtime v1 - Stack Overflow   いや AWS Lambda の PowerShell(Core)環境は Amazon Linux なので当然ということでもないか。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","description":"","id":216,"section":"blog","tags":["azure"],"title":"Azure FunctionsでPowerShell使えなくなっとる","uri":"https://yukihane.github.io/blog/201809/29/pwsh-on-azure-function/"},{"content":"進捗状況(progress)が表示されているそうです。少量のデータを扱っている場合には画面の一部がフラッシュしているように見えており、何のための画面効果かさっぱりわかりませんでした(ので検索キーワードすら思い浮かびませんでした)。\n$progressPreference = 'silentlyContinue'  で抑制できるようです。\n参考: powershell - Hide progress of Invoke-WebRequest - Stack Overflow\n","description":"","id":217,"section":"blog","tags":["windows","pwsh"],"title":"Invoke-WebRequestやCompress-Archiveを使っていると画面上部に一瞬表示される何かの表示を非表示に","uri":"https://yukihane.github.io/blog/201809/08/pwsh-progress-silent/"},{"content":"vagrantでrsyncが使いたくなった。\nそこでscoopでrsyncをインストールしようとしたが、見つからない。\nおや？と思い検索してみると次の issue が。\nrsync free version is no more #2506\nつい最近、 https://www.itefix.net/dl/cwrsync_5.7.2_x86_free.zip が無くなったそうだ。\n代替策としては、\nhttp://repo.msys2.org/msys/x86_64/rsync-3.1.3-1-x86_64.pkg.tar.xz\nを用いるのがよさそうだ。\nおそらく早晩scoopコマンドで入手可能となろうが。\nrefs: https://github.com/lukesampson/scoop/pull/2431\n","description":"","id":218,"section":"blog","tags":["windows","scoop"],"title":"Windows向けrsyncがなくなったみたい？","uri":"https://yukihane.github.io/blog/201808/22/windows-rsync-unavailable/"},{"content":"vim は ~/.vim ディレクトリを読むのに対し gvim は~/vimfilesディレクトリを読むためだそうです。Windows ならジャンクションを作りましょう。\ncd /d %homepath% mklink /j vimfiles .vim  参考:\n neovim Unknown function: plug#begin gvim on windows  ","description":"","id":219,"section":"blog","tags":["windows","vim"],"title":"vim で E117 未知の関数です","uri":"https://yukihane.github.io/blog/201808/08/gvim-unknown-function/"},{"content":"あるいは vim-plug をセットアップしたら git commit したときに E492: Not an editor command って怒られるようになっちゃった。\nVagrant で CentOS の Box を作るたびにひっかかる。\nGit が使う editor を(vi でなく)vim に設定すればよい。\n GIT_EDITOR環境変数 core.editor設定 VISUAL環境変数 EDITOR環境変数 コンパイル時の設定(通常vi(ただし Ubuntu はnanoだった))  の優先順位で利用されるエディタが決定する(git-var(1))ので、何も設定していなければ(大抵の場合)viが使用される。\nvimが使われるように設定しておこう。例えば、次のように:\ngit config --global core.editor $(which vim)  ","description":"","id":220,"section":"blog","tags":["git"],"title":"gitで利用するエディタを設定したかった","uri":"https://yukihane.github.io/blog/201807/27/set-git-commit-editor/"},{"content":"M2_HOME は削除されました。\n MNGSITE-283 Remove M2_HOME from documentation MNG-5607 Don\u0026rsquo;t use M2_HOME in mvn shell/command scripts anymore 3.5.0 リリースノート \u0026ldquo;Based on problems in using M2_HOME related to different Maven versions installed and to simplify things, the usage of M2_HOME has been removed and is not supported any more MNG-5823, MNG-5836, MNG-5607.\u0026rdquo; (変更 commit)  敢えて設定するのであれば、 上の変更 commit リンク先にある通り、M2_HOMEでなくMAVEN_HOMEにしましょう。\nただし、敢えて設定すべき状況は通常発生しないと思います。\n","description":"","id":221,"section":"blog","tags":["java"],"title":"M2_HOMEは不要","uri":"https://yukihane.github.io/blog/201807/25/not-required-m2_home/"},{"content":"git-archive使えば何とかなることに気付きました。\nちなみにunzipコマンドは標準で使えます。\nmkdir workrepo cd workrepo git init cp -r [target_file_or_dir] . git add . git commit -m commit git archive -o ../myarchive.zip @ cd .. rm -rf workrepo  あんまり自信ないんですけどスクリプトファイルに落とすとこんな感じ？\n#!/usr/bin/bash set -eu unset workdir onexit() { if [ -n ${workdir-} ]; then rm -rf \u0026quot;$workdir\u0026quot; fi } trap onexit EXIT workdir=$(mktemp --tmpdir -d gitzip.XXXXXX) cp -r \u0026quot;$2\u0026quot; \u0026quot;$workdir\u0026quot; pushd \u0026quot;$workdir\u0026quot; git init git add . git commit -m \u0026quot;commit for zip\u0026quot; popd git archive --format=zip -o \u0026quot;$1\u0026quot; --remote=\u0026quot;$workdir\u0026quot; HEAD  ","description":"","id":222,"section":"blog","tags":["windows","git"],"title":"Git for Windowsでzipコマンドを再現する","uri":"https://yukihane.github.io/blog/201807/13/zip-on-git-for-windows/"},{"content":"手順  FacesInitializer#onStartupでやっていることを自力で書く 標準パス(WEB-INF/classes)に無いので、ManagedBeanアノテーションを付与したクラスを自前で収集する  ソースは: https://github.com/yukihane/hello-undertow-mojarra\n関連  Tomcat 上で JSF 実現 - Qiita Does Undertow work with JSF? - Stack Overflow  ","description":"","id":223,"section":"blog","tags":["java"],"title":"Undertow上でJSF実現","uri":"https://yukihane.github.io/blog/201807/08/jsf-on-undertow/"},{"content":"Java でメッセージを英語にする 環境変数 JAVA_TOOL_OPTIONS に設定しよう。\nexport JAVA_TOOL_OPTIONS=\u0026quot;-Duser.language=en -Duser.country=US\u0026quot;  ","description":"","id":224,"section":"blog","tags":["java"],"title":"エラーメッセージでググろうと思ったんだけど日本語だからかヒットしない","uri":"https://yukihane.github.io/blog/201807/08/java-compiler-error-in-japanese/"},{"content":"非 JavaEE なサーブレットコンテナ上で JSF を実行するように変更する手順。\nTL;DR  Mojarra を依存関係に含める JSF リソースを javax.faces.webapp.FacesServlet にマップするよう web.xml で設定する  実装例 https://github.com/yukihane/hello-jsf/tree/feature/server/tomcat\nfeature/server/tomcat ブランチと feature/server/javaee ブランチで diff を取れば、 JavaEE アプリケーションサーバ向け設定との差異がわかります。\n(ちなみに masterブランチや README.md の説明は別の内容向けなので気にしないで下さい)\n手順 通常の(JSF 未対応の)warに対し、Mojarra 依存関係を追加します。\npom.xml\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.glassfish\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;javax.faces\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.2.4\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;  (余談ですが、初見でこのgroupId, artifactIdからこれが Mojarra 本体だとわかるだろうか、いやわからない。)\n次にweb.xmlで(今回の例では)拡張子xhtmlファイルへのアクセスを MojarraJSF プロセスエントリポイントへマップします。\nsrc/main/webapp/WEB-INF/web.xml:\n\u0026lt;servlet\u0026gt; \u0026lt;servlet-name\u0026gt;faces\u0026lt;/servlet-name\u0026gt; \u0026lt;servlet-class\u0026gt;javax.faces.webapp.FacesServlet\u0026lt;/servlet-class\u0026gt; \u0026lt;load-on-startup\u0026gt;1\u0026lt;/load-on-startup\u0026gt; \u0026lt;/servlet\u0026gt; \u0026lt;servlet-mapping\u0026gt; \u0026lt;servlet-name\u0026gt;faces\u0026lt;/servlet-name\u0026gt; \u0026lt;url-pattern\u0026gt;*.xhtml\u0026lt;/url-pattern\u0026gt; \u0026lt;/servlet-mapping\u0026gt;  以上です。\n","description":"","id":225,"section":"blog","tags":["jsf","java","tomcat"],"title":"Tomcat上でJSF実現","uri":"https://yukihane.github.io/blog/201807/07/jsf-on-tomcat/"},{"content":"はじめに  他者が作成したプログラムにちょっと変更を加えて使いたい その言語は未経験だけれど、コードの変更自体は検索したり周辺コードのコピペで何とかなりそう しかし、変更したコードをどうやってビルドすれば良いんだ…？  なんてことがたまにあります。\nそんな時に参考になるようなドキュメントを目指して記述しました。\nプロジェクトの構造を確認する ビルドするソースコード一式を取得したら、ディレクトリ構成を確認します。\nプロジェクトルートディレクトリに pom.xml というファイルがあれば本ドキュメントが対象としている Java プロジェクトです。\nan-app ├── pom.xml └── src ├── main │ ├── java │ │ └── (ディレクトリ階層とJavaソースコード) │ └── resources │ └── (ディレクトリ階層とリソースファイル) └── test ├── java │ └── ... └── resources └── ... 複数のモジュールで構成されている場合は次のように入れ子になっている場合もあります:\nan-app-parent ├── an-app-core │ ├── pom.xml │ └── src │ └── ... ├── an-app-lib │ ├── pom.xml │ └── src │ └── ... └── pom.xml この場合、それぞれのディレクトリがpom.xmlを持ちます。\npom.xml は プロジェクト構造を記述するファイルで、Apache Maven が使用します。\nJava では Maven 以外にも同じようにプロジェクト構造を管理するアプリケーションがあります。それぞれルートディレクトリに固有のファイルやディレクトリを作成しますので、そのファイル/ディレクトリを見れば何でプロジェクトが管理されているか分かる、ということになります。\n本ドキュメントの対象外ですが、一例を示します。\n   ファイル 説明     build.gradle Gradle管理プロジェクト。Android プログラムの標準はこれ。   build.xml Apache Ant管理プロジェクト。Maven が主流になる前のデファクトスタンダード。歴史のあるプロダクトでまだ利用されていることも。    ビルドに必要なアプリケーションをインストールする 必要な Java バージョンを調べる ビルドに必要な Java のバージョンを調べておきます。\n基本的には実行環境と同じバージョンでビルドすれば良いはずなので、エンドユーザ向けドキュメントが付属しているのであれば、そこに必要とする Java のバージョンが書かれているでしょう。\nあるいは、ルートディレクトリにあるpom.xmlを開き、次の項目の値を調べてみても良いでしょう。通常、どちらか一方にコンパイルに使用する Java のバージョンが記載されています(参考)。\n project \u0026gt; properties \u0026gt; maven.compiler.source maven-compiler-plugin という単語を検索し、その下に書かれている configuration \u0026gt; source  なお、 Java5 から Java8 までは、 Javan と Java1.n というのは同じものを指します( Java8 = Java1.8 )。\nバージョン 9 以降は、単に Java9 , Java10 と言い、 Java1.9 や Java1.10 という呼び方はしません。\nバージョンが分からなかったら？ 取り敢えず、現時点では 1.8 を利用することにしておけば問題が起こりにくいでしょう。\n1.8 までは概ね後方互換性を保っていますが、9 以降はコンパイルオプションが変わったりしており、必ずしも過去に作成したソースがそのまま通るとは限りません。\nアプリケーションのダウンロードしインストールする 次の通り、JDK 及び Maven をダウンロードし、インストールします。\nJDK 上で確認したバージョンの JDK をインストールします。\nLinux であればパッケージマネージャから OpenJDK がインストールできるでしょう。\nWindows であれば Oracle のサイトから OracleJDK インストーラをダウンロードするのが簡単でしょう。\nOpenJDK/OracleJDK どちらの実装でも大抵は問題ないはずですが、保守的に行くのであれば OracleJDK をインストールする方が無難と言えます。\nOracleJDK は次の URL からダウンロードできます。\n http://www.oracle.com/technetwork/java/javase/downloads/index.html  古いバージョンが必要な場合は、このページの下の方にあるリンク、\u0026quot;Java Archive\u0026ldquo;をたどります。\nダウンロードするのは JRE ではなくJDKです。これは OpenJDK を導入する場合も同様です。\nJRE は実行環境のみで、コンパイラなどを含んでいません。\nApache Maven 次の URL から最新版(本ドキュメント記載時点で 3.5.3 )をダウンロードし、適当な場所に展開します。Linux であればパッケージマネージャからインストールできるかもしれませんが、バージョンが古い場合もありますので注意してください。\n https://maven.apache.org/download.cgi  binディレクトリにPATHを通しておきましょう。\n環境変数設定(必須ではない) モノによっては次の環境変数を要求するものもあります。何かそれっぽいエラーが出たら本節を思い出して設定してみてください。\n具体的な設定値については検索してください。\n   環境変数名 説明     JAVA_HOME Java インストール場所を設定する   M2_HOME Maven インストール場所を設定する(最新版を使用していればこれを要求されることはないはずですが)    ビルドする プロジェクトルートディレクトリで次のコマンドを実行します。\nmvn -Dmaven.test.skip clean package ビルドが成功すると、targetディレクトリ直下に所望のファイルが生成されているはずです。\n以上です。おつかれさまでした。\nアンインストールする 行いたい作業を終えたら、環境をクリーンアップします。\n能動的に行ったこと以外で変わっていることとしては、ホームディレクトリに Maven のキャッシュディレクトリ .m2 ができていますので、これを削除するのを忘れずに。\nその他情報 IDE(Eclipse)を使用する ソースコードを改変しようとした場合、あまり慣れていない言語なのでコード補完が欲しくなります。\nそこで Eclipse の導入手順についても触れておきます。\nダウンロードとインストール 次のページの Eclipse IDE for Java Developers をダウンロードし適当な場所に展開します。\n http://www.eclipse.org/downloads/eclipse-packages/  展開したディレクトリのeclipeコマンド(Windows はeclipse.exeかも？)で起動できます。\n補完ショートカットキーの確認/変更 Preferencesメニュー(Ubuntu の場合 Window \u0026gt; Preferences )を選択します。\n開かれたダイアログのツリーメニューで General \u0026gt; Keys を選択し、 Content Assist コマンドを検索しましょう。ここで設定されているBindingが補完ショートカットキーです。\nプロジェクトのインポート メニューで File \u0026gt; Import を選択し、ダイアログのツリーメニューで Maven \u0026gt; Existing Maven Projectsを選択します。その後、編集対象のディレクトリを指定すれば完了です。\nおわりに 実は私はこれから C#を学ぼうと思っています。\nそんな状況で、こういうドキュメントが有れば良いのに、というのが思い浮かんだので自分がよく知っている言語である Java 版を作成してみました。\nだれか C#版をください…\n","description":"","id":226,"section":"blog","tags":["java"],"title":"Building Java Project","uri":"https://yukihane.github.io/blog/201805/19/building-java-project/"},{"content":"なので配列(Array)には使えない。\ndatabase: \u0026amp;default ip: 192.168.1.5 port: 2000 db_name: test foo_database: \u0026lt;\u0026lt;: *default port: 2001 db_name: foo 上は実現できても下のようにはできない。\ndatabase_attr: \u0026amp;default - ip - port www_attr: \u0026lt;\u0026lt;: *default - name 関連: https://github.com/yaml/yaml/issues/35\n","description":"","id":227,"section":"blog","tags":["yaml"],"title":"yamlの継承っぽいのは継承というよりハッシュのマージ","uri":"https://yukihane.github.io/blog/201805/09/yaml/"},{"content":"Dockerfile 内で sudoers を編集しユーザ情報を追加したかった。\nRUN echo 'myuser ALL=(ALL) NOPASSWD: ALL' | EDITOR='tee -a' visudo  参考: linux - How do I edit /etc/sudoers from a script? - Stack Overflow\n","description":"","id":228,"section":"blog","tags":["linux"],"title":"ワンライナー sudoers 編集","uri":"https://yukihane.github.io/blog/201805/09/edit-sudoers-oneliner/"},{"content":"前提 既にビルド方法は確立しており、パッケージシステムに配布方法だけ任せたい、という場合に最小限の手間で RPM パッケージを作ることを考えます\n ビルドは RPM パッケージングのフロー中では行いません。既存のビルド方法でまかないます。 依存関係の設定は今回無視します。  参考リンク  RPM Packaging Guide  インストール RPM パッケージ作成のために必要なパッケージをインストールします。\n$ sudo yum install -y rpm-build rpmdevtools ディレクトリの作成 次のコマンドを実行し、rpm パッケージング作業に必要なディレクトリを作成します。\n$ rpmdev-setuptree ホームディレクトリ直下に次のようなディレクトリが作成されます。\n$ tree ~/rpmbuild /home/yuki/rpmbuild ├── BUILD ├── RPMS ├── SOURCES ├── SPECS └── SRPMS また、 ~/.rpmmacros ファイルが生成されます。\nインストール対象ファイルの配置 インストールするファイルを先ほど作成したディレクトリ ~/rpmbuild/BUILD ディレクトリに置きます。\n今回は hello-world.sh と goodby-world.sh の 2 ファイルを対象とすることにします。\n$ mv hello-world.sh ~/rpmbuild/BUILD/ $ mv goodby-world.sh ~/rpmbuild/BUILD/ spec ファイル作成 次のコマンドを実行すると、カレントディレクトリに spec フファイルの雛形が作成されます。\n今回は my-package という名前のパッケージを作成することにします。\n$ rpmdev-newspec my-package 必要最小限な spec ファイル 上記で作成したファイルを編集します。必須でないものについては削除することにすると、最終的に次のようなものになります。\nName: my-package Version: 0.0.1 Release: 1%{?dist} Summary: my first package License: proprietary BuildArch: noarch %description %install mkdir -p %{buildroot}%{_bindir} install -m 0755 hello-world.sh %{buildroot}%{_bindir}/hello-world.sh install -m 0755 goodby-world.sh %{buildroot}%{_bindir}/goodby-world.sh %files %{_bindir}/hello-world.sh %{_bindir}/goodby-world.sh  今回は bash スクリプトなので BuildArch: noarch を追記しましたが、このセクションを追加しなければビルドした環境(x86_64 など)が自動で付与されますので省略可能です。 %installセクションにインストール時に実行するコマンドを書き下します。　%{buildroot} が実際のインストール時のルートディレクトリ、と覚えておけばひとまず良いかと。 %files セクションにはインストールしたファイルを記述します。 %{buildroot}, %{_bindir} といったものはマクロ(macro)です。実際には事前定義された文字列で置き換えられます。詳しくは後述「Macro について」節を参照してください。 Version 及び Release については Fedora のGuidelines for Versioning Fedora Packagesが参考になるかも。  RPM パッケージ生成 次のコマンドを実行すると ~/rpmbuild/RPMS ディレクトリ以下に RPM パッケージが生成されます。\n$ rpmbuild -bb hello-world.spec 補足: Macro について More on Macros節及びそのリンク先が詳しいです。\n rpm --eval %{buildroot} など、 rpm --evalコマンドでマクロ展開結果を表示できます。 /usr/lib/rpm/macros に、システムが定義している macro があります。  付録: インストール先を変更できるように Relocatable RPM というそうです。\nspec ファイルに Prefix セクションを追加します。\nPrefix: %{_prefix} (※ %{_prefix} は実際には /usr )\nこれを追加してビルドした RPM パッケージの情報を見ると次のように表示されます。\n$ rpm -qip my-package-0.0.1-1.el7.centos.noarch.rpm ... Relocations : /usr ... このようなパッケージをインストールする際に --prefix オプションを付与して\n$ sudo rpm -ivh --prefix /usr/local my-package-0.0.1-1.el7.centos.noarch.rpm のようにインストールすると、 /usr/bin の代わりに /usr/local/bin 以下にスクリプトがインストールされます。\nちなみに Prefix を設定しない場合は \u0026ldquo;(not relocatable)\u0026rdquo; と表示されており、同じように --prefix オプションを付けてインストールしようとすると\n次のようにエラーになりインストールできません。\n$ sudo rpm -ivh --prefix /usr/local my-package-0.0.1-1.el7.centos.noarch.rpm エラー: パッケージ my-package は再配置できません。 ","description":"","id":229,"section":"blog","tags":["linux","centos"],"title":"手っ取り早くRPMパッケージを作成したかった","uri":"https://yukihane.github.io/blog/201803/20/building-rpm/"},{"content":"(注: 文中に記載の localRepository 設定有無、というのは間違った条件かも知れません(検証中))\n問題 mvn archetype:generate -DarchetypeCatalog=local コマンドを実行したところ、次のようなメッセージが出力され、 archetype-catalog.xml を認識できていないような感じでしたので原因を調べてみました。\n[INFO] No archetype defined. Using maven-archetype-quickstart (org.apache.maven.archetypes:maven-archetype-quickstart:1.0) Choose archetype: Your filter doesn't match any archetype (hint: enter to return to initial list) Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): : 調査内容 使用した Maven のバージョンは、現時点での最新バージョンである 3.5.2 です。\n自作の maven-archetype-java-quickstart を用い、次の 3 パターンを試しました。\n plugin を明示しない - master ブランチ plugin 最新バージョン 3.0.1 を明示する - feature/test-maven-archetype-pluginブランチ plugin 2.4 バージョンを明示する - 上の feature/test-maven-archetype-plugin を書き換え  また、 settings.xml での localRepository 設定の有無でも結果が変わりましたのでそれらをまとめます。\n調査結果 まず、 mvn archetype:update-local-catalog コマンドで archetype-catalog.xml が生成される場所です。\n plugin未設定2.43.0.1 localRepository設定無し~/.m2/~/.m2/~/.m2/repository/ localRepository設定有り{localRepository}/~/.m2/{localRepository}/  plugin を明示しない場合、一貫していません。\n次に、 mvn archetype:generate -DarchetypeCatalog=local コマンド実行時にどの場所にある archetype-catalog.xml を読んでいるのかを調べました。\n localRepository設定無し~/.m2/ localRepository設定有り{localRepository}/  まとめ  localRepository 設定を行ってない場合、 ~/.m2/archetype-catalog.xml を読みに行こうとするので 3.0.1 を使用したプロジェクトを読み取れない。 localRepository 設定を行っている場合、 {localRepository}/archetype-catalog.xml を読みに行こうとするので 2.4 を使用したプロジェクトを読み取れない。  という結果になりました。\nlocalRepository 設定有無で archetype-catalog.xml を読み取る場所に一貫性が無い、というのが根本原因だと思われますが、結果的には、 maven-archetype-plugin を明示していない(私のプロジェクトのような)場合問題が起きない、ということになります。\n関連するバグレポート  [ARCHETYPE-529] Maven archetype:generate does not find local archetypes in interactive mode - ASF JIRA  ","description":"","id":230,"section":"blog","tags":null,"title":"maven-archetype-plugin と archetype-catalog.xml 生成場所/読み取り場所","uri":"https://yukihane.github.io/blog/201802/25/maven-archetype-catalog/"},{"content":"dependency について、2.3.2. Servlet based server-side applicationをみると最小構成はjersey-container-servletだけでいいように見える(Servlet3.0 以降の場合)が、実際にはjersey-hk2も必要。含めない場合次の例外が発生する。\n java.lang.IllegalStateException: InjectionManagerFactory not found.\n 1.1. Creating a New Project from Maven Archetypeに記載されている archetype を使ってプロジェクトを生成してみても依存関係にちゃっかり入っている。\n検索した感じ、バージョン 2.26(これを書いている時点での最新バージョン)以降の症状かも知れない。\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.glassfish.jersey.containers\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jersey-container-servlet\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${jersey.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.glassfish.jersey.inject\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jersey-hk2\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${jersey.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;  次に、Java9 では Java EE 関連のモジュールがデフォルトではロードされなくなったため、Jersey を使った JAX-RS(REST)プログラムをmvn jetty:runで実行しようとすると次の例外が出る。\n java.lang.NoClassDefFoundError: javax/activation/DataSource\n また、次も発生。\n java.lang.NoClassDefFoundError: javax/xml/bind/PropertyException\n それぞれ解消するために --add-modules java.activation,java.xml.bind オプションを付与する。Maven で実行する場合は、 MAVEN_OPTS 環境変数に設定しておけばランタイム実行パラメータとなる。\nマイグレーションガイドのModules Shared with Java EE Not Resolved by Defaultにある通り、--add-modules java.se.eeの方が簡単で覚えやすいかもしれない。\nMAVEN_OPTS=\u0026quot;--add-modules java.activation,java.xml.bind\u0026quot; mvn jetty:run  ","description":"","id":231,"section":"blog","tags":["java","jetty","jersey"],"title":"Java9でJettyでJerseyのMaven","uri":"https://yukihane.github.io/blog/201801/28/java9-jetty-jersey/"},{"content":"Polymer2 で の値をバインドする で my-input なるカスタムエレメントを作成しました。\u0026lt;input\u0026gt;の入力値をそのまま表示するだけのエレメントです。\n1 2 3 4 5 6 7  \u0026lt;dom-module id=\u0026#34;my-input\u0026#34;\u0026gt; \u0026lt;template\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;{{text::input}}\u0026#34; /\u0026gt; [[text]] \u0026lt;/template\u0026gt; ... \u0026lt;/dom-module\u0026gt;   さて、この入力値を受け取れるよう、親エレメントを次のように作成しました。\n1 2 3 4 5 6 7  \u0026lt;dom-module id=\u0026#34;my-parent\u0026#34;\u0026gt; \u0026lt;template\u0026gt; \u0026lt;my-input text=\u0026#34;{{parentText}}\u0026#34;\u0026gt;\u0026lt;/my-input\u0026gt; [[parentText]] \u0026lt;/template\u0026gt; ... \u0026lt;/dom-module\u0026gt;   そして\u0026lt;input\u0026gt;に値を入力してみると…親に反映されない。\nいろいろ試行錯誤してみた所、親エレメント側にも ::input を足して\n1 2 3 4 5 6 7  \u0026lt;dom-module id=\u0026#34;my-parent\u0026#34;\u0026gt; \u0026lt;template\u0026gt; \u0026lt;my-input text=\u0026#34;{{parentText::input}}\u0026#34;\u0026gt;\u0026lt;/my-input\u0026gt; [[parentText]] \u0026lt;/template\u0026gt; ... \u0026lt;/dom-module\u0026gt;   とすれば反映されるようになりました。けど、これはどうなんだろう？\n子(my-inputエレメント)は、まあ自分が\u0026lt;input\u0026gt;を扱っているのを知っているから良いとして、親(my-parentエレメント)が子の事情を考慮して実装しないといけないとは。\nこれの答えはここでした。\n Data system concepts - How data flow is controlled 和訳: データフローの制御の仕組み  てっきりカーリーブラケット{{}}は、子エレメントへも親エレメントへも自動で反映してくれるものだと思っていたのですが、正確には、「親エレメントへも反映できる」だけで、デフォルトでは反映してくれないようです。\n Automatic, which allows upward (target to host) and downwards (host to target) data flow. Automatic bindings use double curly brackets ({{ }}):\n \n notify. A notifying property supports upward data flow. By default, properties are non-notifying, and don\u0026rsquo;t support upward data flow.\n そんなわけで、notifyを明示的にtrueに設定してやる必要がありました。\n子エレメント(今回の場合だとmy-input)のプロパティ定義で次のようにすれば良いことになります。\n冒頭に書いたような、親エレメント(今回の場合はmy-parent)に::inputは必要ありません。\n1 2 3 4 5 6 7 8  static get properties() { return { text:{ type: String, notify: true } } }   ","description":"","id":232,"section":"blog","tags":["polymer","frontend"],"title":"Polymer2 で \u0026lt;input\u0026gt; の値を「親エレメントの値と」バインドする","uri":"https://yukihane.github.io/blog/201801/21/polymer2-input-bind-to-parent/"},{"content":"ドキュメントのstartを読み終えて、さあなにか作ってみるか、そうだよく 2-way binding の例で出てくるinputタグ入力値を画面に反映させるのをやってみよう、と思って\n1 2 3 4  \u0026lt;template\u0026gt; \u0026lt;div\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;{{text}}\u0026#34; /\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;[[text]]\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt;   とかやってみたものの上手く行かなかった。\n答えはここにありました。\n Two-way binding to a non-Polymer element 和訳: Polymer 要素でない要素への双方向データバインディング  inputイベントを拾うために次のように ::input を後ろにくっつける必要がある。\n1 2 3 4  \u0026lt;template\u0026gt; \u0026lt;div\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;{{text::input}}\u0026#34; /\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;[[text]]\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt;   参考: Cannot data bind to \u0026lt;input\u0026gt; in Polymer 2.0 - Stack Overflow\n全文はこちら:\nhttps://jsfiddle.net/2eqkymLf/\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;ja\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34; /\u0026gt; \u0026lt;base href=\u0026#34;https://polygit.org/components/\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;webcomponentsjs/webcomponents-lite.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;import\u0026#34; href=\u0026#34;polymer/polymer.html\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;import\u0026#34; href=\u0026#34;polymer/polymer-element.html\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;my-input\u0026gt;\u0026lt;/my-input\u0026gt; \u0026lt;dom-module id=\u0026#34;my-input\u0026#34;\u0026gt; \u0026lt;template\u0026gt; \u0026lt;div\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;{{text::input}}\u0026#34; /\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;[[text]]\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; // For Firefox  // https://github.com/Polymer/polymer-bundler/issues/234#issuecomment-133379949  window.addEventListener(\u0026#34;WebComponentsReady\u0026#34;, function () { class MyInput extends Polymer.Element { static get is() { return \u0026#34;my-input\u0026#34;; } static get properties() { return { text: String, }; } constructor() { super(); } } customElements.define(MyInput.is, MyInput); }); \u0026lt;/script\u0026gt; \u0026lt;/dom-module\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   ","description":"","id":233,"section":"blog","tags":["polymer","frontend"],"title":"Polymer2 で \u0026lt;input\u0026gt; の値をバインドする","uri":"https://yukihane.github.io/blog/201801/21/polymer2-input-bind/"}]